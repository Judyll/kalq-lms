/********************************************************/
/* This SQL Statements is used for the					*/
/* 		Loan Management System (LMS)					*/
/*Programmed by: Judyll Mark T. Agan					*/
/*Date created: March 09, 2010							*/
/*SERVER SOLUTIONS [ 3 ] TRIGGERS AND PROCEDURES		*/
/*DEPENDENT TO OTHER TABLES								*/
/********************************************************/

USE db_lmsdev_03092010
GO


-- ###########################################DROP TABLE CONSTRAINTS ##############################################################

--verifies if the Office_Employer_Information_Created_By_FK constraint exists--
IF OBJECT_ID('lms.office_employer_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.office_employer_information
	DROP CONSTRAINT Office_Employer_Information_Created_By_FK
END
GO
-----------------------------------------------------	

--verifies if the Office_Employer_Information_Edited_By_FK constraint exists--
IF OBJECT_ID('lms.office_employer_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.office_employer_information
	DROP CONSTRAINT Office_Employer_Information_Edited_By_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Information_Life_Status_Code_FK constraint exists--
IF OBJECT_ID('lms.person_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_information
	DROP CONSTRAINT Person_Information_Life_Status_Code_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Information_Gender_Code_FK constraint exists--
IF OBJECT_ID('lms.person_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_information
	DROP CONSTRAINT Person_Information_Gender_Code_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Information_Marital_Status_Code_FK constraint exists--
IF OBJECT_ID('lms.person_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_information
	DROP CONSTRAINT Person_Information_Marital_Status_Code_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Information_Office_Employer_ID_FK constraint exists--
IF OBJECT_ID('lms.person_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_information
	DROP CONSTRAINT Person_Information_Office_Employer_ID_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Information_Appointment_Status_Code_FK constraint exists--
IF OBJECT_ID('lms.person_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_information
	DROP CONSTRAINT Person_Information_Appointment_Status_Code_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Information_Created_By_FK constraint exists--
IF OBJECT_ID('lms.person_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_information
	DROP CONSTRAINT Person_Information_Created_By_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Information_Edited_By_FK constraint exists--
IF OBJECT_ID('lms.person_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_information
	DROP CONSTRAINT Person_Information_Edited_By_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Document_SysID_Person_FK constraint exists--
IF OBJECT_ID('lms.person_document', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_document
	DROP CONSTRAINT Person_Document_SysID_Person_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Document_Created_By_FK constraint exists--
IF OBJECT_ID('lms.person_document', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_document
	DROP CONSTRAINT Person_Document_Created_By_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Document_Edited_By_FK constraint exists--
IF OBJECT_ID('lms.person_document', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_document
	DROP CONSTRAINT Person_Document_Edited_By_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Beneficiary_Information_SysID_Person_FK constraint exists--
IF OBJECT_ID('lms.person_beneficiary_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_beneficiary_information
	DROP CONSTRAINT Person_Beneficiary_Information_SysID_Person_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Beneficiary_Information_In_Relationship_With_SysID_Person_FK constraint exists--
IF OBJECT_ID('lms.person_beneficiary_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_beneficiary_information
	DROP CONSTRAINT Person_Beneficiary_Information_In_Relationship_With_SysID_Person_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Beneficiary_Information_Relationship_Type_ID_FK constraint exists--
IF OBJECT_ID('lms.person_beneficiary_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_beneficiary_information
	DROP CONSTRAINT Person_Beneficiary_Information_Relationship_Type_ID_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Beneficiary_Information_Created_By_FK constraint exists--
IF OBJECT_ID('lms.person_beneficiary_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_beneficiary_information
	DROP CONSTRAINT Person_Beneficiary_Information_Created_By_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Beneficiary_Information_Edited_By_FK constraint exists--
IF OBJECT_ID('lms.person_beneficiary_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_beneficiary_information
	DROP CONSTRAINT Person_Beneficiary_Information_Edited_By_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Reference_Information_SysID_Person_FK constraint exists--
IF OBJECT_ID('lms.person_reference_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_reference_information
	DROP CONSTRAINT Person_Reference_Information_SysID_Person_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Reference_Information_In_Reference_With_SysID_Person_FK constraint exists--
IF OBJECT_ID('lms.person_reference_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_reference_information
	DROP CONSTRAINT Person_Reference_Information_In_Reference_With_SysID_Person_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Reference_Information_Created_By_FK constraint exists--
IF OBJECT_ID('lms.person_reference_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_reference_information
	DROP CONSTRAINT Person_Reference_Information_Created_By_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Reference_Information_Edited_By_FK constraint exists--
IF OBJECT_ID('lms.person_reference_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_reference_information
	DROP CONSTRAINT Person_Reference_Information_Edited_By_FK
END
GO
-----------------------------------------------------

--verifies if the Person_Spouse_Information_SysID_Person_FK constraint exists--
IF OBJECT_ID('lms.person_spouse_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_spouse_information
	DROP CONSTRAINT Person_Spouse_Information_SysID_Person_FK
END
GO
-----------------------------------------------------

--verifies if the Person_Spouse_Information_In_Relationship_With_SysID_Person_FK constraint exists--
IF OBJECT_ID('lms.person_spouse_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_spouse_information
	DROP CONSTRAINT Person_Spouse_Information_In_Relationship_With_SysID_Person_FK
END
GO
-----------------------------------------------------

--verifies if the Person_Spouse_Information_Relationship_Type_ID_FK constraint exists--
IF OBJECT_ID('lms.person_spouse_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_spouse_information
	DROP CONSTRAINT Person_Spouse_Information_Relationship_Type_ID_FK
END
GO
-----------------------------------------------------

--verifies if the Person_Spouse_Information_Created_By_FK constraint exists--
IF OBJECT_ID('lms.person_spouse_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_spouse_information
	DROP CONSTRAINT Person_Spouse_Information_Created_By_FK
END
GO
-----------------------------------------------------

--verifies if the Person_Spouse_Information_Edited_By_FK constraint exists--
IF OBJECT_ID('lms.person_spouse_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.person_spouse_information
	DROP CONSTRAINT Person_Spouse_Information_Edited_By_FK
END
GO
-----------------------------------------------------

--verifies if the Member_Relationship_Information_SysID_Member_FK constraint exists--
IF OBJECT_ID('lms.member_relationship_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.member_relationship_information
	DROP CONSTRAINT Member_Relationship_Information_SysID_Member_FK
END
GO
-----------------------------------------------------

--verifies if the Member_Relationship_Information_In_Relationship_With_SysID_Member_FK constraint exists--
IF OBJECT_ID('lms.member_relationship_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.member_relationship_information
	DROP CONSTRAINT Member_Relationship_Information_In_Relationship_With_SysID_Member_FK
END
GO
-----------------------------------------------------

--verifies if the Member_Relationship_Information_Relationship_Type_ID_FK constraint exists--
IF OBJECT_ID('lms.member_relationship_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.member_relationship_information
	DROP CONSTRAINT Member_Relationship_Information_Relationship_Type_ID_FK
END
GO
-----------------------------------------------------

--verifies if the Member_Relationship_Information_Created_By_FK constraint exists--
IF OBJECT_ID('lms.member_relationship_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.member_relationship_information
	DROP CONSTRAINT Member_Relationship_Information_Created_By_FK
END
GO
-----------------------------------------------------

--verifies if the Member_Relationship_Information_Edited_By_FK constraint exists--
IF OBJECT_ID('lms.member_relationship_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE lms.member_relationship_information
	DROP CONSTRAINT Member_Relationship_Information_Edited_By_FK
END
GO
-----------------------------------------------------

-- ########################################END DROP TABLE CONSTRAINTS ##############################################################




-- ########################################DROP DEPENDENT TABLE CONSTRAINTS ##############################################################

--verifies if the System_User_Info_SysID_Person_FK constraint exists
IF (OBJECT_ID('lms.system_user_info', 'U') IS NOT NULL) AND
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'system_user_info'))
BEGIN
	ALTER TABLE lms.system_user_info
	DROP CONSTRAINT System_User_Info_SysID_Person_FK
END
GO
------------------------------------------------------

--verifies if the Member_Information_SysID_Person_FK constraint exists
IF (OBJECT_ID('lms.member_information', 'U') IS NOT NULL) AND
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'member_information'))
BEGIN
	ALTER TABLE lms.member_information
	DROP CONSTRAINT Member_Information_SysID_Person_FK
END
GO
------------------------------------------------------

--verifies if the Member_Information_SysID_Person_UQ constraint exists
IF (OBJECT_ID('lms.member_information', 'U') IS NOT NULL) AND
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'member_information'))
BEGIN
	ALTER TABLE lms.member_information
	DROP CONSTRAINT Member_Information_SysID_Person_UQ
END
GO
------------------------------------------------------

--verifies if the Collector_Information_SysID_Person_FK constraint exists
IF (OBJECT_ID('lms.collector_information', 'U') IS NOT NULL) AND
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'collector_information'))
BEGIN
	ALTER TABLE lms.collector_information
	DROP CONSTRAINT Collector_Information_SysID_Person_FK
END
GO
------------------------------------------------------

--verifies if the Collector_Information_SysID_Person_UQ constraint exists
IF (OBJECT_ID('lms.collector_information', 'U') IS NOT NULL) AND
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'collector_information'))
BEGIN
	ALTER TABLE lms.collector_information
	DROP CONSTRAINT Collector_Information_SysID_Person_UQ
END
GO
------------------------------------------------------


-- ######################################END DROP DEPENDENT TABLE CONSTRAINTS ############################################################




-- ################################################TABLE "office_employer_information" OBJECTS######################################################
-- verifies if the office_employer_information table exists
IF OBJECT_ID('lms.office_employer_information', 'U') IS NOT NULL
	DROP TABLE lms.office_employer_information
GO

CREATE TABLE lms.office_employer_information 			
(
	office_employer_id varchar (50) NOT NULL 
		CONSTRAINT Office_Employer_Information_Office_Employer_ID_PK PRIMARY KEY (office_employer_id)
		CONSTRAINT Office_Employer_Information_Office_Employer_ID_CK CHECK (office_employer_id LIKE 'OEI%'),
	office_employer_name varchar (150) NOT NULL
		CONSTRAINT Office_Employer_Information_Office_Employer_Name_UQ UNIQUE (office_employer_name),
	office_employer_acronym varchar (20) NOT NULL
		CONSTRAINT Office_Employer_Information_Office_Employer_Acronym_UQ UNIQUE (office_employer_acronym),
	office_employer_address varchar (500) NULL,
	office_employer_phone_nos varchar (100) NULL,

	is_marked_deleted bit NOT NULL DEFAULT (0),

	created_on datetime NOT NULL DEFAULT (GETDATE()),
	created_by varchar (50) NOT NULL
		CONSTRAINT Office_Employer_Information_Created_By_FK FOREIGN KEY REFERENCES lms.system_user_info(system_user_id) ON UPDATE NO ACTION,
	
	edited_on datetime NULL,
	edited_by varchar (50) NULL	
		CONSTRAINT Office_Employer_Information_Edited_By_FK FOREIGN KEY REFERENCES lms.system_user_info(system_user_id) ON UPDATE NO ACTION,

	unique_id uniqueidentifier ROWGUIDCOL NOT NULL DEFAULT NEWSEQUENTIALID()
		CONSTRAINT Office_Employer_Information_Unique_ID_UQ UNIQUE (unique_id)
	
) ON [PRIMARY]
GO
------------------------------------------------------------------

-- create an index of the office_employer_information table 
CREATE INDEX Office_Employer_Information_Office_Employer_ID_Index
	ON lms.office_employer_information (office_employer_id ASC)
GO
------------------------------------------------------------------

--verifies that the trigger "Office_Employer_Information_Trigger_Insert" already exist
IF OBJECT_ID ('lms.Office_Employer_Information_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER lms.Office_Employer_Information_Trigger_Insert
GO

CREATE TRIGGER lms.Office_Employer_Information_Trigger_Insert
	ON  lms.office_employer_information
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @office_employer_id varchar (50)
	DECLARE @office_employer_name varchar (150)
	DECLARE @office_employer_acronym varchar (20)
	DECLARE @office_employer_address varchar (500)
	DECLARE @office_employer_phone_nos varchar (100)

	DECLARE @created_by varchar (50)
	
	SELECT 
		@office_employer_id = i.office_employer_id,
		@office_employer_name = i.office_employer_name,
		@office_employer_acronym = i.office_employer_acronym,
		@office_employer_address = i.office_employer_address,
		@office_employer_phone_nos = i.office_employer_phone_nos,
		
		@created_by = i.created_by
	FROM INSERTED AS i

	SET @transaction_done = 'CREATED a new office/employer information ' + 
							'[Office/Employer ID: ' + ISNULL(@office_employer_id, '') +
							'][Office/Employer Name: ' + ISNULL(@office_employer_name, '') +
							'][Acronym: ' + ISNULL(@office_employer_acronym, '') +
							'][Address: ' + ISNULL(@office_employer_address, '') +
							'][Phone Nos.: ' + ISNULL(@office_employer_phone_nos, '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE lms.InsertTransactionLog @created_by, @network_information, @transaction_done	
GO
-----------------------------------------------------------------

--verifies that the trigger "Office_Employer_Information_Trigger_Instead_Update" already exist
IF OBJECT_ID ('lms.Office_Employer_Information_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER lms.Office_Employer_Information_Trigger_Instead_Update
GO

CREATE TRIGGER lms.Office_Employer_Information_Trigger_Instead_Update
	ON  lms.office_employer_information
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @office_employer_id varchar (50)
	DECLARE @office_employer_name varchar (150)
	DECLARE @office_employer_acronym varchar (20)
	DECLARE @office_employer_address varchar (500)
	DECLARE @office_employer_phone_nos varchar (100)
	DECLARE @is_marked_deleted bit

	DECLARE @edited_by varchar (50)

	DECLARE @office_employer_name_b varchar (150)
	DECLARE @office_employer_acronym_b varchar (20)
	DECLARE @office_employer_address_b varchar (500)
	DECLARE @office_employer_phone_nos_b varchar (100)

	DECLARE @has_update bit

	DECLARE office_information_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.office_employer_id, i.office_employer_name, i.office_employer_acronym, i.office_employer_address, 
				i.office_employer_phone_nos, i.is_marked_deleted, i.edited_by
			FROM INSERTED AS i

	OPEN office_information_update_cursor

	FETCH NEXT FROM office_information_update_cursor
		INTO @office_employer_id, @office_employer_name, @office_employer_acronym, @office_employer_address, 
				@office_employer_phone_nos, @is_marked_deleted, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		IF (@is_marked_deleted = 0)
		BEGIN

			SELECT 
				@office_employer_name_b = oei.office_employer_name,
				@office_employer_acronym_b = oei.office_employer_acronym,
				@office_employer_address_b = oei.office_employer_address,
				@office_employer_phone_nos_b = oei.office_employer_phone_nos
			FROM 
				lms.office_employer_information AS oei
			WHERE
				oei.office_employer_id = @office_employer_id

			SET @transaction_done = ''
			SET @has_update = 0

			IF (NOT ISNULL(@office_employer_name COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@office_employer_name_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
			BEGIN
				SET @transaction_done = @transaction_done + '[Office/Employer Name Before: ' + ISNULL(@office_employer_name_b, '') + ']' +
															'[Office/Employer Name After: ' + ISNULL(@office_employer_name, '') + ']'
				SET @has_update = 1
			END
			ELSE
			BEGIN
				SET @transaction_done = @transaction_done + '[Office/Employer Name: ' + ISNULL(@office_employer_name, '') + ']'
			END

			IF (NOT ISNULL(@office_employer_acronym COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@office_employer_acronym_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
			BEGIN
				SET @transaction_done = @transaction_done + '[Acronym Before: ' + ISNULL(@office_employer_acronym_b, '') + ']' +
															'[Acronym After: ' + ISNULL(@office_employer_acronym, '') + ']'
				SET @has_update = 1
			END

			IF (NOT ISNULL(@office_employer_address COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@office_employer_address_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
			BEGIN
				SET @transaction_done = @transaction_done + '[Address Before: ' + ISNULL(@office_employer_address_b, '') + ']' +
															'[Address After: ' + ISNULL(@office_employer_address, '') + ']'
				SET @has_update = 1
			END
			
			IF (NOT ISNULL(@office_employer_phone_nos COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@office_employer_phone_nos_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
			BEGIN
				SET @transaction_done = @transaction_done + '[Phone Nos. Before: ' + ISNULL(@office_employer_phone_nos_b, '') + ']' +
															'[Phone Nos. After: ' + ISNULL(@office_employer_phone_nos, '') + ']'
				SET @has_update = 1
			END

			IF (@has_update = 1)
			BEGIN

				UPDATE lms.office_employer_information SET
					office_employer_name = @office_employer_name,
					office_employer_acronym = @office_employer_acronym,
					office_employer_address = @office_employer_address,
					office_employer_phone_nos = @office_employer_phone_nos,

					edited_on = GETDATE(),
					edited_by = @edited_by
				WHERE
					office_employer_id = @office_employer_id

				SET @transaction_done = 'UPDATED an office/employer information ' + 
										'[Office/Employer ID: ' + ISNULL(@office_employer_id, '') +
										']' + @transaction_done

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
				END

			END
			ELSE IF NOT @edited_by IS NULL
			BEGIN

				--used for the delete trigger
				UPDATE lms.office_employer_information SET
					edited_on = GETDATE(),
					edited_by = @edited_by
				WHERE
					office_employer_id = @office_employer_id

			END

		END

		FETCH NEXT FROM office_information_update_cursor
			INTO @office_employer_id, @office_employer_name, @office_employer_acronym, @office_employer_address, 
				@office_employer_phone_nos, @is_marked_deleted, @edited_by

	END

	CLOSE office_information_update_cursor
	DEALLOCATE office_information_update_cursor

GO
----------------------------------------------------------------------

--verifies that the trigger "Office_Employer_Information_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('lms.Office_Employer_Information_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER lms.Office_Employer_Information_Trigger_Instead_Delete
GO

CREATE TRIGGER lms.Office_Employer_Information_Trigger_Instead_Delete
	ON  lms.office_employer_information
	INSTEAD OF DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @office_employer_id varchar (50)
	DECLARE @office_employer_name varchar (150)
	DECLARE @office_employer_acronym varchar (20)
	DECLARE @office_employer_address varchar (500)
	DECLARE @office_employer_phone_nos varchar (100)
	DECLARE @is_marked_deleted bit

	DECLARE @deleted_by varchar (50)

	DECLARE office_information_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.office_employer_id, d.office_employer_name, d.office_employer_acronym, d.office_employer_address, 
					d.office_employer_phone_nos, d.is_marked_deleted, d.edited_by
				FROM DELETED AS d

	OPEN office_information_delete_cursor

	FETCH NEXT FROM office_information_delete_cursor
		INTO @office_employer_id, @office_employer_name, @office_employer_acronym, @office_employer_address, 
			@office_employer_phone_nos, @is_marked_deleted, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		IF @is_marked_deleted = 0
		BEGIN

			UPDATE lms.office_employer_information SET is_marked_deleted = 1, edited_by = @deleted_by WHERE office_employer_id = @office_employer_id

			SET @transaction_done = 'MARK AS DELETED an office/employer information ' + 
									'[Office/Employer ID: ' + ISNULL(@office_employer_id, '') +
									'][Office/Employer Name: ' + ISNULL(@office_employer_name, '') +
									'][Acronym: ' + ISNULL(@office_employer_acronym, '') +
									'][Address: ' + ISNULL(@office_employer_address, '') +
									'][Phone Nos.: ' + ISNULL(@office_employer_phone_nos, '') +
									']'


			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @deleted_by
			END
					
			EXECUTE lms.InsertTransactionLog @deleted_by, @network_information, @transaction_done	

		END

		FETCH NEXT FROM office_information_delete_cursor
			INTO @office_employer_id, @office_employer_name, @office_employer_acronym, @office_employer_address, 
				@office_employer_phone_nos, @is_marked_deleted, @deleted_by

	END

	CLOSE office_information_delete_cursor
	DEALLOCATE office_information_delete_cursor

GO
-----------------------------------------------------------------------

-- verifies if the procedure "InsertOfficeEmployerInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'InsertOfficeEmployerInformation')
   DROP PROCEDURE lms.InsertOfficeEmployerInformation
GO

CREATE PROCEDURE lms.InsertOfficeEmployerInformation
	
	@office_employer_id varchar (50) = '',
	@office_employer_name varchar (150) = '',
	@office_employer_acronym varchar (20) = '',
	@office_employer_address varchar (500) = '',
	@office_employer_phone_nos varchar (100) = '',

	@network_information varchar(MAX) = '',
	@created_by varchar(50)
	
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@created_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@created_by) = 1))
	BEGIN

		EXECUTE lms.CreateTemporaryTable @created_by, @network_information

		INSERT INTO lms.office_employer_information
		(
			office_employer_id,
			office_employer_name,
			office_employer_acronym,
			office_employer_address,
			office_employer_phone_nos,

			created_by
		)
		VALUES
		(
			@office_employer_id,
			@office_employer_name,
			@office_employer_acronym,
			@office_employer_address,
			@office_employer_phone_nos,

			@created_by
		)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Insert an office/employer information', 'Office/Employer Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.InsertOfficeEmployerInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "UpdateOfficeEmployerInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'UpdateOfficeEmployerInformation')
   DROP PROCEDURE lms.UpdateOfficeEmployerInformation
GO

CREATE PROCEDURE lms.UpdateOfficeEmployerInformation
	
	@office_employer_id varchar (50) = '',
	@office_employer_name varchar (150) = '',
	@office_employer_acronym varchar (20) = '',
	@office_employer_address varchar (500) = '',
	@office_employer_phone_nos varchar (100) = '',

	@network_information varchar(MAX) = '',
	@edited_by varchar(50)
	
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@edited_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@edited_by) = 1))
	BEGIN

		EXECUTE lms.CreateTemporaryTable @edited_by, @network_information

		UPDATE lms.office_employer_information SET
			office_employer_name = @office_employer_name,
			office_employer_acronym = @office_employer_acronym,
			office_employer_address = @office_employer_address,
			office_employer_phone_nos = @office_employer_phone_nos,

			edited_by = @edited_by
		WHERE
			office_employer_id = @office_employer_id

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Update an office/employer information', 'Office/Employer Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.UpdateOfficeEmployerInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "DeleteOfficeEmployerInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'DeleteOfficeEmployerInformation')
   DROP PROCEDURE lms.DeleteOfficeEmployerInformation
GO

CREATE PROCEDURE lms.DeleteOfficeEmployerInformation
	
	@office_employer_id varchar (50) = '',

	@network_information varchar(MAX) = '',
	@deleted_by varchar(50)
	
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@deleted_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@deleted_by) = 1))
	BEGIN

		IF EXISTS (SELECT office_employer_id FROM lms.office_employer_information WHERE office_employer_id = @office_employer_id)
		BEGIN	
	
			EXECUTE lms.CreateTemporaryTable @deleted_by, @network_information

			UPDATE lms.office_employer_information SET
				edited_by = @deleted_by
			WHERE
				office_employer_id = @office_employer_id

			DELETE FROM lms.office_employer_information WHERE office_employer_id = @office_employer_id

		END

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Delete an office/employer information', 'Office/Employer Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.DeleteOfficeEmployerInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectOfficeEmployerInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectOfficeEmployerInformation')
   DROP PROCEDURE lms.SelectOfficeEmployerInformation
GO

CREATE PROCEDURE lms.SelectOfficeEmployerInformation
	
	@query_string varchar (100) = '',
	@include_marked_deleted bit = 0,

	@system_user_id varchar (50) = ''
	
AS
	--	A - '*'
	--	B - include_marked_deleted

	--	A	B
	-- =========
	--	0	0
	--	0	1
	--	1	0
	--	1	1

	IF (lms.IsActiveSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%') AND (@include_marked_deleted = 0)
		BEGIN
	
			SELECT
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos				
			FROM
				lms.office_employer_information AS oei
			WHERE
				((oei.office_employer_id LIKE @query_string) OR 
				((REPLACE(oei.office_employer_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(oei.office_employer_name LIKE @query_string) OR 
				((REPLACE(oei.office_employer_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(oei.office_employer_acronym LIKE @query_string) OR 
				((REPLACE(oei.office_employer_acronym, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(oei.is_marked_deleted = 0)
			ORDER BY
				office_employer_name, office_employer_acronym ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (@include_marked_deleted = 1)
		BEGIN

			SELECT
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos				
			FROM
				lms.office_employer_information AS oei
			WHERE
				((oei.office_employer_id LIKE @query_string) OR 
				((REPLACE(oei.office_employer_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(oei.office_employer_name LIKE @query_string) OR 
				((REPLACE(oei.office_employer_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(oei.office_employer_acronym LIKE @query_string) OR 
				((REPLACE(oei.office_employer_acronym, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				office_employer_name, office_employer_acronym ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (@include_marked_deleted = 0)
		BEGIN

			SELECT
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos				
			FROM
				lms.office_employer_information AS oei
			WHERE
				(oei.is_marked_deleted = 0)
			ORDER BY
				office_employer_name, office_employer_acronym ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (@include_marked_deleted = 1)
		BEGIN

			SELECT
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos				
			FROM
				lms.office_employer_information AS oei
			ORDER BY
				office_employer_name, office_employer_acronym ASC

		END
	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query an office/employer information', 'Office/Employer Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectOfficeEmployerInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectCountOfficeEmployerInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectCountOfficeEmployerInformation')
   DROP PROCEDURE lms.SelectCountOfficeEmployerInformation
GO

CREATE PROCEDURE lms.SelectCountOfficeEmployerInformation
	
	@system_user_id varchar (50) = ''
	
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1))
	BEGIN

		SELECT COUNT(oei.office_employer_id) FROM lms.office_employer_information AS oei

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query an office/employer information', 'Office/Employer Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectCountOfficeEmployerInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsSysIDOfficeEmployerInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'IsExistsSysIDOfficeEmployerInformation')
   DROP PROCEDURE lms.IsExistsSysIDOfficeEmployerInformation
GO

CREATE PROCEDURE lms.IsExistsSysIDOfficeEmployerInformation
	
	@office_employer_id varchar (50) = '',
	@system_user_id varchar (50) = ''
	
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1))
	BEGIN

		SELECT lms.IsExistsSysIDOfficeEmployerInfo(@office_employer_id)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query an office/employer information', 'Office/Employer Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.IsExistsSysIDOfficeEmployerInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsNameOfficeEmployerInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'IsExistsNameOfficeEmployerInformation')
   DROP PROCEDURE lms.IsExistsNameOfficeEmployerInformation
GO

CREATE PROCEDURE lms.IsExistsNameOfficeEmployerInformation
	
	@office_employer_id varchar (50) = '',
	@office_employer_name varchar (150) = '',

	@system_user_id varchar (50) = ''
	
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1))
	BEGIN

		SELECT lms.IsExistsNameOfficeEmployerInfo(@office_employer_id, @office_employer_name)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query an office/employer information', 'Office/Employer Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.IsExistsNameOfficeEmployerInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsAcronymOfficeEmployerInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'IsExistsAcronymOfficeEmployerInformation')
   DROP PROCEDURE lms.IsExistsAcronymOfficeEmployerInformation
GO

CREATE PROCEDURE lms.IsExistsAcronymOfficeEmployerInformation
	
	@office_employer_id varchar (50) = '',
	@office_employer_acronym varchar (20) = '',

	@system_user_id varchar (50) = ''
	
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1))
	BEGIN

		SELECT lms.IsExistsAcronymOfficeEmployerInfo(@office_employer_id, @office_employer_acronym)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query an office/employer information', 'Office/Employer Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.IsExistsAcronymOfficeEmployerInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the "IsExistsSysIDOfficeEmployerInfo" function already exist
IF OBJECT_ID (N'lms.IsExistsSysIDOfficeEmployerInfo') IS NOT NULL
   DROP FUNCTION lms.IsExistsSysIDOfficeEmployerInfo
GO

CREATE FUNCTION lms.IsExistsSysIDOfficeEmployerInfo
(	
	@office_employer_id varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT office_employer_id FROM lms.office_employer_information WHERE office_employer_id = @office_employer_id)
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "IsExistsNameOfficeEmployerInfo" function already exist
IF OBJECT_ID (N'lms.IsExistsNameOfficeEmployerInfo') IS NOT NULL
   DROP FUNCTION lms.IsExistsNameOfficeEmployerInfo
GO

CREATE FUNCTION lms.IsExistsNameOfficeEmployerInfo
(	
	@office_employer_id varchar (50) = '',
	@office_employer_name varchar (150) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT office_employer_id FROM lms.office_employer_information WHERE NOT office_employer_id = @office_employer_id AND
							((REPLACE(office_employer_name, ' ', '')) LIKE REPLACE(@office_employer_name, ' ', '')))
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "IsExistsAcronymOfficeEmployerInfo" function already exist
IF OBJECT_ID (N'lms.IsExistsAcronymOfficeEmployerInfo') IS NOT NULL
   DROP FUNCTION lms.IsExistsAcronymOfficeEmployerInfo
GO

CREATE FUNCTION lms.IsExistsAcronymOfficeEmployerInfo
(	
	@office_employer_id varchar (50) = '',
	@office_employer_acronym varchar (20) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT office_employer_id FROM lms.office_employer_information WHERE NOT office_employer_id = @office_employer_id AND
							((REPLACE(office_employer_acronym, ' ', '')) LIKE REPLACE(@office_employer_acronym, ' ', '')))
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------


-- ##############################################END TABLE "office_employer_information" OBJECTS######################################################




-- ################################################TABLE "person_information" OBJECTS######################################################
-- verifies if the person_information table exists
IF OBJECT_ID('lms.person_information', 'U') IS NOT NULL
	DROP TABLE lms.person_information
GO

CREATE TABLE lms.person_information 			
(
	sysid_person varchar (50) NOT NULL
		CONSTRAINT Person_Information_SysID_Person_PK PRIMARY KEY (sysid_person)
		CONSTRAINT Person_Information_SysID_Person_CK CHECK (sysid_person LIKE 'SYSPER%'),
	last_name varchar (50) NOT NULL,
	first_name varchar (50) NOT NULL,
	middle_name varchar (50) NULL DEFAULT (''),
	life_status_code varchar (50) NULL
		CONSTRAINT Person_Information_Life_Status_Code_FK FOREIGN KEY REFERENCES lms.code_reference(code_reference_id) ON UPDATE NO ACTION,
	gender_code varchar (50) NULL
		CONSTRAINT Person_Information_Gender_Code_FK FOREIGN KEY REFERENCES lms.code_reference(code_reference_id) ON UPDATE NO ACTION,
	birthdate datetime NULL,
	place_birth varchar (500) NULL,
	email_address varchar (100) NULL,
	present_address varchar (500) NULL,
	present_phone_nos varchar (100) NULL,
	home_address varchar (500) NULL,
	home_phone_nos varchar (100) NULL,
	house_ownership_information varchar (MAX) NULL,
	citizenship varchar (100) NULL,
	nationality varchar (100) NULL,
	religion varchar (100) NULL,
	educational_attainment varchar (MAX) NULL,
	special_skills varchar (MAX) NULL,
	
	marital_status_code varchar (50) NULL
		CONSTRAINT Person_Information_Marital_Status_Code_FK FOREIGN KEY REFERENCES lms.code_reference(code_reference_id) ON UPDATE NO ACTION,
	marriage_date datetime NULL,
	no_of_dependents tinyint NULL,
	
	occupation varchar (100) NULL,
	office_employer_id varchar (50) NULL
		CONSTRAINT Person_Information_Office_Employer_ID_FK FOREIGN KEY REFERENCES lms.office_employer_information(office_employer_id) ON UPDATE NO ACTION,
	appointment_status_code varchar (50) NULL
		CONSTRAINT Person_Information_Appointment_Status_Code_FK FOREIGN KEY REFERENCES lms.code_reference(code_reference_id) ON UPDATE NO ACTION,
	employment_date datetime NULL,
	years_of_service tinyint NULL,
	salary_income decimal (15, 2) NULL,
	other_income_source varchar (MAX) NULL,
	total_monthly_expenses decimal (15, 2) NULL,
	net_disposable_income decimal (15, 2) NULL,
	
	other_person_information varchar (MAX) NULL,

	for_member bit NOT NULL DEFAULT (0),
	for_collector bit NOT NULL DEFAULT (0),
	for_login bit NOT NULL DEFAULT (0),

	created_on datetime NOT NULL DEFAULT (GETDATE()),
	created_by varchar (50) NOT NULL
		CONSTRAINT Person_Information_Created_By_FK FOREIGN KEY REFERENCES lms.system_user_info(system_user_id) ON UPDATE NO ACTION,
	
	edited_on datetime NULL,
	edited_by varchar (50) NULL	
		CONSTRAINT Person_Information_Edited_By_FK FOREIGN KEY REFERENCES lms.system_user_info(system_user_id) ON UPDATE NO ACTION,

	unique_id uniqueidentifier ROWGUIDCOL NOT NULL DEFAULT NEWSEQUENTIALID()
		CONSTRAINT Person_Information_Unique_ID_UQ UNIQUE (unique_id)
	
) ON [PRIMARY]
GO
--------------------------------------------------------

-- create an index of the person_information table 
CREATE INDEX Person_Information_SysID_Person_Index
	ON lms.person_information (sysid_person ASC)
GO
------------------------------------------------------------------

-- ##############################################END TABLE "person_information" OBJECTS######################################################




-- ######################################RESTORE DEPENDENT TABLE CONSTRAINTS#############################################################

--verifies if the System_User_Info_SysID_Person_FK constraint exists
IF (OBJECT_ID('lms.system_user_info', 'U') IS NOT NULL) AND 
	(NOT EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'system_user_info'))
BEGIN
	ALTER TABLE lms.system_user_info
	ADD sysid_person varchar (50) NOT NULL DEFAULT ('')
END
GO

IF (OBJECT_ID('lms.system_user_info', 'U') IS NOT NULL) AND 
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'system_user_info'))
BEGIN
	ALTER TABLE lms.system_user_info WITH NOCHECK
	ADD CONSTRAINT System_User_Info_SysID_Person_FK FOREIGN KEY (sysid_person) REFERENCES lms.person_information(sysid_person) ON UPDATE NO ACTION
END
GO

-----------------------------CANNOT ADD A UNIQUE CONSTRAINT FOR THE SYSTEM USER INFO BECAUSE OF THE DEFAULT USERS---------------------------
--IF (OBJECT_ID('lms.system_user_info', 'U') IS NOT NULL) AND 
--	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'system_user_info'))
--BEGIN
--	ALTER TABLE lms.system_user_info WITH NOCHECK
--	ADD CONSTRAINT System_User_Info_SysID_Person_UQ UNIQUE (sysid_person)
--END
--GO
-----------------------------------------------------

--verifies if the Member_Information_SysID_Person_FK constraint exists
IF (OBJECT_ID('lms.member_information', 'U') IS NOT NULL) AND 
	(NOT EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'member_information'))
BEGIN
	ALTER TABLE lms.member_information
	ADD sysid_person varchar (50) NOT NULL DEFAULT ('')
END
GO

IF (OBJECT_ID('lms.member_information', 'U') IS NOT NULL) AND 
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'member_information'))
BEGIN
	ALTER TABLE lms.member_information WITH NOCHECK
	ADD CONSTRAINT Member_Information_SysID_Person_FK FOREIGN KEY (sysid_person) REFERENCES lms.person_information(sysid_person) ON UPDATE NO ACTION
END
GO

IF (OBJECT_ID('lms.member_information', 'U') IS NOT NULL) AND 
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'member_information'))
BEGIN
	ALTER TABLE lms.member_information WITH NOCHECK
	ADD CONSTRAINT Member_Information_SysID_Person_UQ UNIQUE (sysid_person)
END
GO
-----------------------------------------------------

--verifies if the Collector_Information_SysID_Person_FK constraint exists
IF (OBJECT_ID('lms.collector_information', 'U') IS NOT NULL) AND 
	(NOT EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'collector_information'))
BEGIN
	ALTER TABLE lms.collector_information
	ADD sysid_person varchar (50) NOT NULL DEFAULT ('')
END
GO

IF (OBJECT_ID('lms.collector_information', 'U') IS NOT NULL) AND 
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'collector_information'))
BEGIN
	ALTER TABLE lms.collector_information WITH NOCHECK
	ADD CONSTRAINT Collector_Information_SysID_Person_FK FOREIGN KEY (sysid_person) REFERENCES lms.person_information(sysid_person) ON UPDATE NO ACTION
END
GO

IF (OBJECT_ID('lms.collector_information', 'U') IS NOT NULL) AND 
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'collector_information'))
BEGIN
	ALTER TABLE lms.collector_information WITH NOCHECK
	ADD CONSTRAINT Collector_Information_SysID_Person_UQ UNIQUE (sysid_person)
END
GO
-----------------------------------------------------

-- ###################################END RESTORE DEPENDENT TABLE CONSTRAINTS############################################################




-- ################################################TABLE "person_information" OBJECTS######################################################

--verifies that the trigger "Person_Information_Trigger_Insert" already exist
IF OBJECT_ID ('lms.Person_Information_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER lms.Person_Information_Trigger_Insert
GO

CREATE TRIGGER lms.Person_Information_Trigger_Insert
	ON  lms.person_information
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_person varchar (50)
	DECLARE @last_name varchar (50)
	DECLARE @first_name varchar (50)
	DECLARE @middle_name varchar (50)
	DECLARE @life_status_code varchar (50)
	DECLARE @gender_code varchar (50)
	DECLARE @birthdate datetime
	DECLARE @place_birth varchar (500)
	DECLARE @email_address varchar (100)
	DECLARE @present_address varchar (500)
	DECLARE @present_phone_nos varchar (100)
	DECLARE @home_address varchar (500)
	DECLARE @home_phone_nos varchar (100)
	DECLARE @house_ownership_information varchar (MAX)
	DECLARE @citizenship varchar (100)
	DECLARE @nationality varchar (100)
	DECLARE @religion varchar (100)
	DECLARE @educational_attainment varchar (MAX)
	DECLARE @special_skills varchar (MAX)

	DECLARE @marital_status_code varchar (50)
	DECLARE @marriage_date datetime
	DECLARE @no_of_dependents tinyint

	DECLARE @occupation varchar (100)
	DECLARE @office_employer_id varchar (50)
	DECLARE @appointment_status_code varchar (50)
	DECLARE @employment_date datetime
	DECLARE @years_of_service tinyint
	DECLARE @salary_income decimal (15, 2)
	DECLARE @other_income_source varchar (MAX)
	DECLARE @total_monthly_expenses decimal (15, 2)
	DECLARE @net_disposable_income decimal (15, 2)

	DECLARE @other_person_information varchar (MAX)

	DECLARE @for_member bit
	DECLARE @for_collector bit
	DECLARE @for_login bit

	DECLARE @created_by varchar (50)
	
	SELECT 
		@sysid_person = i.sysid_person,
		@last_name = i.last_name,
		@first_name = i.first_name,
		@middle_name = i.middle_name,
		@life_status_code = i.life_status_code,
		@gender_code = i.gender_code,
		@birthdate = i.birthdate,
		@place_birth = i.place_birth,
		@email_address = i.email_address,
		@present_address = i.present_address,
		@present_phone_nos = i.present_phone_nos,
		@home_address = i.home_address,
		@home_phone_nos = i.home_phone_nos,
		@house_ownership_information = i.house_ownership_information,
		@citizenship = i.citizenship,
		@nationality = i.nationality,
		@religion = i.religion,
		@educational_attainment = i.educational_attainment,
		@special_skills = i.special_skills,

		@marital_status_code = i.marital_status_code,
		@marriage_date = i.marriage_date,
		@no_of_dependents = i.no_of_dependents,

		@occupation = i.occupation,
		@office_employer_id = i.office_employer_id,
		@appointment_status_code = i.appointment_status_code,
		@employment_date = i.employment_date,
		@years_of_service = i.years_of_service,
		@salary_income = i.salary_income,
		@other_income_source = i.other_income_source,
		@total_monthly_expenses = i.total_monthly_expenses,
		@net_disposable_income = i.net_disposable_income,

		@other_person_information = i.other_person_information,

		@for_member = i.for_member,
		@for_collector = i.for_collector,
		@for_login = i.for_login,
		
		@created_by = i.created_by
	FROM INSERTED AS i

	IF (@for_member = 0) AND (@for_login = 0)
	BEGIN

		SET @transaction_done = 'CREATED a new person information ' + 
								'[Person System ID: ' + ISNULL(@sysid_person, '') +
								'][Name: ' + @last_name + ', ' + @first_name + ' ' + ISNULL(@middle_name, '') +
								'][Life Status: ' + ISNULL((SELECT
																	crf.code_description
																FROM
																	lms.code_reference AS crf
																WHERE
																	crf.code_reference_id = @life_status_code), '') +
								'][Gender: ' + ISNULL((SELECT
																	crf.code_description
																FROM
																	lms.code_reference AS crf
																WHERE
																	crf.code_reference_id = @gender_code), '') +
								'][Birthdate: ' + ISNULL(CONVERT(varchar, @birthdate, 101), '') +
								'][Place of Birth: ' + ISNULL(@place_birth, '') +
								'][Email Address: ' + ISNULL(@email_address, '') +
								'][Present Address: ' + ISNULL(@present_address, '') +
								'][Present Phone Nos.: ' + ISNULL(@present_phone_nos, '') +
								'][Home Address: ' + ISNULL(@home_address, '') +
								'][Home Phone Nos.: ' + ISNULL(@home_phone_nos, '') +
								'][House Ownership Information: ' + ISNULL(@house_ownership_information, '') +
								'][Citizenship: ' + ISNULL(@citizenship, '') +
								'][Nationality: ' + ISNULL(@nationality, '') +
								'][Religion: ' + ISNULL(@religion, '') +
								'][Educational Attainment: ' + ISNULL(@educational_attainment, '') +
								'][Special Skills: ' + ISNULL(@special_skills, '') +

								'][Marital Status: ' + ISNULL((SELECT
																	crf.code_description
																FROM
																	lms.code_reference AS crf
																WHERE
																	crf.code_reference_id = @marital_status_code), '') +
								'][Marriage Date: ' + ISNULL(CONVERT(varchar, @marriage_date, 101), '') +
								'][No. of Dependents: ' + ISNULL(CONVERT(varchar, @no_of_dependents), '') +

								'][Occupation: ' + ISNULL(@occupation, '') +
								'][Office/Employer: ' + ISNULL((SELECT
																	oei.office_employer_name
																FROM
																	lms.office_employer_information AS oei
																WHERE
																	oei.office_employer_id = @office_employer_id), '') +
								'][Appointment Status: ' + ISNULL((SELECT
																		crf.code_description
																	FROM
																		lms.code_reference AS crf
																	WHERE
																		crf.code_reference_id = @appointment_status_code), '') +
								'][Employment Date: ' + ISNULL(CONVERT(varchar, @employment_date, 101), '') +
								'][Years of Service: ' + ISNULL(CONVERT(varchar, @years_of_service), '') +
								'][Salary / Income: ' + ISNULL(CONVERT(varchar, CONVERT(money, @salary_income), 1), '0.00') +
								'][Other Income Source: ' + ISNULL(@other_income_source, '') +
								'][Total Monthly Expenses: ' + ISNULL(CONVERT(varchar, CONVERT(money, @total_monthly_expenses), 1), '0.00') +
								'][Net Disposable Income: ' + ISNULL(CONVERT(varchar, CONVERT(money, @net_disposable_income), 1), '0.00') +

								'][Other Person Information: ' + ISNULL(@other_person_information, '') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @created_by
		END
				
		EXECUTE lms.InsertTransactionLog @created_by, @network_information, @transaction_done

	END

GO
-----------------------------------------------------------------

--verifies that the trigger "Person_Information_Trigger_Instead_Update" already exist
IF OBJECT_ID ('lms.Person_Information_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER lms.Person_Information_Trigger_Instead_Update
GO

CREATE TRIGGER lms.Person_Information_Trigger_Instead_Update
	ON  lms.person_information
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_person varchar (50)
	DECLARE @last_name varchar (50)
	DECLARE @first_name varchar (50)
	DECLARE @middle_name varchar (50)
	DECLARE @life_status_code varchar (50)
	DECLARE @gender_code varchar (50)
	DECLARE @birthdate datetime
	DECLARE @place_birth varchar (500)
	DECLARE @email_address varchar (100)
	DECLARE @present_address varchar (500)
	DECLARE @present_phone_nos varchar (100)
	DECLARE @home_address varchar (500)
	DECLARE @home_phone_nos varchar (100)
	DECLARE @house_ownership_information varchar (MAX)
	DECLARE @citizenship varchar (100)
	DECLARE @nationality varchar (100)
	DECLARE @religion varchar (100)
	DECLARE @educational_attainment varchar (MAX)
	DECLARE @special_skills varchar (MAX)

	DECLARE @marital_status_code varchar (50)
	DECLARE @marriage_date datetime
	DECLARE @no_of_dependents tinyint

	DECLARE @occupation varchar (100)
	DECLARE @office_employer_id varchar (50)
	DECLARE @appointment_status_code varchar (50)
	DECLARE @employment_date datetime
	DECLARE @years_of_service tinyint
	DECLARE @salary_income decimal (15, 2)
	DECLARE @other_income_source varchar (MAX)
	DECLARE @total_monthly_expenses decimal (15, 2)
	DECLARE @net_disposable_income decimal (15, 2)

	DECLARE @other_person_information varchar (MAX)

	DECLARE @for_member bit
	DECLARE @for_collector bit
	DECLARE @for_login bit

	DECLARE @edited_by varchar (50)

	DECLARE @last_name_b varchar (50)
	DECLARE @first_name_b varchar (50)
	DECLARE @middle_name_b varchar (50)
	DECLARE @life_status_code_b varchar (50)
	DECLARE @gender_code_b varchar (50)
	DECLARE @birthdate_b datetime
	DECLARE @place_birth_b varchar (500)
	DECLARE @email_address_b varchar (100)
	DECLARE @present_address_b varchar (500)
	DECLARE @present_phone_nos_b varchar (100)
	DECLARE @home_address_b varchar (500)
	DECLARE @home_phone_nos_b varchar (100)
	DECLARE @house_ownership_information_b varchar (MAX)
	DECLARE @citizenship_b varchar (100)
	DECLARE @nationality_b varchar (100)
	DECLARE @religion_b varchar (100)
	DECLARE @educational_attainment_b varchar (MAX)
	DECLARE @special_skills_b varchar (MAX)

	DECLARE @marital_status_code_b varchar (50)
	DECLARE @marriage_date_b datetime
	DECLARE @no_of_dependents_b tinyint

	DECLARE @occupation_b varchar (100)
	DECLARE @office_employer_id_b varchar (50)
	DECLARE @appointment_status_code_b varchar (50)
	DECLARE @employment_date_b datetime
	DECLARE @years_of_service_b tinyint
	DECLARE @salary_income_b decimal (15, 2)
	DECLARE @other_income_source_b varchar (MAX)
	DECLARE @total_monthly_expenses_b decimal (15, 2)
	DECLARE @net_disposable_income_b decimal (15, 2)

	DECLARE @other_person_information_b varchar (MAX)

	DECLARE @has_update bit

	DECLARE person_information_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.sysid_person, i.last_name, i.first_name, i.middle_name, i.life_status_code, i.gender_code, i.birthdate, i.place_birth,
				i.email_address, i.present_address, i.present_phone_nos, i.home_address, i.home_phone_nos, i.house_ownership_information,
				i.citizenship, i.nationality, i.religion, i.educational_attainment, i.special_skills, i.marital_status_code, i.marriage_date,
				i.no_of_dependents, i.occupation, i.office_employer_id, i.appointment_status_code, i.employment_date, i.years_of_service,
				i.salary_income, i.other_income_source, i.total_monthly_expenses, i.net_disposable_income, i.other_person_information,
				i.for_member, i.for_collector, i.for_login, i.edited_by
			FROM INSERTED AS i

	OPEN person_information_update_cursor

	FETCH NEXT FROM person_information_update_cursor
		INTO @sysid_person, @last_name, @first_name, @middle_name, @life_status_code, @gender_code, @birthdate, @place_birth,
				@email_address, @present_address, @present_phone_nos, @home_address, @home_phone_nos, @house_ownership_information,
				@citizenship, @nationality, @religion, @educational_attainment, @special_skills, @marital_status_code, @marriage_date,
				@no_of_dependents, @occupation, @office_employer_id, @appointment_status_code, @employment_date, @years_of_service,
				@salary_income, @other_income_source, @total_monthly_expenses, @net_disposable_income, @other_person_information,
				@for_member, @for_collector, @for_login, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT
			@last_name_b = pri.last_name,
			@first_name_b = pri.first_name,
			@middle_name_b = pri.middle_name,
			@life_status_code_b = pri.life_status_code,
			@gender_code_b = pri.gender_code,
			@birthdate_b = pri.birthdate,
			@place_birth_b = pri.place_birth,
			@email_address_b = pri.email_address,
			@present_address_b = pri.present_address,
			@present_phone_nos_b = pri.present_phone_nos,
			@home_address_b = pri.home_address,
			@home_phone_nos_b = pri.home_phone_nos,
			@house_ownership_information_b = pri.house_ownership_information,
			@citizenship_b = pri.citizenship,
			@nationality_b = pri.nationality,
			@religion_b = pri.religion,
			@educational_attainment_b = pri.educational_attainment,
			@special_skills_b = pri.special_skills,

			@marital_status_code_b = pri.marital_status_code,
			@marriage_date_b = pri.marriage_date,
			@no_of_dependents_b = pri.no_of_dependents,

			@occupation_b = pri.occupation,
			@office_employer_id_b = pri.office_employer_id,
			@appointment_status_code_b = pri.appointment_status_code,
			@employment_date_b = pri.employment_date,
			@years_of_service_b = pri.years_of_service,
			@salary_income_b = pri.salary_income,
			@other_income_source_b = pri.other_income_source,
			@total_monthly_expenses_b = pri.total_monthly_expenses,
			@net_disposable_income_b = pri.net_disposable_income,

			@other_person_information_b = pri.other_person_information
		FROM 
			lms.person_information AS pri
		WHERE
			pri.sysid_person = @sysid_person

		SET @transaction_done = ''
		SET @has_update = 0

		IF (NOT ISNULL(@first_name COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@first_name_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')) OR
			(NOT ISNULL(@middle_name COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@middle_name_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')) OR
			(NOT ISNULL(@last_name COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@last_name_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Name Before: ' + @last_name_b + ', ' + @first_name_b + ' ' + ISNULL(@middle_name_b, '') + ']' +
														'[Name After: ' + @last_name + ', ' + @first_name + ' ' + ISNULL(@middle_name, '') + ']'
			SET @has_update = 1
		END
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Name: ' + @last_name + ', ' + @first_name + ' ' + ISNULL(@middle_name, '') + ']'
		END

		IF (NOT ISNULL(@life_status_code, '') = ISNULL(@life_status_code_b, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Life Status Before: ' + ISNULL((SELECT
																						crf.code_description
																					FROM
																						lms.code_reference AS crf
																					WHERE
																						crf.code_reference_id = @life_status_code_b), '') + ']' +
														'[Life Status After: ' + ISNULL((SELECT
																						crf.code_description
																					FROM
																						lms.code_reference AS crf
																					WHERE
																						crf.code_reference_id = @life_status_code), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@gender_code, '') = ISNULL(@gender_code_b, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Gender Before: ' + ISNULL((SELECT
																							crf.code_description
																						FROM
																							lms.code_reference AS crf
																						WHERE
																							crf.code_reference_id = @gender_code_b), '') + ']' +
														'[Gender After: ' + ISNULL((SELECT
																							crf.code_description
																						FROM
																							lms.code_reference AS crf
																						WHERE
																							crf.code_reference_id = @gender_code), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(CONVERT(varchar, @birthdate, 101), '') = ISNULL(CONVERT(varchar, @birthdate_b, 101), ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Birthdate Before: ' + ISNULL(CONVERT(varchar, @birthdate_b, 101), '') + ']' +
														'[Birthdate After: ' + ISNULL(CONVERT(varchar, @birthdate, 101), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@place_birth COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@place_birth_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Place of Birth Before: ' + ISNULL(@place_birth_b, '') + ']' +
														'[Place of Birth After: ' + ISNULL(@place_birth, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@email_address COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@email_address_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Email Address Before: ' + ISNULL(@email_address_b, '') + ']' +
														'[Email Address After: ' + ISNULL(@email_address, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@present_address COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@present_address_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Present Address Before: ' + ISNULL(@present_address_b, '') + ']' +
														'[Present Address After: ' + ISNULL(@present_address, '') + ']'
			SET @has_update = 1
		END
		
		IF (NOT ISNULL(@present_phone_nos COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@present_phone_nos_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Present Phone Nos. Before: ' + ISNULL(@present_phone_nos_b, '') + ']' +
														'[Present Phone Nos. After: ' + ISNULL(@present_phone_nos, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@home_address COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@home_address_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Home Address Before: ' + ISNULL(@home_address_b, '') + ']' +
														'[Home Address After: ' + ISNULL(@home_address, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@home_phone_nos COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@home_phone_nos_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Home Phone Nos. Before: ' + ISNULL(@home_phone_nos_b, '') + ']' +
														'[Home Phone Nos. After: ' + ISNULL(@home_phone_nos, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@house_ownership_information COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@house_ownership_information_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[House Ownership Information Before: ' + ISNULL(@house_ownership_information_b, '') + ']' +
														'[House Ownership Information After: ' + ISNULL(@house_ownership_information, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@citizenship COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@citizenship_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Citizenship Before: ' + ISNULL(@citizenship_b, '') + ']' +
														'[Citizenship After: ' + ISNULL(@citizenship, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@nationality COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@nationality_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Nationality Before: ' + ISNULL(@nationality_b, '') + ']' +
														'[Nationality After: ' + ISNULL(@nationality, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@religion COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@religion_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Religion Before: ' + ISNULL(@religion_b, '') + ']' +
														'[Religion After: ' + ISNULL(@religion, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@educational_attainment COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@educational_attainment_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Educational Attainment Before: ' + ISNULL(@educational_attainment_b, '') + ']' +
														'[Educational Attainment After: ' + ISNULL(@educational_attainment, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@special_skills COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@special_skills_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Special Skills Before: ' + ISNULL(@special_skills_b, '') + ']' +
														'[Special Skills After: ' + ISNULL(@special_skills, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@marital_status_code, '') = ISNULL(@marital_status_code_b, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Marital Status Before: ' + ISNULL((SELECT
																									crf.code_description
																								FROM
																									lms.code_reference AS crf
																								WHERE
																									crf.code_reference_id = @marital_status_code_b), '') + ']' +
														'[Marital Status After: ' + ISNULL((SELECT
																									crf.code_description
																								FROM
																									lms.code_reference AS crf
																								WHERE
																									crf.code_reference_id = @marital_status_code), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(CONVERT(varchar, @marriage_date, 101), '') = ISNULL(CONVERT(varchar, @marriage_date_b, 101), ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Marriage Date Before: ' + ISNULL(CONVERT(varchar, @marriage_date_b, 101), '') + ']' +
														'[Marriage Date After: ' + ISNULL(CONVERT(varchar, @marriage_date, 101), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(CONVERT(varchar, @no_of_dependents), '') = ISNULL(CONVERT(varchar, @no_of_dependents_b), ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[No. of Dependents Before: ' + ISNULL(CONVERT(varchar, @no_of_dependents_b), '') + ']' +
														'[No. of Dependents After: ' + ISNULL(CONVERT(varchar, @no_of_dependents), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@occupation COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@occupation_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Occupation Before: ' + ISNULL(@occupation_b, '') + ']' +
														'[Occupation After: ' + ISNULL(@occupation, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@office_employer_id, '') = ISNULL(@office_employer_id_b, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Office/Employer Before: ' + ISNULL((SELECT
																							oei.office_employer_name
																						FROM
																							lms.office_employer_information AS oei
																						WHERE
																							oei.office_employer_id = @office_employer_id_b), '') + ']' +
														'[Office/Employer After: ' + ISNULL((SELECT
																							oei.office_employer_name
																						FROM
																							lms.office_employer_information AS oei
																						WHERE
																							oei.office_employer_id = @office_employer_id), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@appointment_status_code, '') = ISNULL(@appointment_status_code_b, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Appointment Status Before: ' + ISNULL((SELECT
																										crf.code_description
																									FROM
																										lms.code_reference AS crf
																									WHERE
																										crf.code_reference_id = @appointment_status_code_b), '') + ']' +
														'[Appointment Status After: ' + ISNULL((SELECT
																										crf.code_description
																									FROM
																										lms.code_reference AS crf
																									WHERE
																										crf.code_reference_id = @appointment_status_code), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(CONVERT(varchar, @employment_date, 101), '') = ISNULL(CONVERT(varchar, @employment_date_b, 101), ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Employment Date Before: ' + ISNULL(CONVERT(varchar, @employment_date_b, 101), '') + ']' +
														'[Employment Date After: ' + ISNULL(CONVERT(varchar, @employment_date, 101), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(CONVERT(varchar, @years_of_service), '') = ISNULL(CONVERT(varchar, @years_of_service_b), ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Years of Service Before: ' + ISNULL(CONVERT(varchar, @years_of_service_b), '') + ']' +
														'[Years of Service After: ' + ISNULL(CONVERT(varchar, @years_of_service), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(CONVERT(varchar, CONVERT(money, @salary_income), 1), '0.00') = ISNULL(CONVERT(varchar, CONVERT(money, @salary_income_b), 1), '0.00'))
		BEGIN
			SET @transaction_done = @transaction_done + '[Salary / Income Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @salary_income_b), 1), '0.00') + ']' +
														'[Salary / Income After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @salary_income), 1), '0.00') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@other_income_source COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@other_income_source_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Other Income Source Before: ' + ISNULL(@other_income_source_b, '') + ']' +
														'[Other Income Source After: ' + ISNULL(@other_income_source, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(CONVERT(varchar, CONVERT(money, @total_monthly_expenses), 1), '0.00') = ISNULL(CONVERT(varchar, CONVERT(money, @total_monthly_expenses_b), 1), '0.00'))
		BEGIN
			SET @transaction_done = @transaction_done + '[Total Monthly Expenses Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @total_monthly_expenses_b), 1), '0.00') + ']' +
														'[Total Monthly Expenses After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @total_monthly_expenses), 1), '0.00') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(CONVERT(varchar, CONVERT(money, @net_disposable_income), 1), '0.00') = ISNULL(CONVERT(varchar, CONVERT(money, @net_disposable_income_b), 1), '0.00'))
		BEGIN
			SET @transaction_done = @transaction_done + '[Net Disposable Income Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @net_disposable_income_b), 1), '0.00') + ']' +
														'[Net Disposable Income After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @net_disposable_income), 1), '0.00') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@other_person_information COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@other_person_information_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Other Person Information Before: ' + ISNULL(@other_person_information_b, '') + ']' +
														'[Other Person Information After: ' + ISNULL(@other_person_information, '') + ']'
			SET @has_update = 1
		END

		IF (@has_update = 1)
		BEGIN

			UPDATE lms.person_information SET
				last_name = @last_name,
				first_name = @first_name,
				middle_name = @middle_name,
				life_status_code = @life_status_code,
				gender_code = @gender_code,
				birthdate = @birthdate,
				place_birth = @place_birth,
				email_address = @email_address,
				present_address = @present_address,
				present_phone_nos = @present_phone_nos,
				home_address = @home_address,
				home_phone_nos = @home_phone_nos,
				house_ownership_information = @house_ownership_information,
				citizenship = @citizenship,
				nationality = @nationality,
				religion = @religion,
				educational_attainment = @educational_attainment,
				special_skills = @special_skills,

				marital_status_code = @marital_status_code,
				marriage_date = @marriage_date,
				no_of_dependents = @no_of_dependents,

				occupation = @occupation,
				office_employer_id = @office_employer_id,
				appointment_status_code = @appointment_status_code,
				employment_date = @employment_date,
				years_of_service = @years_of_service,
				salary_income = @salary_income,
				other_income_source = @other_income_source,
				total_monthly_expenses = @total_monthly_expenses,
				net_disposable_income = @net_disposable_income,

				other_person_information = @other_person_information,

				for_member = @for_member,
				for_collector = @for_collector,
				for_login = @for_login,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				sysid_person = @sysid_person

			IF (@for_member = 1) AND
				(EXISTS (SELECT sysid_member FROM lms.member_information WHERE sysid_person = @sysid_person))
			BEGIN

				SET @transaction_done = 'UPDATED a member personal information ' + 
										'[Person System ID: ' + ISNULL(@sysid_person, '') + 
										'][Member ID: ' + ISNULL((SELECT member_id FROM lms.member_information WHERE sysid_person = @sysid_person), '') + 						
										']' + @transaction_done

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE lms.InsertTransactionLog @edited_by, @network_information, @transaction_done

			END
			ELSE IF (@for_collector = 1) AND
				(EXISTS (SELECT sysid_collector FROM lms.collector_information WHERE sysid_person = @sysid_person))
			BEGIN

				SET @transaction_done = 'UPDATED a collector personal information ' + 
										'[Person System ID: ' + ISNULL(@sysid_person, '') + 
										'][Collector ID: ' + ISNULL((SELECT employee_id FROM lms.collector_information WHERE sysid_person = @sysid_person), '') + 						
										']' + @transaction_done

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE lms.InsertTransactionLog @edited_by, @network_information, @transaction_done

			END
			ELSE IF (@for_login = 1) AND
				(EXISTS (SELECT system_user_id FROM lms.system_user_info WHERE sysid_person = @sysid_person))
			BEGIN

				SET @transaction_done = 'UPDATED a system user personal information ' + 
										'[Person System ID: ' + ISNULL(@sysid_person, '') + 
										']' + @transaction_done

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE lms.InsertTransactionLog @edited_by, @network_information, @transaction_done

			END
			ELSE
			BEGIN

				SET @transaction_done = 'UPDATED a person information ' + 
										'[Person System ID: ' + ISNULL(@sysid_person, '') + 
										']' + @transaction_done

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE lms.InsertTransactionLog @edited_by, @network_information, @transaction_done

			END

		END
		ELSE
		BEGIN

			UPDATE lms.person_information SET
				for_member = @for_member,
				for_collector = @for_collector,
				for_login = @for_login
			WHERE
				sysid_person = @sysid_person

		END

		FETCH NEXT FROM person_information_update_cursor
			INTO @sysid_person, @last_name, @first_name, @middle_name, @life_status_code, @gender_code, @birthdate, @place_birth,
					@email_address, @present_address, @present_phone_nos, @home_address, @home_phone_nos, @house_ownership_information,
					@citizenship, @nationality, @religion, @educational_attainment, @special_skills, @marital_status_code, @marriage_date,
					@no_of_dependents, @occupation, @office_employer_id, @appointment_status_code, @employment_date, @years_of_service,
					@salary_income, @other_income_source, @total_monthly_expenses, @net_disposable_income, @other_person_information,
					@for_member, @for_collector, @for_login, @edited_by

	END

	CLOSE person_information_update_cursor
	DEALLOCATE person_information_update_cursor

GO
----------------------------------------------------------------------

-- verifies that the trigger "Person_Information_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('lms.Person_Information_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER lms.Person_Information_Trigger_Instead_Delete
GO

CREATE TRIGGER lms.Person_Information_Trigger_Instead_Delete
	ON  lms.person_information
	INSTEAD OF DELETE
	NOT FOR REPLICATION
AS 

	EXECUTE lms.ShowErrorMsg 'Delete a person information', 'Person Information'
	
GO
-------------------------------------------------------------------------

-- verifies if the procedure "InsertUpdatePersonInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'InsertUpdatePersonInformation')
   DROP PROCEDURE lms.InsertUpdatePersonInformation
GO

CREATE PROCEDURE lms.InsertUpdatePersonInformation
	
	@sysid_person varchar (50) = '',
	@last_name varchar (50) = '',
	@first_name varchar (50) = '',
	@middle_name varchar (50) = '',
	@life_status_code varchar (50) = '',
	@gender_code varchar (50) = '',
	@birthdate datetime,
	@place_birth varchar (500) = '',
	@email_address varchar (100) = '',
	@present_address varchar (500) = '',
	@present_phone_nos varchar (100) = '',
	@home_address varchar (500) = '',
	@home_phone_nos varchar (100) = '',
	@house_ownership_information varchar (MAX) = '',
	@citizenship varchar (100) = '',
	@nationality varchar (100) = '',
	@religion varchar (100) = '',
	@educational_attainment varchar (MAX) = '',
	@special_skills varchar (MAX) = '',

	@marital_status_code varchar (50) = '',
	@marriage_date datetime,
	@no_of_dependents tinyint = 0,

	@occupation varchar (100) = '',
	@office_employer_id varchar (50) = '',
	@appointment_status_code varchar (50) = '',
	@employment_date datetime,
	@years_of_service tinyint = 0,
	@salary_income decimal (15, 2) = 0,
	@other_income_source varchar (MAX) = '',
	@total_monthly_expenses decimal (15, 2) = 0,
	@net_disposable_income decimal (15, 2) = 0,

	@other_person_information varchar (MAX) = '',

	@for_member bit = 0,
	@for_collector bit = 0,
	@for_login bit = 0,

	@network_information varchar (MAX) = '',
	@system_user_id varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsLoanOfficerSystemUserInfo(@system_user_id) = 1))
	BEGIN

		IF (@for_member = 1)
		BEGIN
			SET @for_collector = 0
			SET @for_login = 0
		END
		ELSE IF (@for_collector = 1)
		BEGIN
			SET @for_member = 0
			SET @for_login = 0
		END
		ELSE IF (@for_login = 1)
		BEGIN
			SET @for_member = 0
			SET @for_collector = 0
		END

		IF (NOT EXISTS (SELECT sysid_person FROM lms.person_information WHERE (sysid_person = @sysid_person)))
		BEGIN

			EXECUTE lms.CreateTemporaryTable @system_user_id, @network_information

			INSERT INTO lms.person_information
			(
				sysid_person,
				last_name,
				first_name,
				middle_name,
				life_status_code,
				gender_code,
				birthdate,
				place_birth,
				email_address,
				present_address,
				present_phone_nos,
				home_address,
				home_phone_nos,
				house_ownership_information,
				citizenship,
				nationality,
				religion,
				educational_attainment,
				special_skills,

				marital_status_code,
				marriage_date,
				no_of_dependents,

				occupation,
				office_employer_id,
				appointment_status_code,
				employment_date,
				years_of_service,
				salary_income,
				other_income_source,
				total_monthly_expenses,
				net_disposable_income,

				other_person_information,

				for_member,
				for_collector,
				for_login,

				created_by
			)
			VALUES
			(
				@sysid_person,
				@last_name,
				@first_name,
				@middle_name,
				@life_status_code,
				@gender_code,
				@birthdate,
				@place_birth,
				@email_address,
				@present_address,
				@present_phone_nos,
				@home_address,
				@home_phone_nos,
				@house_ownership_information,
				@citizenship,
				@nationality,
				@religion,
				@educational_attainment,
				@special_skills,

				@marital_status_code,
				@marriage_date,
				@no_of_dependents,

				@occupation,
				@office_employer_id,
				@appointment_status_code,
				@employment_date,
				@years_of_service,
				@salary_income,
				@other_income_source,
				@total_monthly_expenses,
				@net_disposable_income,

				@other_person_information,

				@for_member,
				@for_collector,
				@for_login,

				@system_user_id
			)

		END
		ELSE
		BEGIN

			EXECUTE lms.CreateTemporaryTable @system_user_id, @network_information

			UPDATE lms.person_information SET
				last_name = @last_name,
				first_name = @first_name,
				middle_name = @middle_name,
				life_status_code = @life_status_code,
				gender_code = @gender_code,
				birthdate = @birthdate,
				place_birth = @place_birth,
				email_address = @email_address,
				present_address = @present_address,
				present_phone_nos = @present_phone_nos,
				home_address = @home_address,
				home_phone_nos = @home_phone_nos,
				house_ownership_information = @house_ownership_information,
				citizenship = @citizenship,
				nationality = @nationality,
				religion = @religion,
				educational_attainment = @educational_attainment,
				special_skills = @special_skills,

				marital_status_code = @marital_status_code,
				marriage_date = @marriage_date,
				no_of_dependents = @no_of_dependents,

				occupation = @occupation,
				office_employer_id = @office_employer_id,
				appointment_status_code = @appointment_status_code,
				employment_date = @employment_date,
				years_of_service = @years_of_service,
				salary_income = @salary_income,
				other_income_source = @other_income_source,
				total_monthly_expenses = @total_monthly_expenses,
				net_disposable_income = @net_disposable_income,

				other_person_information = @other_person_information,

				for_member = @for_member,
				for_collector = @for_collector,
				for_login = @for_login,

				edited_by = @system_user_id
			WHERE
				(sysid_person = @sysid_person)

		END

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Insert/Update a person information', 'Person Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.InsertUpdatePersonInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectPersonInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectPersonInformation')
   DROP PROCEDURE lms.SelectPersonInformation
GO

CREATE PROCEDURE lms.SelectPersonInformation
	
	@query_string varchar (50) = '',
	@last_name varchar (50) = '',
	@first_name varchar (50) = '',
	@sysid_person_exclude_list nvarchar (MAX) = '',

	@system_user_id varchar (50) = ''

AS

	--	A - query_string NOT IS NULL
	--	B - query_string '*'
	--	C - last name and first name
	--	D - exclude this sysid_person_exclude_list

	--	A	B	C	D
	--	==============
	--	0	0	0	0	NOT INCLUDED
	--	0	0	0	1	NOT INCLUDED
	--	0	0	1	0
	--	0	0	1	1
	--	0	1	0	0	NOT INCLUDED
	--	0	1	0	1	NOT INCLUDED
	--	0	1	1	0	NOT INCLUDED
	--	0	1	1	1	NOT INCLUDED
	--	1	0	0	0
	--	1	0	0	1
	--	1	0	1	0	NOT INCLUDED
	--	1	0	1	1	NOT INCLUDED
	--	1	1	0	0
	--	1	1	0	1
	--	1	1	1	0	NOT INCLUDED
	--	1	1	1	1	NOT INCLUDED
	
	

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsLoanOfficerSystemUserInfo(@system_user_id) = 1))
	BEGIN
		
		SELECT @query_string = '%' + RTRIM(LTRIM(ISNULL(@query_string, ''))) + '%'
		SELECT @last_name = '%' + RTRIM(LTRIM(REPLACE(REPLACE(@last_name, '.', ''), ' ', ''))) + '%'
		SELECT @first_name = '%' + RTRIM(LTRIM(REPLACE(REPLACE(@first_name, '.', ''), ' ', ''))) + '%'

		IF (@query_string = '%%') AND																--0010
			((NOT ISNULL(@last_name, '') = '') AND (NOT ISNULL(@first_name, '') = '')) AND
			(ISNULL(@sysid_person_exclude_list, '') = '')
		BEGIN

			SELECT
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.birthdate AS birthdate,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,				

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description
				
			FROM
				lms.person_information AS pri
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			WHERE
				(RTRIM(LTRIM(REPLACE(REPLACE(pri.last_name, '.', ''), ' ', ''))) LIKE @last_name) AND 
				(RTRIM(LTRIM(REPLACE(REPLACE(pri.first_name, '.', ''), ' ', ''))) LIKE @first_name)
			ORDER BY
				last_name, first_name, middle_name ASC

		END
		ELSE IF (@query_string = '%%') AND																--0011
			((NOT ISNULL(@last_name, '') = '') AND (NOT ISNULL(@first_name, '') = '')) AND
			(NOT ISNULL(@sysid_person_exclude_list, '') = '')
		BEGIN

			SELECT
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.birthdate AS birthdate,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,				

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description
				
			FROM
				lms.person_information AS pri
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			LEFT JOIN lms.IterateListToTable (@sysid_person_exclude_list, ',') AS spel_list ON spel_list.var_str = pri.sysid_person
			WHERE
				(RTRIM(LTRIM(REPLACE(REPLACE(pri.last_name, '.', ''), ' ', ''))) LIKE @last_name) AND 
				(RTRIM(LTRIM(REPLACE(REPLACE(pri.first_name, '.', ''), ' ', ''))) LIKE @first_name) AND
				(spel_list.var_str IS NULL)
			ORDER BY
				last_name, first_name, middle_name ASC

		END
		ELSE IF (NOT @query_string = '%%') AND (NOT ISNULL(@query_string, '') = '%*%') AND				--1000
			((ISNULL(@last_name, '') = '') AND (ISNULL(@first_name, '') = '')) AND
			(ISNULL(@sysid_person_exclude_list, '') = '')
		BEGIN

			SELECT
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.birthdate AS birthdate,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,				

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description
				
			FROM
				lms.person_information AS pri
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			WHERE
				(pri.last_name LIKE @query_string) OR (pri.first_name LIKE @query_string) OR
				(pri.middle_name LIKE @query_string) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))
			ORDER BY
				last_name, first_name, middle_name ASC

		END
		ELSE IF (NOT @query_string = '%%') AND (NOT ISNULL(@query_string, '') = '%*%') AND				--1001
			((ISNULL(@last_name, '') = '') AND (ISNULL(@first_name, '') = '')) AND
			(NOT ISNULL(@sysid_person_exclude_list, '') = '')
		BEGIN

			SELECT
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.birthdate AS birthdate,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,				

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description
				
			FROM
				lms.person_information AS pri
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			LEFT JOIN lms.IterateListToTable (@sysid_person_exclude_list, ',') AS spel_list ON spel_list.var_str = pri.sysid_person
			WHERE
				((pri.last_name LIKE @query_string) OR (pri.first_name LIKE @query_string) OR
				(pri.middle_name LIKE @query_string)  OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(spel_list.var_str IS NULL)
			ORDER BY
				last_name, first_name, middle_name ASC

		END
		ELSE IF (NOT @query_string = '%%') AND (ISNULL(@query_string, '') = '%*%') AND					--1100
			((ISNULL(@last_name, '') = '') AND (ISNULL(@first_name, '') = '')) AND
			(ISNULL(@sysid_person_exclude_list, '') = '')
		BEGIN

			SELECT
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.birthdate AS birthdate,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,				

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description
				
			FROM
				lms.person_information AS pri
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			ORDER BY
				last_name, first_name, middle_name ASC

		END
		ELSE IF (NOT @query_string = '%%') AND (ISNULL(@query_string, '') = '%*%') AND					--1101
			((ISNULL(@last_name, '') = '') AND (ISNULL(@first_name, '') = '')) AND
			(NOT ISNULL(@sysid_person_exclude_list, '') = '')
		BEGIN

			SELECT
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.birthdate AS birthdate,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,				

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description
				
			FROM
				lms.person_information AS pri
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			LEFT JOIN lms.IterateListToTable (@sysid_person_exclude_list, ',') AS spel_list ON spel_list.var_str = pri.sysid_person
			WHERE
				(spel_list.var_str IS NULL)
			ORDER BY
				last_name, first_name, middle_name ASC

		END

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a person information', 'Person Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectPersonInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDPersonInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectBySysIDPersonInformation')
   DROP PROCEDURE lms.SelectBySysIDPersonInformation
GO

CREATE PROCEDURE lms.SelectBySysIDPersonInformation
	
	@sysid_person varchar (50) = '',

	@system_user_id varchar (50) = ''
	
AS

	IF (lms.IsActiveSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT			
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.birthdate AS birthdate,
			pri.place_birth AS place_birth,
			pri.email_address AS email_address,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,
			pri.house_ownership_information AS house_ownership_information,
			pri.citizenship AS citizenship,
			pri.nationality AS nationality,
			pri.religion AS religion,	
			pri.educational_attainment AS educational_attainment,
			pri.special_skills AS special_skills,
		
			pri.marriage_date AS marriage_date,
			pri.no_of_dependents AS no_of_dependents,

			pri.occupation AS occupation,
			pri.employment_date AS employment_date,
			pri.years_of_service AS years_of_service,
			pri.salary_income AS salary_income,
			pri.other_income_source AS other_income_source,
			pri.total_monthly_expenses AS total_monthly_expenses,
			pri.net_disposable_income AS net_disposable_income,		

			pri.other_person_information AS other_person_information,
			
--			pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

--			pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,

--			pri.marital_status_code
			crf_marital_status_code.code_reference_id AS marital_status_code_code_reference_id,
			crf_marital_status_code.code_entity_id AS marital_status_code_code_entity_id,
			crf_marital_status_code.reference_code AS marital_status_code_reference_code,
			crf_marital_status_code.code_description AS marital_status_code_code_description,

--			pri.office_employer_id
			oei.office_employer_id AS office_employer_id,
			oei.office_employer_name AS office_employer_name,
			oei.office_employer_acronym AS office_employer_acronym,
			oei.office_employer_address AS office_employer_address,
			oei.office_employer_phone_nos AS office_employer_phone_nos,

--			pri.appointment_status_code
			crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
			crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
			crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
			crf_appointment_status_code.code_description AS appointment_status_code_code_description		

		FROM
			lms.person_information AS pri	
		LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		LEFT JOIN lms.code_reference AS crf_marital_status_code ON crf_marital_status_code.code_reference_id = pri.marital_status_code
		LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
		LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
		WHERE
			(pri.sysid_person = @sysid_person)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query person information', 'Person Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectBySysIDPersonInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectCountPersonInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectCountPersonInformation')
   DROP PROCEDURE lms.SelectCountPersonInformation
GO

CREATE PROCEDURE lms.SelectCountPersonInformation

	@system_user_id varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1))
	BEGIN
		
		SELECT COUNT(pri.sysid_person) FROM lms.person_information AS pri

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a person information', 'Person Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectCountPersonInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsSysIDPersonInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'IsExistsSysIDPersonInformation')
   DROP PROCEDURE lms.IsExistsSysIDPersonInformation
GO

CREATE PROCEDURE lms.IsExistsSysIDPersonInformation

	@sysid_person varchar (50) = '',
	@system_user_id varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1))
	BEGIN
		
		SELECT lms.IsExistsSysIDPersonInfo(@sysid_person)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a person information', 'Person Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.IsExistsSysIDPersonInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsSysIDPersonMemberCollectorInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'IsExistsSysIDPersonMemberCollectorInformation')
   DROP PROCEDURE lms.IsExistsSysIDPersonMemberCollectorInformation
GO

CREATE PROCEDURE lms.IsExistsSysIDPersonMemberCollectorInformation

	@sysid_person varchar (50) = '',
	@system_user_id varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1))
	BEGIN
		
		SELECT lms.IsExistsSysIDPersonMemberCollectorInfo(@sysid_person)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a person information', 'Person Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.IsExistsSysIDPersonMemberCollectorInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsSysIDPersonCollectorInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'IsExistsSysIDPersonCollectorInformation')
   DROP PROCEDURE lms.IsExistsSysIDPersonCollectorInformation
GO

CREATE PROCEDURE lms.IsExistsSysIDPersonCollectorInformation

	@sysid_person varchar (50) = '',
	@system_user_id varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1))
	BEGIN
		
		SELECT lms.IsExistsSysIDPersonCollectorInfo(@sysid_person)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a person information', 'Person Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.IsExistsSysIDPersonCollectorInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the "IsExistsSysIDPersonInfo" function already exist
IF OBJECT_ID (N'lms.IsExistsSysIDPersonInfo') IS NOT NULL
   DROP FUNCTION lms.IsExistsSysIDPersonInfo
GO

CREATE FUNCTION lms.IsExistsSysIDPersonInfo
(	
	@sysid_person varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT sysid_person FROM lms.person_information WHERE sysid_person = @sysid_person)
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "IsExistsSysIDPersonMemberCollectorInfo" function already exist
IF OBJECT_ID (N'lms.IsExistsSysIDPersonMemberCollectorInfo') IS NOT NULL
   DROP FUNCTION lms.IsExistsSysIDPersonMemberCollectorInfo
GO

CREATE FUNCTION lms.IsExistsSysIDPersonMemberCollectorInfo
(	
	@sysid_person varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT 
					sysid_person 
				FROM 
					lms.member_information 
				WHERE 
					sysid_person = @sysid_person
				UNION ALL
				SELECT 
					sysid_person 
				FROM 
					lms.collector_information 
				WHERE 
					sysid_person = @sysid_person)
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "IsExistsSysIDPersonCollectorInfo" function already exist
IF OBJECT_ID (N'lms.IsExistsSysIDPersonCollectorInfo') IS NOT NULL
   DROP FUNCTION lms.IsExistsSysIDPersonCollectorInfo
GO

CREATE FUNCTION lms.IsExistsSysIDPersonCollectorInfo
(	
	@sysid_person varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT sysid_person FROM lms.collector_information WHERE sysid_person = @sysid_person)
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------




-- ##############################################END TABLE "person_information" OBJECTS######################################################




-- ##########################################TABLE "person_document" OBJECTS########################################################

-- verifies if the person_document table exists
IF OBJECT_ID('lms.person_document', 'U') IS NOT NULL
	DROP TABLE lms.person_document
GO

CREATE TABLE lms.person_document 			
(
	document_id bigint NOT NULL IDENTITY (1, 1) NOT FOR REPLICATION
		CONSTRAINT Person_Document_Document_ID_PK PRIMARY KEY (document_id),
	sysid_person varchar (50) NOT NULL 
		CONSTRAINT Person_Document_SysID_Person_FK FOREIGN KEY REFERENCES lms.person_information(sysid_person) ON UPDATE NO ACTION
		CONSTRAINT Person_Document_SysID_Person_UQ UNIQUE (sysid_person, original_name),
	
	file_data varbinary (MAX) NOT NULL,
	original_name varchar (255) NOT NULL
		CONSTRAINT Person_Document_Original_Name_UQ UNIQUE (original_name, sysid_person),
	document_information varchar (MAX) NULL,

	is_primary_image bit NOT NULL DEFAULT (0),

	created_on datetime NOT NULL DEFAULT (GETDATE()),
	created_by varchar (50) NOT NULL
		CONSTRAINT Person_Document_Created_By_FK FOREIGN KEY REFERENCES lms.system_user_info(system_user_id) ON UPDATE NO ACTION,
	edited_on datetime NULL,
	edited_by varchar (50) NULL	
		CONSTRAINT Person_Document_Edited_By_FK FOREIGN KEY REFERENCES lms.system_user_info(system_user_id) ON UPDATE NO ACTION,

	unique_id uniqueidentifier ROWGUIDCOL NOT NULL DEFAULT NEWSEQUENTIALID()
		CONSTRAINT Person_Document_Unique_ID_UQ UNIQUE (unique_id)
	
) ON [PRIMARY]
GO
------------------------------------------------------------------

-- create an index of the person_document table 
CREATE INDEX Person_Document_Document_ID_Index
	ON lms.person_document (document_id ASC)
GO
------------------------------------------------------------------

--verifies that the trigger "Person_Document_Trigger_Insert" already exist
IF OBJECT_ID ('lms.Person_Document_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER lms.Person_Document_Trigger_Insert
GO

CREATE TRIGGER lms.Person_Document_Trigger_Insert
	ON  lms.person_document
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @document_id bigint
	DECLARE @sysid_person varchar (50)
	DECLARE @original_name varchar (255)
	DECLARE @document_information varchar (MAX)
	DECLARE @is_primary_image bit 

	DECLARE @created_by varchar (50)

	DECLARE @for_member bit
	DECLARE @for_collector bit
	DECLARE @for_login bit

	DECLARE @primary_image varchar (20)
	
	SELECT 
		@document_id = i.document_id,
		@sysid_person = i.sysid_person,
		@original_name = i.original_name,
		@document_information = i.document_information,
		@is_primary_image = i.is_primary_image,

		@for_member = pri.for_member,
		@for_collector = pri.for_collector,
		@for_login = pri.for_login,

		@created_by = i.created_by
	FROM INSERTED AS i
	INNER JOIN lms.person_information AS pri ON pri.sysid_person = i.sysid_person

	IF (@is_primary_image = 1)
	BEGIN
		SET @primary_image = 'YES'
	END
	ELSE
	BEGIN
		SET @primary_image = 'NO'
	END

	IF (@for_member = 1) AND
		(EXISTS (SELECT sysid_member FROM lms.member_information WHERE sysid_person = @sysid_person))
	BEGIN

		SET @transaction_done = 'CREATED a member document ' + 
								'[Person System ID: ' + ISNULL(@sysid_person, '') + 
								'][Document ID: ' + ISNULL(CONVERT(varchar, @document_id), '') +
								'][Member ID: ' + ISNULL((SELECT member_id FROM lms.member_information WHERE sysid_person = @sysid_person), '') +
								'][Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															lms.person_information AS pri
														WHERE 
															pri.sysid_person = @sysid_person), '') +
								'][Original FileName: ' + ISNULL(@original_name, '') + 
								'][Document Information: ' + ISNULL(@document_information, '') +
								'][Is Primary Image: ' + ISNULL(@primary_image, '') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @created_by
		END
				
		EXECUTE lms.InsertTransactionLog @created_by, @network_information, @transaction_done

	END
	ELSE IF (@for_collector = 1) AND
		(EXISTS (SELECT sysid_collector FROM lms.collector_information WHERE sysid_person = @sysid_person))
	BEGIN

		SET @transaction_done = 'CREATED a collector document ' + 
								'[Person System ID: ' + ISNULL(@sysid_person, '') + 
								'][Document ID: ' + ISNULL(CONVERT(varchar, @document_id), '') +
								'][Employee ID: ' + ISNULL((SELECT employee_id FROM lms.collector_information WHERE sysid_person = @sysid_person), '') +
								'][Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															lms.person_information AS pri
														WHERE 
															pri.sysid_person = @sysid_person), '') +
								'][Original FileName: ' + ISNULL(@original_name, '') + 
								'][Document Information: ' + ISNULL(@document_information, '') +
								'][Is Primary Image: ' + ISNULL(@primary_image, '') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @created_by
		END
				
		EXECUTE lms.InsertTransactionLog @created_by, @network_information, @transaction_done

	END
	ELSE IF (@for_login = 1) AND
		(EXISTS (SELECT system_user_id FROM lms.system_user_info WHERE sysid_person = @sysid_person))
	BEGIN

		SET @transaction_done = 'CREATED a system user document ' + 
								'[Person System ID: ' + ISNULL(@sysid_person, '') + 
								'][Document ID: ' + ISNULL(CONVERT(varchar, @document_id), '') +
								'][Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															lms.person_information AS pri
														WHERE 
															pri.sysid_person = @sysid_person), '') +
								'][Original FileName: ' + ISNULL(@original_name, '') + 
								'][Document Information: ' + ISNULL(@document_information, '') +
								'][Is Primary Image: ' + ISNULL(@primary_image, '') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @created_by
		END
				
		EXECUTE lms.InsertTransactionLog @created_by, @network_information, @transaction_done

	END
	ELSE
	BEGIN

		SET @transaction_done = 'CREATED a person document ' + 
								'[Person System ID: ' + ISNULL(@sysid_person, '') + 
								'][Document ID: ' + ISNULL(CONVERT(varchar, @document_id), '') +
								'][Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															lms.person_information AS pri
														WHERE 
															pri.sysid_person = @sysid_person), '') +
								'][Original FileName: ' + ISNULL(@original_name, '') + 
								'][Document Information: ' + ISNULL(@document_information, '') +
								'][Is Primary Image: ' + ISNULL(@primary_image, '') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @created_by
		END
				
		EXECUTE lms.InsertTransactionLog @created_by, @network_information, @transaction_done

	END

GO
----------------------------------------------------------------------

--verifies that the trigger "Person_Document_Trigger_Delete" already exist
IF OBJECT_ID ('lms.Person_Document_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER lms.Person_Document_Trigger_Delete
GO

CREATE TRIGGER lms.Person_Document_Trigger_Delete
	ON  lms.person_document
	FOR DELETE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @document_id bigint
	DECLARE @sysid_person varchar (50)
	DECLARE @original_name varchar (255)
	DECLARE @document_information varchar (MAX)
	DECLARE @is_primary_image bit 

	DECLARE @deleted_by varchar (50)

	DECLARE @for_member bit
	DECLARE @for_collector bit
	DECLARE @for_login bit

	DECLARE @primary_image varchar (20)

	DECLARE person_document_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.document_id, d.sysid_person, d.original_name, d.document_information, d.is_primary_image, pri.for_member,
				pri.for_collector, pri.for_login, d.edited_by
			FROM 
				DELETED AS d
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = d.sysid_person

	OPEN person_document_delete_cursor

	FETCH NEXT FROM person_document_delete_cursor
		INTO @document_id, @sysid_person, @original_name, @document_information, @is_primary_image, @for_member,
				@for_collector, @for_login, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		IF (@is_primary_image = 1)
		BEGIN
			SET @primary_image = 'YES'
		END
		ELSE
		BEGIN
			SET @primary_image = 'NO'
		END

		IF (@for_member = 1) AND
			(EXISTS (SELECT sysid_member FROM lms.member_information WHERE sysid_person = @sysid_person))
		BEGIN

			SET @transaction_done = 'DELETED a member document ' + 
									'[Person System ID: ' + ISNULL(@sysid_person, '') + 
									'][Document ID: ' + ISNULL(CONVERT(varchar, @document_id), '') +
									'][Member ID: ' + ISNULL((SELECT member_id FROM lms.member_information WHERE sysid_person = @sysid_person), '') +
									'][Name: ' + ISNULL((SELECT
																pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
															FROM
																lms.person_information AS pri
															WHERE 
																pri.sysid_person = @sysid_person), '') +
									'][Original FileName: ' + ISNULL(@original_name, '') + 
									'][Document Information: ' + ISNULL(@document_information, '') +
									'][Is Primary Image: ' + ISNULL(@primary_image, '') +
									']'

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @deleted_by
			END
					
			EXECUTE lms.InsertTransactionLog @deleted_by, @network_information, @transaction_done

		END
		ELSE IF (@for_collector = 1) AND
			(EXISTS (SELECT sysid_collector FROM lms.collector_information WHERE sysid_person = @sysid_person))
		BEGIN

			SET @transaction_done = 'DELETED a collector document ' + 
									'[Person System ID: ' + ISNULL(@sysid_person, '') + 
									'][Document ID: ' + ISNULL(CONVERT(varchar, @document_id), '') +
									'][Employee ID: ' + ISNULL((SELECT employee_id FROM lms.collector_information WHERE sysid_person = @sysid_person), '') +
									'][Name: ' + ISNULL((SELECT
																pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
															FROM
																lms.person_information AS pri
															WHERE 
																pri.sysid_person = @sysid_person), '') +
									'][Original FileName: ' + ISNULL(@original_name, '') + 
									'][Document Information: ' + ISNULL(@document_information, '') +
									'][Is Primary Image: ' + ISNULL(@primary_image, '') +
									']'

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @deleted_by
			END
					
			EXECUTE lms.InsertTransactionLog @deleted_by, @network_information, @transaction_done

		END
		ELSE IF (@for_login = 1) AND
			(EXISTS (SELECT system_user_id FROM lms.system_user_info WHERE sysid_person = @sysid_person))
		BEGIN

			SET @transaction_done = 'DELETED a system user document ' + 
									'[Person System ID: ' + ISNULL(@sysid_person, '') + 
									'][Document ID: ' + ISNULL(CONVERT(varchar, @document_id), '') +
									'][Name: ' + ISNULL((SELECT
																pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
															FROM
																lms.person_information AS pri
															WHERE 
																pri.sysid_person = @sysid_person), '') +
									'][Original FileName: ' + ISNULL(@original_name, '') + 
									'][Document Information: ' + ISNULL(@document_information, '') +
									'][Is Primary Image: ' + ISNULL(@primary_image, '') +
									']'

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @deleted_by
			END
					
			EXECUTE lms.InsertTransactionLog @deleted_by, @network_information, @transaction_done

		END
		ELSE
		BEGIN

			SET @transaction_done = 'DELETED a person document ' + 
									'[Person System ID: ' + ISNULL(@sysid_person, '') + 
									'][Document ID: ' + ISNULL(CONVERT(varchar, @document_id), '') +
									'][Name: ' + ISNULL((SELECT
																pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
															FROM
																lms.person_information AS pri
															WHERE 
																pri.sysid_person = @sysid_person), '') +
									'][Original FileName: ' + ISNULL(@original_name, '') + 
									'][Document Information: ' + ISNULL(@document_information, '') +
									'][Is Primary Image: ' + ISNULL(@primary_image, '') +
									']'

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @deleted_by
			END
					
			EXECUTE lms.InsertTransactionLog @deleted_by, @network_information, @transaction_done

		END		
		
		FETCH NEXT FROM person_document_delete_cursor
			INTO @document_id, @sysid_person, @original_name, @document_information, @is_primary_image, @for_member,
					@for_collector, @for_login, @deleted_by

	END

	CLOSE person_document_delete_cursor
	DEALLOCATE person_document_delete_cursor

GO
----------------------------------------------------------------------

-- verifies if the procedure "InsertPersonDocument" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'InsertPersonDocument')
   DROP PROCEDURE lms.InsertPersonDocument
GO

CREATE PROCEDURE lms.InsertPersonDocument
	
	@sysid_person varchar (50) = '',
	
	@file_data varbinary (MAX),
	@original_name varchar (255) = '',
	@document_information varchar (MAX) = '',
	@is_primary_image bit = 0,

	@network_information varchar(MAX) = '',
	@created_by varchar(50)
	
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@created_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@created_by) = 1))
	BEGIN

		EXECUTE lms.CreateTemporaryTable @created_by, @network_information

		IF (@is_primary_image = 1)
		BEGIN

			UPDATE lms.person_document SET
				is_primary_image = 0,
				
				edited_on = GETDATE(),
				edited_by = @created_by
			WHERE
				(is_primary_image = 1) AND
				(sysid_person = @sysid_person)
			
		END

		INSERT INTO lms.person_document
		(
			sysid_person,
	
			file_data,
			original_name,
			document_information,
			is_primary_image,

			created_by
		)
		VALUES
		(
			@sysid_person,
	
			@file_data,
			@original_name,
			@document_information,
			@is_primary_image,

			@created_by
		)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Insert a person document', 'Person Document'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.InsertPersonDocument TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "UpdatePersonDocument" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'UpdatePersonDocument')
   DROP PROCEDURE lms.UpdatePersonDocument
GO

CREATE PROCEDURE lms.UpdatePersonDocument
	
	@document_id bigint = 0,
	
	@file_data varbinary (MAX),
	@original_name varchar (255) = '',
	@document_information varchar (MAX) = '',
	@is_primary_image bit = 0,

	@network_information varchar(MAX) = '',
	@edited_by varchar(50)
	
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@edited_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@edited_by) = 1))
	BEGIN

		EXECUTE lms.CreateTemporaryTable @edited_by, @network_information

		DECLARE @transaction_done varchar(MAX)		

		DECLARE @sysid_person varchar (50)
		
		DECLARE @for_member bit
		DECLARE @for_collector bit
		DECLARE @for_login bit

		DECLARE @original_name_b varchar (255)
		DECLARE @document_information_b varchar (MAX)
		DECLARE @is_primary_image_b bit

		DECLARE @has_update bit

		DECLARE @primary_image varchar (20)
		DECLARE @primary_image_b varchar (20)
		
		SELECT 
			@sysid_person = pri.sysid_person,
	
			@original_name_b = pnd.original_name,
			@document_information_b = pnd.document_information,
			@is_primary_image_b = pnd.is_primary_image,

			@for_member = pri.for_member,
			@for_collector = pri.for_collector,
			@for_login = pri.for_login
		FROM
			lms.person_information AS pri
		INNER JOIN lms.person_document AS pnd ON pnd.sysid_person = pri.sysid_person
		WHERE 
			pnd.document_id = @document_id

		SET @transaction_done = ''
		SET @has_update = 0

		IF (NOT @file_data = (SELECT file_data FROM lms.person_document WHERE document_id = @document_id))
		BEGIN
			SET @has_update = 1
		END

		IF (NOT ISNULL(@original_name COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@original_name_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Original FileName Before: ' + ISNULL(@original_name_b, '') + ']' +
														'[Original FileName After: ' + ISNULL(@original_name, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@document_information COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@document_information_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Document Information Before: ' + ISNULL(@document_information_b, '') + ']' +
														'[Document Information After: ' + ISNULL(@document_information, '') + ']'
			SET @has_update = 1
		END

		IF (NOT @is_primary_image = @is_primary_image_b)
		BEGIN

			IF (@is_primary_image_b = 1)
			BEGIN
				SET @primary_image_b = 'YES'
			END
			ELSE
			BEGIN
				SET @primary_image_b = 'NO'
			END

			IF (@is_primary_image = 1)
			BEGIN

				UPDATE lms.person_document SET
					is_primary_image = 0,
					
					edited_on = GETDATE(),
					edited_by = @edited_by
				WHERE
					(NOT document_id = @document_id) AND
					(is_primary_image = 1) AND
					(sysid_person = @sysid_person)

				SET @primary_image = 'YES'

			END
			ELSE
			BEGIN
				SET @primary_image = 'NO'
			END

			SET @transaction_done = @transaction_done + '[Is Primary Image Before: ' + ISNULL(@primary_image_b, '') + ']' +
														'[Is Primary Image After: ' + ISNULL(@primary_image, '') + ']'
			SET @has_update = 1

		END

		IF (@has_update = 1)
		BEGIN

			UPDATE lms.person_document SET
				file_data = @file_data,
				original_name = @original_name,
				document_information = @document_information,
				is_primary_image = @is_primary_image,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				document_id = @document_id
						
			IF (@for_member = 1) AND
				(EXISTS (SELECT sysid_member FROM lms.member_information WHERE sysid_person = @sysid_person))
			BEGIN

				SET @transaction_done = 'UPDATED a member document ' + 
										'[Person System ID: ' + ISNULL(@sysid_person, '') + 
										'][Document ID: ' + ISNULL(CONVERT(varchar, @document_id), '') +
										'][Member ID: ' + ISNULL((SELECT member_id FROM lms.member_information WHERE sysid_person = @sysid_person), '') +
										'][Name: ' + ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	lms.person_information AS pri
																WHERE 
																	pri.sysid_person = @sysid_person), '') +
										']' + @transaction_done

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE lms.InsertTransactionLog @edited_by, @network_information, @transaction_done

			END
			ELSE IF (@for_collector = 1) AND
				(EXISTS (SELECT sysid_collector FROM lms.collector_information WHERE sysid_person = @sysid_person))
			BEGIN

				SET @transaction_done = 'UPDATED a collector document ' + 
										'[Person System ID: ' + ISNULL(@sysid_person, '') + 
										'][Document ID: ' + ISNULL(CONVERT(varchar, @document_id), '') +
										'][Employee ID: ' + ISNULL((SELECT employee_id FROM lms.collector_information WHERE sysid_person = @sysid_person), '') +
										'][Name: ' + ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	lms.person_information AS pri
																WHERE 
																	pri.sysid_person = @sysid_person), '') +
										']' + @transaction_done

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE lms.InsertTransactionLog @edited_by, @network_information, @transaction_done

			END
			ELSE IF (@for_login = 1) AND
				(EXISTS (SELECT system_user_id FROM lms.system_user_info WHERE sysid_person = @sysid_person))
			BEGIN

				SET @transaction_done = 'UPDATED a system user document ' + 
										'[Person System ID: ' + ISNULL(@sysid_person, '') + 
										'][Document ID: ' + ISNULL(CONVERT(varchar, @document_id), '') +
										'][Name: ' + ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	lms.person_information AS pri
																WHERE 
																	pri.sysid_person = @sysid_person), '') +
										']' + @transaction_done

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE lms.InsertTransactionLog @edited_by, @network_information, @transaction_done

			END
			ELSE
			BEGIN

				SET @transaction_done = 'UPDATED a person document ' + 
										'[Person System ID: ' + ISNULL(@sysid_person, '') + 
										'][Document ID: ' + ISNULL(CONVERT(varchar, @document_id), '') +
										'][Name: ' + ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	lms.person_information AS pri
																WHERE 
																	pri.sysid_person = @sysid_person), '') +
										']' + @transaction_done

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE lms.InsertTransactionLog @edited_by, @network_information, @transaction_done

			END

		END

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Update a person document', 'Person Document'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.UpdatePersonDocument TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "DeletePersonDocument" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'DeletePersonDocument')
   DROP PROCEDURE lms.DeletePersonDocument
GO

CREATE PROCEDURE lms.DeletePersonDocument
	
	@document_id bigint = 0,

	@network_information varchar(MAX) = '',
	@deleted_by varchar(50)
	
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@deleted_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@deleted_by) = 1))
	BEGIN

		IF EXISTS (SELECT document_id FROM lms.person_document WHERE document_id = @document_id)
		BEGIN

			EXECUTE lms.CreateTemporaryTable @deleted_by, @network_information

			UPDATE lms.person_document SET
				edited_by = @deleted_by
			WHERE
				document_id = @document_id

			DELETE FROM lms.person_document WHERE document_id = @document_id	

		END	

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Delete a person document', 'Person Document'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.DeletePersonDocument TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDPersonListPersonDocument" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectBySysIDPersonListPersonDocument')
   DROP PROCEDURE lms.SelectBySysIDPersonListPersonDocument
GO

CREATE PROCEDURE lms.SelectBySysIDPersonListPersonDocument

	@sysid_person_list nvarchar (MAX) = '',
	@is_primary_image bit = 0,

	@system_user_id varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1))
	BEGIN
		
		SELECT 
			pnd.document_id AS document_id,
			pnd.sysid_person AS sysid_person,
			pnd.file_data AS file_data,
			pnd.original_name AS original_name,
			pnd.document_information AS document_information,
			pnd.is_primary_image AS is_primary_image
		FROM 
			lms.person_document AS pnd
		INNER JOIN lms.IterateListToTable (@sysid_person_list, ',') AS sp_list ON sp_list.var_str = pnd.sysid_person
		WHERE
			(NOT pnd.file_data IS NULL) AND
			(NOT pnd.original_name IS NULL) AND
			(pnd.is_primary_image = @is_primary_image)
		ORDER BY
			pnd.sysid_person ASC

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a person document', 'Person Document'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectBySysIDPersonListPersonDocument TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsSysIDPersonOriginalNamePersonDocument" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'IsExistsSysIDPersonOriginalNamePersonDocument')
   DROP PROCEDURE lms.IsExistsSysIDPersonOriginalNamePersonDocument
GO

CREATE PROCEDURE lms.IsExistsSysIDPersonOriginalNamePersonDocument

	@document_id bigint = 0,
	@sysid_person varchar (50) = '',
	@original_name varchar (255) = '',
	@system_user_id varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1))
	BEGIN
		
		SELECT lms.IsExistsSysIDPersonOriginalNamePersonDoc(@document_id, @sysid_person, @original_name)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a person document', 'Person Document'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.IsExistsSysIDPersonOriginalNamePersonDocument TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the "IsExistsSysIDPersonOriginalNamePersonDoc" function already exist
IF OBJECT_ID (N'lms.IsExistsSysIDPersonOriginalNamePersonDoc') IS NOT NULL
   DROP FUNCTION lms.IsExistsSysIDPersonOriginalNamePersonDoc
GO

CREATE FUNCTION lms.IsExistsSysIDPersonOriginalNamePersonDoc
(	
	@document_id bigint = 0,
	@sysid_person varchar (50) = '',	
	@original_name varchar (255) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT sysid_person FROM lms.person_document WHERE (NOT document_id = @document_id) AND (sysid_person = @sysid_person) AND
									((REPLACE(original_name, ' ', '')) LIKE REPLACE(@original_name, ' ', '')))
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- ##########################################END TABLE "person_document" OBJECTS########################################################





-- ################################################TABLE "relationship_type" OBJECTS######################################################
-- verifies if the relationship_type table existss
IF OBJECT_ID('lms.relationship_type', 'U') IS NOT NULL
	DROP TABLE lms.relationship_type
GO

CREATE TABLE lms.relationship_type 			
(
	relationship_type_id varchar (50) NOT NULL
		CONSTRAINT Relationship_Type_Relationship_Type_ID_PK PRIMARY KEY (relationship_type_id)
		CONSTRAINT Relationship_Type_Relationship_Type_ID_CK CHECK (relationship_type_id LIKE 'RTID%'),
	relationship_description varchar (100) NOT NULL
		CONSTRAINT Relationship_Type_Relationship_Description_UQ UNIQUE (relationship_description),
	
	is_parent bit NOT NULL DEFAULT (0),
	is_spouse bit NOT NULL DEFAULT (0),
	is_sibling bit NOT NULL DEFAULT (0),
	is_in_law bit NOT NULL DEFAULT (0),
	is_blood_line bit NOT NULL DEFAULT (0),
	is_friend bit NOT NULL DEFAULT (0),

	unique_id uniqueidentifier ROWGUIDCOL NOT NULL DEFAULT NEWSEQUENTIALID()
		CONSTRAINT Relationship_Type_Unique_ID_UQ UNIQUE (unique_id)
	
) ON [PRIMARY]
GO
--------------------------------------------------------

-- create an index of the relationship_type table 
CREATE INDEX Relationship_Type_Relationship_Type_ID_Index
	ON lms.relationship_type (relationship_type_id ASC)
GO
------------------------------------------------------------------

-- verifies that the trigger "Relationship_Type_Trigger_Instead_Update" already exist
IF OBJECT_ID ('lms.Relationship_Type_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER lms.Relationship_Type_Trigger_Instead_Update
GO

CREATE TRIGGER lms.Relationship_Type_Trigger_Instead_Update
	ON  lms.relationship_type
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	EXECUTE lms.ShowErrorMsg 'Update a relationship type', 'Relationship Type'
	
GO
-------------------------------------------------------------------------

-- verifies that the trigger "Relationship_Type_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('lms.Relationship_Type_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER lms.Relationship_Type_Trigger_Instead_Delete
GO

CREATE TRIGGER lms.Relationship_Type_Trigger_Instead_Delete
	ON  lms.relationship_type
	INSTEAD OF DELETE
	NOT FOR REPLICATION
AS 

	EXECUTE lms.ShowErrorMsg 'Delete a relationship type', 'Relationship Type'
	
GO
-------------------------------------------------------------------------

-- verifies if the procedure "SelectRelationshipType" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectRelationshipType')
   DROP PROCEDURE lms.SelectRelationshipType
GO

CREATE PROCEDURE lms.SelectRelationshipType
	
	@system_user_id varchar(50) = ''
	
AS

	IF lms.IsActiveSystemUserInfo(@system_user_id) = 1
	BEGIN
		
		SELECT
			rpt.relationship_type_id AS relationship_type_id,
			rpt.relationship_description AS relationship_description,
			rpt.is_parent AS is_parent,
			rpt.is_spouse AS is_spouse,
			rpt.is_sibling AS is_sibling,
			rpt.is_in_law AS is_in_law,
			rpt.is_blood_line AS is_blood_line,
			rpt.is_friend AS is_friend			
		FROM
			lms.relationship_type AS rpt
		ORDER BY
			relationship_description ASC

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a relationship type', 'Relationship Type'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectRelationshipType TO db_lmsusers
GO
-------------------------------------------------------------

-- ################################################END TABLE "relationship_type" OBJECTS###################################################




-- ##########################################TABLE "person_beneficiary_information" OBJECTS########################################################

-- verifies if the person_beneficiary_information table exists
IF OBJECT_ID('lms.person_beneficiary_information', 'U') IS NOT NULL
	DROP TABLE lms.person_beneficiary_information
GO

CREATE TABLE lms.person_beneficiary_information 			
(
	beneficiary_id bigint NOT NULL IDENTITY (1, 1) NOT FOR REPLICATION
		CONSTRAINT Person_Beneficiary_Information_Beneficiary_ID_PK PRIMARY KEY (beneficiary_id),
	sysid_person varchar (50) NOT NULL 
		CONSTRAINT Person_Beneficiary_Information_SysID_Person_FK FOREIGN KEY REFERENCES lms.person_information(sysid_person) ON UPDATE NO ACTION
		CONSTRAINT Person_Beneficiary_Information_SysID_Person_UQ UNIQUE (sysid_person, in_relationship_with_sysid_person),
	in_relationship_with_sysid_person varchar (50) NOT NULL
		CONSTRAINT Person_Beneficiary_Information_In_Relationship_With_SysID_Person_FK FOREIGN KEY REFERENCES lms.person_information(sysid_person) ON UPDATE NO ACTION
		CONSTRAINT Person_Beneficiary_Information_In_Relationship_With_SysID_Person_UQ UNIQUE (in_relationship_with_sysid_person, sysid_person),
	relationship_type_id varchar (50) NOT NULL
		CONSTRAINT Person_Beneficiary_Information_Relationship_Type_ID_FK FOREIGN KEY REFERENCES lms.relationship_type(relationship_type_id) ON UPDATE NO ACTION,

	is_primary_beneficiary bit NOT NULL DEFAULT (0),	

	created_on datetime NOT NULL DEFAULT (GETDATE()),
	created_by varchar (50) NOT NULL
		CONSTRAINT Person_Beneficiary_Information_Created_By_FK FOREIGN KEY REFERENCES lms.system_user_info(system_user_id) ON UPDATE NO ACTION,
	edited_on datetime NULL,
	edited_by varchar (50) NULL	
		CONSTRAINT Person_Beneficiary_Information_Edited_By_FK FOREIGN KEY REFERENCES lms.system_user_info(system_user_id) ON UPDATE NO ACTION,

	unique_id uniqueidentifier ROWGUIDCOL NOT NULL DEFAULT NEWSEQUENTIALID()
		CONSTRAINT Person_Beneficiary_Information_Unique_ID_UQ UNIQUE (unique_id)
	
) ON [PRIMARY]
GO
------------------------------------------------------------------

-- create an index of the person_beneficiary_information table 
CREATE INDEX Person_Beneficiary_Information_Beneficiary_ID_Index
	ON lms.person_beneficiary_information (beneficiary_id ASC)
GO
------------------------------------------------------------------

-- verifies that the trigger "Person_Beneficiary_Information_Trigger_Insert" already exist
IF OBJECT_ID ('lms.Person_Beneficiary_Information_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER lms.Person_Beneficiary_Information_Trigger_Insert
GO
		
CREATE TRIGGER lms.Person_Beneficiary_Information_Trigger_Insert
	ON  lms.person_beneficiary_information
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar (MAX)

	DECLARE @beneficiary_id bigint
	DECLARE @sysid_person varchar (50)
	DECLARE @in_relationship_with_sysid_person varchar (50)
	DECLARE @relationship_type_id varchar (50)
	DECLARE @is_primary_beneficiary bit
	
	DECLARE @created_by varchar (50)
	
	DECLARE @primary_beneficiary varchar (20)
	
	SELECT 
		@beneficiary_id = i.beneficiary_id,
		@sysid_person = i.sysid_person,
		@in_relationship_with_sysid_person = i.in_relationship_with_sysid_person,
		@relationship_type_id = i.relationship_type_id,
		@is_primary_beneficiary = i.is_primary_beneficiary,

		@created_by = i.created_by		
	FROM INSERTED AS i

	IF (@is_primary_beneficiary = 1)
	BEGIN
		SET @primary_beneficiary = 'YES'
	END
	ELSE
	BEGIN
		SET @primary_beneficiary = 'NO'
	END

	SET @transaction_done = 'CREATED a person beneficiary information ' +		
							'[Beneficiary ID: ' + ISNULL(CONVERT(varchar, @beneficiary_id), '') +	
							'][Member ID: ' + ISNULL((SELECT
															mbi.member_id
														FROM
															lms.member_information AS mbi
														WHERE
															(sysid_person = @sysid_person)), '') +
							'][Employee ID: ' + ISNULL((SELECT
															cli.employee_id
														FROM
															lms.collector_information AS cli
														WHERE
															(sysid_person = @sysid_person)), '') +
							'][Person Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															lms.person_information AS pri
														WHERE
															(pri.sysid_person = @sysid_person)), '') + 
							'][In Relationship With: ' + ISNULL((SELECT
																		pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																	FROM
																		lms.person_information AS pri
																	WHERE
																		(pri.sysid_person = @in_relationship_with_sysid_person)), '') + 
							'][Relationship Type: ' + ISNULL((SELECT
																	rpt.relationship_description
																FROM
																	lms.relationship_type AS rpt
																WHERE
																	(rpt.relationship_type_id = @relationship_type_id)), '') +
							'][Is Primary Beneficiary: ' + ISNULL(@primary_beneficiary, '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @created_by
	END

	EXECUTE lms.InsertTransactionLog @created_by, @network_information, @transaction_done

GO
-------------------------------------------------------------------

-- verifies that the trigger "Person_Beneficiary_Information_Trigger_Instead_Update" already exist
IF OBJECT_ID ('lms.Person_Beneficiary_Information_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER lms.Person_Beneficiary_Information_Trigger_Instead_Update
GO

CREATE TRIGGER lms.Person_Beneficiary_Information_Trigger_Instead_Update
	ON  lms.person_beneficiary_information
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar(MAX)
	DECLARE @transaction_done varchar(MAX)
	
	DECLARE @beneficiary_id bigint
	DECLARE @sysid_person varchar (50)
	DECLARE @in_relationship_with_sysid_person varchar (50)
	DECLARE @relationship_type_id varchar (50)
	DECLARE @is_primary_beneficiary bit

	DECLARE @edited_by varchar(50)

	DECLARE @relationship_type_id_b varchar (50)
	DECLARE @is_primary_beneficiary_b bit
	
	DECLARE @primary_beneficiary varchar (20)
	DECLARE @primary_beneficiary_b varchar (20)

	DECLARE @has_update bit

	DECLARE person_beneficiary_information_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.beneficiary_id, i.sysid_person, i.in_relationship_with_sysid_person, i.relationship_type_id,
					i.is_primary_beneficiary, i.edited_by
				FROM INSERTED AS i

	OPEN person_beneficiary_information_update_cursor

	FETCH NEXT FROM person_beneficiary_information_update_cursor
		INTO @beneficiary_id, @sysid_person, @in_relationship_with_sysid_person, @relationship_type_id,
				@is_primary_beneficiary, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		SELECT 
			@relationship_type_id_b = pbi.relationship_type_id,
			@is_primary_beneficiary_b = pbi.is_primary_beneficiary
		FROM 
			lms.person_beneficiary_information AS pbi
		WHERE
			pbi.beneficiary_id = @beneficiary_id

		SET @transaction_done = ''
		SET @has_update = 0

		IF (NOT ISNULL(@relationship_type_id, '') = ISNULL(@relationship_type_id_b, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Relationship Type Before: ' + ISNULL((SELECT
																									rpt.relationship_description
																								FROM
																									lms.relationship_type AS rpt
																								WHERE
																									(rpt.relationship_type_id = @relationship_type_id_b)), '') + ']' +
														'[Relationship Type After: ' + ISNULL((SELECT
																									rpt.relationship_description
																								FROM
																									lms.relationship_type AS rpt
																								WHERE
																									(rpt.relationship_type_id = @relationship_type_id)), '') + ']'
			SET @has_update = 1
		END
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Relationship Type: ' + ISNULL((SELECT
																								rpt.relationship_description
																							FROM
																								lms.relationship_type AS rpt
																							WHERE
																								(rpt.relationship_type_id = @relationship_type_id)), '') + ']'
		END

		IF (NOT @is_primary_beneficiary = @is_primary_beneficiary_b)
		BEGIN

			IF (@is_primary_beneficiary_b = 1)
			BEGIN
				SET @primary_beneficiary_b = 'YES'
			END
			ELSE
			BEGIN
				SET @primary_beneficiary_b = 'NO'
			END

			IF (@is_primary_beneficiary = 1)
			BEGIN
				SET @primary_beneficiary = 'YES'
			END
			ELSE
			BEGIN
				SET @primary_beneficiary = 'NO'
			END
			SET @transaction_done = @transaction_done + '[Is Primary Beneficiary Before: ' + ISNULL(@primary_beneficiary_b, '') + ']' +
														'[Is Primary Beneficiary After: ' + ISNULL(@primary_beneficiary, '') + ']'
			SET @has_update = 1

		END

		IF (@has_update = 1)
		BEGIN

			UPDATE lms.person_beneficiary_information SET
				relationship_type_id = @relationship_type_id,
				is_primary_beneficiary = @is_primary_beneficiary,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				beneficiary_id = @beneficiary_id

			SET @transaction_done = 'UPDATED a person beneficiary information ' +
									'[Beneficiary ID: ' + ISNULL(CONVERT(varchar, @beneficiary_id), '') +	
									'][Member ID: ' + ISNULL((SELECT
																	mbi.member_id
																FROM
																	lms.member_information AS mbi
																WHERE
																	(sysid_person = @sysid_person)), '') +
									'][Employee ID: ' + ISNULL((SELECT
																	cli.employee_id
																FROM
																	lms.collector_information AS cli
																WHERE
																	(sysid_person = @sysid_person)), '') +
									'][Person Name: ' + ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	lms.person_information AS pri
																WHERE
																	(pri.sysid_person = @sysid_person)), '') + 
									'][In Relationship With: ' + ISNULL((SELECT
																				pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																			FROM
																				lms.person_information AS pri
																			WHERE
																				(pri.sysid_person = @in_relationship_with_sysid_person)), '') + 
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
			END

			EXECUTE lms.InsertTransactionLog @edited_by, @network_information, @transaction_done

		END
		ELSE IF NOT @edited_by IS NULL
		BEGIN

			--used for the delete trigger
			UPDATE lms.person_beneficiary_information SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				(beneficiary_id = @beneficiary_id)

		END
		
		FETCH NEXT FROM person_beneficiary_information_update_cursor
			INTO @beneficiary_id, @sysid_person, @in_relationship_with_sysid_person, @relationship_type_id,
					@is_primary_beneficiary, @edited_by

	END

	CLOSE person_beneficiary_information_update_cursor
	DEALLOCATE person_beneficiary_information_update_cursor

GO
---------------------------------------------------------------------

--verifies that the trigger "Person_Beneficiary_Information_Trigger_Delete" already exist
IF OBJECT_ID ('lms.Person_Beneficiary_Information_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER lms.Person_Beneficiary_Information_Trigger_Delete
GO

CREATE TRIGGER lms.Person_Beneficiary_Information_Trigger_Delete
	ON  lms.person_beneficiary_information
	FOR DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @beneficiary_id bigint
	DECLARE @sysid_person varchar (50)
	DECLARE @in_relationship_with_sysid_person varchar (50)
	DECLARE @relationship_type_id varchar (50)
	DECLARE @is_primary_beneficiary bit

	DECLARE @deleted_by varchar (50)

	DECLARE @primary_beneficiary varchar (20)

	DECLARE person_beneficiary_information_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.beneficiary_id, d.sysid_person, d.in_relationship_with_sysid_person, d.relationship_type_id,
				d.is_primary_beneficiary, d.edited_by		
			FROM 
				DELETED AS d

	OPEN person_beneficiary_information_delete_cursor

	FETCH NEXT FROM person_beneficiary_information_delete_cursor
		INTO @beneficiary_id, @sysid_person, @in_relationship_with_sysid_person, @relationship_type_id,
				@is_primary_beneficiary, @deleted_by	

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		IF (@is_primary_beneficiary = 1)
		BEGIN
			SET @primary_beneficiary = 'YES'
		END
		ELSE
		BEGIN
			SET @primary_beneficiary = 'NO'
		END

		SET @transaction_done = 'DELETED a person beneficiary information ' +		
								'[Beneficiary ID: ' + ISNULL(CONVERT(varchar, @beneficiary_id), '') +	
								'][Member ID: ' + ISNULL((SELECT
																mbi.member_id
															FROM
																lms.member_information AS mbi
															WHERE
																(sysid_person = @sysid_person)), '') +
								'][Employee ID: ' + ISNULL((SELECT
																cli.employee_id
															FROM
																lms.collector_information AS cli
															WHERE
																(sysid_person = @sysid_person)), '') +
								'][Person Name: ' + ISNULL((SELECT
																pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
															FROM
																lms.person_information AS pri
															WHERE
																(pri.sysid_person = @sysid_person)), '') + 
								'][In Relationship With: ' + ISNULL((SELECT
																			pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																		FROM
																			lms.person_information AS pri
																		WHERE
																			(pri.sysid_person = @in_relationship_with_sysid_person)), '') + 
								'][Relationship Type: ' + ISNULL((SELECT
																		rpt.relationship_description
																	FROM
																		lms.relationship_type AS rpt
																	WHERE
																		(rpt.relationship_type_id = @relationship_type_id)), '') +
								'][Is Primary Beneficiary: ' + ISNULL(@primary_beneficiary, '') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @deleted_by
		END

		EXECUTE lms.InsertTransactionLog @deleted_by, @network_information, @transaction_done
		
		FETCH NEXT FROM person_beneficiary_information_delete_cursor
			INTO @beneficiary_id, @sysid_person, @in_relationship_with_sysid_person, @relationship_type_id,
					@is_primary_beneficiary, @deleted_by

	END

	CLOSE person_beneficiary_information_delete_cursor
	DEALLOCATE person_beneficiary_information_delete_cursor

GO
-----------------------------------------------------------------

-- verifies if the procedure "InsertPersonBeneficiaryInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'InsertPersonBeneficiaryInformation')
   DROP PROCEDURE lms.InsertPersonBeneficiaryInformation
GO

CREATE PROCEDURE lms.InsertPersonBeneficiaryInformation
	
	@sysid_person varchar (50) = '',
	@in_relationship_with_sysid_person varchar (50) = '',
	@relationship_type_id varchar (50) = '',
	@is_primary_beneficiary bit = 0,

	@network_information varchar (MAX) = '',
	@created_by varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@created_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@created_by) = 1))		 
	BEGIN																

		EXECUTE lms.CreateTemporaryTable @created_by, @network_information

		IF (@is_primary_beneficiary = 1)
		BEGIN

			UPDATE lms.person_beneficiary_information SET 
				is_primary_beneficiary = 0, 
				edited_by = @created_by
			WHERE
				sysid_person = @sysid_person

		END

		INSERT INTO lms.person_beneficiary_information
		(
			sysid_person,
			in_relationship_with_sysid_person,
			relationship_type_id,
			is_primary_beneficiary,

			created_by
		)
		VALUES
		(
			@sysid_person,
			@in_relationship_with_sysid_person,
			@relationship_type_id,
			@is_primary_beneficiary,

			@created_by
		)

	END	
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Insert a person beneficiary information', 'Person Beneficiary Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.InsertPersonBeneficiaryInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "UpdatePersonBeneficiaryInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'UpdatePersonBeneficiaryInformation')
   DROP PROCEDURE lms.UpdatePersonBeneficiaryInformation
GO

CREATE PROCEDURE lms.UpdatePersonBeneficiaryInformation
	
	@beneficiary_id bigint = 0,
	@relationship_type_id varchar (50) = '',
	@is_primary_beneficiary bit = 0,

	@network_information varchar (MAX) = '',
	@edited_by varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@edited_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@edited_by) = 1))	
	BEGIN

		EXECUTE lms.CreateTemporaryTable @edited_by, @network_information

		IF (@is_primary_beneficiary = 1)
		BEGIN

			UPDATE lms.person_beneficiary_information SET 
				@is_primary_beneficiary = 0, 
				edited_by = @edited_by
			WHERE
				(sysid_person = (SELECT sysid_person FROM lms.person_beneficiary_information WHERE beneficiary_id = @beneficiary_id)) AND
				(NOT beneficiary_id = @beneficiary_id)

		END
		
		UPDATE lms.person_beneficiary_information SET
			relationship_type_id = @relationship_type_id,
			is_primary_beneficiary = @is_primary_beneficiary,

			edited_by = @edited_by
		WHERE
			(beneficiary_id = @beneficiary_id)

	END	
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Update a person beneficiary information', 'Person Beneficiary Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.UpdatePersonBeneficiaryInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "DeletePersonBeneficiaryInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'DeletePersonBeneficiaryInformation')
   DROP PROCEDURE lms.DeletePersonBeneficiaryInformation
GO

CREATE PROCEDURE lms.DeletePersonBeneficiaryInformation
	
	@beneficiary_id bigint = 0,

	@network_information varchar (MAX) = '',
	@deleted_by varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@deleted_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@deleted_by) = 1))	
	BEGIN

		IF EXISTS (SELECT beneficiary_id FROM lms.person_beneficiary_information WHERE beneficiary_id = @beneficiary_id)
		BEGIN

			EXECUTE lms.CreateTemporaryTable @deleted_by, @network_information

			UPDATE lms.person_beneficiary_information SET
				edited_by = @deleted_by
			WHERE
				(beneficiary_id = @beneficiary_id)

			DELETE FROM lms.person_beneficiary_information WHERE (beneficiary_id = @beneficiary_id)

		END

	END	
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Delete a person beneficiary information', 'Person Beneficiary Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.DeletePersonBeneficiaryInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDPersonBeneficiaryInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectBySysIDPersonBeneficiaryInformation')
   DROP PROCEDURE lms.SelectBySysIDPersonBeneficiaryInformation
GO

CREATE PROCEDURE lms.SelectBySysIDPersonBeneficiaryInformation
	
	@sysid_person varchar (50) = '',

	@system_user_id varchar (50) = ''
	
AS

	IF (lms.IsActiveSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.birthdate AS birthdate,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,				

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,

			pbi.beneficiary_id AS beneficiary_id,
			pbi.is_primary_beneficiary AS is_primary_beneficiary,

			rpt.relationship_type_id AS relationship_type_id,
			rpt.relationship_description AS relationship_description,
			rpt.is_parent AS is_parent,
			rpt.is_spouse AS is_spouse,
			rpt.is_sibling AS is_sibling,
			rpt.is_in_law AS is_in_law,
			rpt.is_blood_line AS is_blood_line,
			rpt.is_friend AS is_friend
			
		FROM
			lms.person_beneficiary_information AS pbi
		INNER JOIN lms.person_information AS pri ON pri.sysid_person = pbi.in_relationship_with_sysid_person
		INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
		LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		WHERE
			(pbi.sysid_person = @sysid_person)
		ORDER BY
			last_name, first_name, middle_name ASC

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query person beneficiary information', 'Person Beneficiary Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectBySysIDPersonBeneficiaryInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- ########################################END TABLE "person_beneficiary_information" OBJECTS########################################################





-- ##########################################TABLE "person_reference_information" OBJECTS########################################################

-- verifies if the person_reference_information table exists
IF OBJECT_ID('lms.person_reference_information', 'U') IS NOT NULL
	DROP TABLE lms.person_reference_information
GO

CREATE TABLE lms.person_reference_information 			
(
	reference_id bigint NOT NULL IDENTITY (1, 1) NOT FOR REPLICATION
		CONSTRAINT Person_Reference_Information_Reference_ID_PK PRIMARY KEY (reference_id),
	sysid_person varchar (50) NOT NULL 
		CONSTRAINT Person_Reference_Information_SysID_Person_FK FOREIGN KEY REFERENCES lms.person_information(sysid_person) ON UPDATE NO ACTION
		CONSTRAINT Person_Reference_Information_SysID_Person_UQ UNIQUE (sysid_person, in_reference_with_sysid_person),
	in_reference_with_sysid_person varchar (50) NOT NULL
		CONSTRAINT Person_Reference_Information_In_Reference_With_SysID_Person_FK FOREIGN KEY REFERENCES lms.person_information(sysid_person) ON UPDATE NO ACTION
		CONSTRAINT Person_Reference_Information_In_Reference_With_SysID_Person_UQ UNIQUE (in_reference_with_sysid_person, sysid_person),	

	created_on datetime NOT NULL DEFAULT (GETDATE()),
	created_by varchar (50) NOT NULL
		CONSTRAINT Person_Reference_Information_Created_By_FK FOREIGN KEY REFERENCES lms.system_user_info(system_user_id) ON UPDATE NO ACTION,
	edited_on datetime NULL,
	edited_by varchar (50) NULL	
		CONSTRAINT Person_Reference_Information_Edited_By_FK FOREIGN KEY REFERENCES lms.system_user_info(system_user_id) ON UPDATE NO ACTION,

	unique_id uniqueidentifier ROWGUIDCOL NOT NULL DEFAULT NEWSEQUENTIALID()
		CONSTRAINT Person_Reference_Information_Unique_ID_UQ UNIQUE (unique_id)
	
) ON [PRIMARY]
GO
------------------------------------------------------------------

-- create an index of the person_reference_information table 
CREATE INDEX Person_Reference_Information_Reference_ID_Index
	ON lms.person_reference_information (reference_id ASC)
GO
------------------------------------------------------------------

-- verifies that the trigger "Person_Reference_Information_Trigger_Insert" already exist
IF OBJECT_ID ('lms.Person_Reference_Information_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER lms.Person_Reference_Information_Trigger_Insert
GO
		
CREATE TRIGGER lms.Person_Reference_Information_Trigger_Insert
	ON  lms.person_reference_information
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar (MAX)

	DECLARE @reference_id bigint
	DECLARE @sysid_person varchar (50)
	DECLARE @in_reference_with_sysid_person varchar (50)
	
	DECLARE @created_by varchar (50)
	
	SELECT 
		@reference_id = i.reference_id,
		@sysid_person = i.sysid_person,
		@in_reference_with_sysid_person = i.in_reference_with_sysid_person,

		@created_by = i.created_by		
	FROM INSERTED AS i

	SET @transaction_done = 'CREATED a person reference information ' +		
							'[Reference ID: ' + ISNULL(CONVERT(varchar, @reference_id), '') +	
							'][Member ID: ' + ISNULL((SELECT
															mbi.member_id
														FROM
															lms.member_information AS mbi
														WHERE
															(sysid_person = @sysid_person)), '') +
							'][Employee ID: ' + ISNULL((SELECT
															cli.employee_id
														FROM
															lms.collector_information AS cli
														WHERE
															(sysid_person = @sysid_person)), '') +
							'][Person Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															lms.person_information AS pri
														WHERE
															(pri.sysid_person = @sysid_person)), '') + 
							'][In Reference With: ' + ISNULL((SELECT
																		pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																	FROM
																		lms.person_information AS pri
																	WHERE
																		(pri.sysid_person = @in_reference_with_sysid_person)), '') + 
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @created_by
	END

	EXECUTE lms.InsertTransactionLog @created_by, @network_information, @transaction_done

GO
-------------------------------------------------------------------

-- verifies that the trigger "Person_Reference_Information_Trigger_Instead_Update" already exist
IF OBJECT_ID ('lms.Person_Reference_Information_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER lms.Person_Reference_Information_Trigger_Instead_Update
GO

CREATE TRIGGER lms.Person_Reference_Information_Trigger_Instead_Update
	ON  lms.person_reference_information
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar(MAX)
	DECLARE @transaction_done varchar(MAX)
	
	DECLARE @reference_id bigint

	DECLARE @edited_by varchar(50)

	DECLARE person_reference_information_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.reference_id, i.edited_by
				FROM INSERTED AS i

	OPEN person_reference_information_update_cursor

	FETCH NEXT FROM person_reference_information_update_cursor
		INTO @reference_id, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		IF NOT @edited_by IS NULL
		BEGIN

			--used for the delete trigger
			UPDATE lms.person_reference_information SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				(reference_id = @reference_id)

		END
		
		FETCH NEXT FROM person_reference_information_update_cursor
			INTO @reference_id, @edited_by

	END

	CLOSE person_reference_information_update_cursor
	DEALLOCATE person_reference_information_update_cursor

GO
---------------------------------------------------------------------

--verifies that the trigger "Person_Reference_Information_Trigger_Delete" already exist
IF OBJECT_ID ('lms.Person_Reference_Information_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER lms.Person_Reference_Information_Trigger_Delete
GO

CREATE TRIGGER lms.Person_Reference_Information_Trigger_Delete
	ON  lms.person_reference_information
	FOR DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @reference_id bigint
	DECLARE @sysid_person varchar (50)
	DECLARE @in_reference_with_sysid_person varchar (50)

	DECLARE @deleted_by varchar (50)

	DECLARE person_reference_information_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.reference_id, d.sysid_person, d.in_reference_with_sysid_person, d.created_by		
			FROM 
				DELETED AS d

	OPEN person_reference_information_delete_cursor

	FETCH NEXT FROM person_reference_information_delete_cursor
		INTO @reference_id, @sysid_person, @in_reference_with_sysid_person, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN		

			SET @transaction_done = 'DELETED a person reference information ' +		
									'[Reference ID: ' + ISNULL(CONVERT(varchar, @reference_id), '') +	
									'][Member ID: ' + ISNULL((SELECT
																	mbi.member_id
																FROM
																	lms.member_information AS mbi
																WHERE
																	(sysid_person = @sysid_person)), '') +
									'][Employee ID: ' + ISNULL((SELECT
																	cli.employee_id
																FROM
																	lms.collector_information AS cli
																WHERE
																	(sysid_person = @sysid_person)), '') +
									'][Person Name: ' + ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	lms.person_information AS pri
																WHERE
																	(pri.sysid_person = @sysid_person)), '') + 
									'][In Reference With: ' + ISNULL((SELECT
																				pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																			FROM
																				lms.person_information AS pri
																			WHERE
																				(pri.sysid_person = @in_reference_with_sysid_person)), '') + 
									']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @deleted_by
		END

		EXECUTE lms.InsertTransactionLog @deleted_by, @network_information, @transaction_done
		
		FETCH NEXT FROM person_reference_information_update_cursor
			INTO @reference_id, @sysid_person, @in_reference_with_sysid_person, @deleted_by

	END

	CLOSE person_reference_information_delete_cursor
	DEALLOCATE person_reference_information_delete_cursor

GO
-----------------------------------------------------------------

-- verifies if the procedure "InsertPersonReferenceInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'InsertPersonReferenceInformation')
   DROP PROCEDURE lms.InsertPersonReferenceInformation
GO

CREATE PROCEDURE lms.InsertPersonReferenceInformation
	
	@sysid_person varchar (50) = '',
	@in_reference_with_sysid_person varchar (50) = '',

	@network_information varchar (MAX) = '',
	@created_by varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@created_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@created_by) = 1))		 
	BEGIN																

		EXECUTE lms.CreateTemporaryTable @created_by, @network_information

		INSERT INTO lms.person_reference_information
		(
			sysid_person,
			in_reference_with_sysid_person,

			created_by
		)
		VALUES
		(
			@sysid_person,
			@in_reference_with_sysid_person,

			@created_by
		)

	END	
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Insert a person reference information', 'Person Reference Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.InsertPersonReferenceInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "DeletePersonReferenceInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'DeletePersonReferenceInformation')
   DROP PROCEDURE lms.DeletePersonReferenceInformation
GO

CREATE PROCEDURE lms.DeletePersonReferenceInformation
	
	@reference_id bigint = 0,

	@network_information varchar (MAX) = '',
	@deleted_by varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@deleted_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@deleted_by) = 1))	
	BEGIN

		IF EXISTS (SELECT reference_id FROM lms.person_reference_information WHERE reference_id = @reference_id)
		BEGIN

			EXECUTE lms.CreateTemporaryTable @deleted_by, @network_information

			UPDATE lms.person_reference_information SET
				edited_by = @deleted_by
			WHERE
				reference_id = @reference_id

			DELETE FROM lms.person_reference_information WHERE reference_id = @reference_id

		END

	END	
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Delete a person reference information', 'Person Reference Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.DeletePersonReferenceInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDPersonReferenceInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectBySysIDPersonReferenceInformation')
   DROP PROCEDURE lms.SelectBySysIDPersonReferenceInformation
GO

CREATE PROCEDURE lms.SelectBySysIDPersonReferenceInformation
	
	@sysid_person varchar (50) = '',

	@system_user_id varchar (50) = ''
	
AS

	IF (lms.IsActiveSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT
			pci.reference_id AS reference_id,
			
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.birthdate AS birthdate,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,				

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description
			
		FROM
			lms.person_reference_information AS pci
		INNER JOIN lms.person_information AS pri ON pri.sysid_person = pci.in_reference_with_sysid_person
		LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		WHERE
			(pci.sysid_person = @sysid_person)
		ORDER BY
			last_name, first_name, middle_name ASC

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query person reference information', 'Person Reference Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectBySysIDPersonReferenceInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- ##########################################END TABLE "person_reference_information" OBJECTS########################################################





-- ##########################################TABLE "person_spouse_information" OBJECTS########################################################

-- verifies if the person_spouse_information table exists
IF OBJECT_ID('lms.person_spouse_information', 'U') IS NOT NULL
	DROP TABLE lms.person_spouse_information
GO

CREATE TABLE lms.person_spouse_information 			
(
	spouse_id bigint NOT NULL IDENTITY (1, 1) NOT FOR REPLICATION
		CONSTRAINT Person_Spouse_Information_Spouse_ID_PK PRIMARY KEY (spouse_id),
	sysid_person varchar (50) NOT NULL 
		CONSTRAINT Person_Spouse_Information_SysID_Person_FK FOREIGN KEY REFERENCES lms.person_information(sysid_person) ON UPDATE NO ACTION
		CONSTRAINT Person_Spouse_Information_SysID_Person_UQ UNIQUE (sysid_person, in_spouse_with_sysid_person),
	in_spouse_with_sysid_person varchar (50) NOT NULL
		CONSTRAINT Person_Spouse_Information_In_Relationship_With_SysID_Person_FK FOREIGN KEY REFERENCES lms.person_information(sysid_person) ON UPDATE NO ACTION
		CONSTRAINT Person_Spouse_Information_In_Relationship_With_SysID_Person_UQ UNIQUE (in_spouse_with_sysid_person, sysid_person),
	relationship_type_id varchar (50) NOT NULL
		CONSTRAINT Person_Spouse_Information_Relationship_Type_ID_FK FOREIGN KEY REFERENCES lms.relationship_type(relationship_type_id) ON UPDATE NO ACTION,

	is_still_a_spouse bit NOT NULL DEFAULT (0),	

	created_on datetime NOT NULL DEFAULT (GETDATE()),
	created_by varchar (50) NOT NULL
		CONSTRAINT Person_Spouse_Information_Created_By_FK FOREIGN KEY REFERENCES lms.system_user_info(system_user_id) ON UPDATE NO ACTION,
	edited_on datetime NULL,
	edited_by varchar (50) NULL	
		CONSTRAINT Person_Spouse_Information_Edited_By_FK FOREIGN KEY REFERENCES lms.system_user_info(system_user_id) ON UPDATE NO ACTION,

	unique_id uniqueidentifier ROWGUIDCOL NOT NULL DEFAULT NEWSEQUENTIALID()
		CONSTRAINT Person_Spouse_Information_Unique_ID_UQ UNIQUE (unique_id)
	
) ON [PRIMARY]
GO
------------------------------------------------------------------

-- create an index of the person_spouse_information table 
CREATE INDEX Person_Spouse_Information_Spouse_ID_Index
	ON lms.person_spouse_information (spouse_id ASC)
GO
------------------------------------------------------------------

-- verifies that the trigger "Person_Spouse_Information_Trigger_Insert" already exist
IF OBJECT_ID ('lms.Person_Spouse_Information_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER lms.Person_Spouse_Information_Trigger_Insert
GO
		
CREATE TRIGGER lms.Person_Spouse_Information_Trigger_Insert
	ON  lms.person_spouse_information
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar (MAX)

	DECLARE @spouse_id bigint
	DECLARE @sysid_person varchar (50)
	DECLARE @in_spouse_with_sysid_person varchar (50)
	DECLARE @relationship_type_id varchar (50)
	DECLARE @is_still_a_spouse bit
	
	DECLARE @created_by varchar (50)
	
	DECLARE @still_a_spouse varchar (20)
	
	SELECT 
		@spouse_id = i.spouse_id,
		@sysid_person = i.sysid_person,
		@in_spouse_with_sysid_person = i.in_spouse_with_sysid_person,
		@relationship_type_id = i.relationship_type_id,
		@is_still_a_spouse = i.is_still_a_spouse,

		@created_by = i.created_by		
	FROM INSERTED AS i

	IF (@is_still_a_spouse = 1)
	BEGIN
		SET @still_a_spouse = 'YES'
	END
	ELSE
	BEGIN
		SET @still_a_spouse = 'NO'
	END

	SET @transaction_done = 'CREATED a person spouse information ' +		
							'[Spouse ID: ' + ISNULL(CONVERT(varchar, @spouse_id), '') +	
							'][Member ID: ' + ISNULL((SELECT
															mbi.member_id
														FROM
															lms.member_information AS mbi
														WHERE
															(sysid_person = @sysid_person)), '') +
							'][Employee ID: ' + ISNULL((SELECT
															cli.employee_id
														FROM
															lms.collector_information AS cli
														WHERE
															(sysid_person = @sysid_person)), '') +
							'][Person Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															lms.person_information AS pri
														WHERE
															(pri.sysid_person = @sysid_person)), '') + 
							'][In Spouse With: ' + ISNULL((SELECT
																pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
															FROM
																lms.person_information AS pri
															WHERE
																(pri.sysid_person = @in_spouse_with_sysid_person)), '') + 
							'][Relationship Type: ' + ISNULL((SELECT
																	rpt.relationship_description
																FROM
																	lms.relationship_type AS rpt
																WHERE
																	(rpt.relationship_type_id = @relationship_type_id)), '') +
							'][Is Still a Spouse: ' + ISNULL(@still_a_spouse, '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @created_by
	END

	EXECUTE lms.InsertTransactionLog @created_by, @network_information, @transaction_done

GO
-------------------------------------------------------------------

-- verifies that the trigger "Person_Spouse_Information_Trigger_Instead_Update" already exist
IF OBJECT_ID ('lms.Person_Spouse_Information_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER lms.Person_Spouse_Information_Trigger_Instead_Update
GO

CREATE TRIGGER lms.Person_Spouse_Information_Trigger_Instead_Update
	ON  lms.person_spouse_information
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar(MAX)
	DECLARE @transaction_done varchar(MAX)
	
	DECLARE @spouse_id bigint
	DECLARE @sysid_person varchar (50)
	DECLARE @in_spouse_with_sysid_person varchar (50)
	DECLARE @relationship_type_id varchar (50)
	DECLARE @is_still_a_spouse bit

	DECLARE @edited_by varchar(50)

	DECLARE @relationship_type_id_b varchar (50)
	DECLARE @is_still_a_spouse_b bit
	
	DECLARE @still_a_spouse varchar (20)
	DECLARE @still_a_spouse_b varchar (20)

	DECLARE @has_update bit

	DECLARE person_spouse_information_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.spouse_id, i.sysid_person, i.in_spouse_with_sysid_person, i.relationship_type_id,
					i.is_still_a_spouse, i.edited_by
				FROM INSERTED AS i

	OPEN person_spouse_information_update_cursor

	FETCH NEXT FROM person_spouse_information_update_cursor
		INTO @spouse_id, @sysid_person, @in_spouse_with_sysid_person, @relationship_type_id,
				@is_still_a_spouse, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		SELECT 
			@relationship_type_id_b = psi.relationship_type_id,
			@is_still_a_spouse_b = psi.is_still_a_spouse
		FROM 
			lms.person_spouse_information AS psi
		WHERE
			psi.spouse_id = @spouse_id

		SET @transaction_done = ''
		SET @has_update = 0

		IF (NOT ISNULL(@relationship_type_id, '') = ISNULL(@relationship_type_id_b, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Relationship Type Before: ' + ISNULL((SELECT
																									rpt.relationship_description
																								FROM
																									lms.relationship_type AS rpt
																								WHERE
																									(rpt.relationship_type_id = @relationship_type_id_b)), '') + ']' +
														'[Relationship Type After: ' + ISNULL((SELECT
																									rpt.relationship_description
																								FROM
																									lms.relationship_type AS rpt
																								WHERE
																									(rpt.relationship_type_id = @relationship_type_id)), '') + ']'
			SET @has_update = 1
		END
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Relationship Type: ' + ISNULL((SELECT
																								rpt.relationship_description
																							FROM
																								lms.relationship_type AS rpt
																							WHERE
																								(rpt.relationship_type_id = @relationship_type_id)), '') + ']'
		END

		IF (NOT @is_still_a_spouse = @is_still_a_spouse_b)
		BEGIN

			IF (@is_still_a_spouse_b = 1)
			BEGIN
				SET @still_a_spouse_b = 'YES'
			END
			ELSE
			BEGIN
				SET @still_a_spouse_b = 'NO'
			END

			IF (@is_still_a_spouse = 1)
			BEGIN
				SET @still_a_spouse = 'YES'
			END
			ELSE
			BEGIN
				SET @still_a_spouse = 'NO'
			END

			SET @transaction_done = @transaction_done + '[Is Still a Spouse Before: ' + ISNULL(@still_a_spouse_b, '') + ']' +
														'[Is Still a Spouse After: ' + ISNULL(@still_a_spouse, '') + ']'
			SET @has_update = 1

		END

		IF (@has_update = 1)
		BEGIN

			UPDATE lms.person_spouse_information SET
				relationship_type_id = @relationship_type_id,
				is_still_a_spouse = @is_still_a_spouse,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				spouse_id = @spouse_id

			SET @transaction_done = 'UPDATED a person spouse information ' +
									'[Spouse ID: ' + ISNULL(CONVERT(varchar, @spouse_id), '') +	
									'][Member ID: ' + ISNULL((SELECT
																	mbi.member_id
																FROM
																	lms.member_information AS mbi
																WHERE
																	(sysid_person = @sysid_person)), '') +
									'][Employee ID: ' + ISNULL((SELECT
																	cli.employee_id
																FROM
																	lms.collector_information AS cli
																WHERE
																	(sysid_person = @sysid_person)), '') +
									'][Person Name: ' + ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	lms.person_information AS pri
																WHERE
																	(pri.sysid_person = @sysid_person)), '') + 
									'][In Relationship With: ' + ISNULL((SELECT
																				pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																			FROM
																				lms.person_information AS pri
																			WHERE
																				(pri.sysid_person = @in_spouse_with_sysid_person)), '') + 
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
			END

			EXECUTE lms.InsertTransactionLog @edited_by, @network_information, @transaction_done

		END
		ELSE IF NOT @edited_by IS NULL
		BEGIN

			--used for the delete trigger
			UPDATE lms.person_spouse_information SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				(spouse_id = @spouse_id)

		END
		
		FETCH NEXT FROM person_spouse_information_update_cursor
			INTO @spouse_id, @sysid_person, @in_spouse_with_sysid_person, @relationship_type_id,
					@is_still_a_spouse, @edited_by

	END

	CLOSE person_spouse_information_update_cursor
	DEALLOCATE person_spouse_information_update_cursor

GO
---------------------------------------------------------------------

--verifies that the trigger "Person_Spouse_Information_Trigger_Delete" already exist
IF OBJECT_ID ('lms.Person_Spouse_Information_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER lms.Person_Spouse_Information_Trigger_Delete
GO

CREATE TRIGGER lms.Person_Spouse_Information_Trigger_Delete
	ON  lms.person_spouse_information
	FOR DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @spouse_id bigint
	DECLARE @sysid_person varchar (50)
	DECLARE @in_spouse_with_sysid_person varchar (50)
	DECLARE @relationship_type_id varchar (50)
	DECLARE @is_still_a_spouse bit

	DECLARE @deleted_by varchar (50)

	DECLARE @still_a_spouse varchar (20)

	DECLARE person_spouse_information_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.spouse_id, d.sysid_person, d.in_spouse_with_sysid_person, d.relationship_type_id,
				d.is_still_a_spouse, d.edited_by		
			FROM 
				DELETED AS d

	OPEN person_spouse_information_delete_cursor

	FETCH NEXT FROM person_spouse_information_delete_cursor
		INTO @spouse_id, @sysid_person, @in_spouse_with_sysid_person, @relationship_type_id,
				@is_still_a_spouse, @deleted_by	

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		IF (@is_still_a_spouse = 1)
		BEGIN
			SET @still_a_spouse = 'YES'
		END
		ELSE
		BEGIN
			SET @still_a_spouse = 'NO'
		END

		SET @transaction_done = 'DELETED a person spouse information ' +		
								'[Spouse ID: ' + ISNULL(CONVERT(varchar, @spouse_id), '') +	
								'][Member ID: ' + ISNULL((SELECT
																mbi.member_id
															FROM
																lms.member_information AS mbi
															WHERE
																(sysid_person = @sysid_person)), '') +
								'][Employee ID: ' + ISNULL((SELECT
																cli.employee_id
															FROM
																lms.collector_information AS cli
															WHERE
																(sysid_person = @sysid_person)), '') +
								'][Person Name: ' + ISNULL((SELECT
																pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
															FROM
																lms.person_information AS pri
															WHERE
																(pri.sysid_person = @sysid_person)), '') + 
								'][In Spouse With: ' + ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	lms.person_information AS pri
																WHERE
																	(pri.sysid_person = @in_spouse_with_sysid_person)), '') + 
								'][Relationship Type: ' + ISNULL((SELECT
																		rpt.relationship_description
																	FROM
																		lms.relationship_type AS rpt
																	WHERE
																		(rpt.relationship_type_id = @relationship_type_id)), '') +
								'][Is Still a Spouse: ' + ISNULL(@still_a_spouse, '') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @deleted_by
		END

		EXECUTE lms.InsertTransactionLog @deleted_by, @network_information, @transaction_done
		
		FETCH NEXT FROM person_spouse_information_delete_cursor
			INTO @spouse_id, @sysid_person, @in_spouse_with_sysid_person, @relationship_type_id,
					@is_still_a_spouse, @deleted_by	

	END

	CLOSE person_spouse_information_delete_cursor
	DEALLOCATE person_spouse_information_delete_cursor

GO
-----------------------------------------------------------------

-- verifies if the procedure "InsertPersonSpouseInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'InsertPersonSpouseInformation')
   DROP PROCEDURE lms.InsertPersonSpouseInformation
GO

CREATE PROCEDURE lms.InsertPersonSpouseInformation
	
	@sysid_person varchar (50) = '',
	@in_spouse_with_sysid_person varchar (50) = '',
	@relationship_type_id varchar (50) = '',
	@is_still_a_spouse bit = 0,

	@network_information varchar (MAX) = '',
	@created_by varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@created_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@created_by) = 1))		 
	BEGIN																

		EXECUTE lms.CreateTemporaryTable @created_by, @network_information

		IF (@is_still_a_spouse = 1)
		BEGIN

			UPDATE lms.person_spouse_information SET 
				is_still_a_spouse = 0, 
				edited_by = @created_by
			WHERE
				sysid_person = @sysid_person

		END

		INSERT INTO lms.person_spouse_information
		(
			sysid_person,
			in_spouse_with_sysid_person,
			relationship_type_id,
			is_still_a_spouse,

			created_by
		)
		VALUES
		(
			@sysid_person,
			@in_spouse_with_sysid_person,
			@relationship_type_id,
			@is_still_a_spouse,

			@created_by
		)

	END	
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Insert a person spouse information', 'Person Spouse Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.InsertPersonSpouseInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "UpdatePersonSpouseInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'UpdatePersonSpouseInformation')
   DROP PROCEDURE lms.UpdatePersonSpouseInformation
GO

CREATE PROCEDURE lms.UpdatePersonSpouseInformation
	
	@spouse_id bigint = 0,
	@relationship_type_id varchar (50) = '',
	@is_still_a_spouse bit = 0,

	@network_information varchar (MAX) = '',
	@edited_by varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@edited_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@edited_by) = 1))	
	BEGIN

		EXECUTE lms.CreateTemporaryTable @edited_by, @network_information

		IF (@is_still_a_spouse = 1)
		BEGIN

			UPDATE lms.person_spouse_information SET 
				@is_still_a_spouse = 0, 
				edited_by = @edited_by
			WHERE
				(sysid_person = (SELECT sysid_person FROM lms.person_spouse_information WHERE spouse_id = @spouse_id)) AND
				(NOT spouse_id = @spouse_id)

		END
		
		UPDATE lms.person_spouse_information SET
			relationship_type_id = @relationship_type_id,
			is_still_a_spouse = @is_still_a_spouse,

			edited_by = @edited_by
		WHERE
			(spouse_id = @spouse_id)

	END	
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Update a person spouse information', 'Person Spouse Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.UpdatePersonSpouseInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "DeletePersonSpouseInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'DeletePersonSpouseInformation')
   DROP PROCEDURE lms.DeletePersonSpouseInformation
GO

CREATE PROCEDURE lms.DeletePersonSpouseInformation
	
	@spouse_id bigint = 0,

	@network_information varchar (MAX) = '',
	@deleted_by varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@deleted_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@deleted_by) = 1))	
	BEGIN

		IF EXISTS (SELECT spouse_id FROM lms.person_spouse_information WHERE spouse_id = @spouse_id)
		BEGIN

			EXECUTE lms.CreateTemporaryTable @deleted_by, @network_information

			UPDATE lms.person_spouse_information SET
				edited_by = @deleted_by
			WHERE
				spouse_id = @spouse_id

			DELETE FROM lms.person_spouse_information WHERE spouse_id = @spouse_id

		END

	END	
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Delete a person spouse information', 'Person Spouse Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.DeletePersonSpouseInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDPersonSpouseInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectBySysIDPersonSpouseInformation')
   DROP PROCEDURE lms.SelectBySysIDPersonSpouseInformation
GO

CREATE PROCEDURE lms.SelectBySysIDPersonSpouseInformation
	
	@sysid_person varchar (50) = '',

	@system_user_id varchar (50) = ''
	
AS

	IF (lms.IsActiveSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.birthdate AS birthdate,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,				

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,

			psi.spouse_id AS spouse_id,
			psi.is_still_a_spouse AS is_still_a_spouse,

			rpt.relationship_type_id AS relationship_type_id,
			rpt.relationship_description AS relationship_description,
			rpt.is_parent AS is_parent,
			rpt.is_spouse AS is_spouse,
			rpt.is_sibling AS is_sibling,
			rpt.is_in_law AS is_in_law,
			rpt.is_blood_line AS is_blood_line,
			rpt.is_friend AS is_friend
			
		FROM
			lms.person_spouse_information AS psi
		INNER JOIN lms.person_information AS pri ON pri.sysid_person = psi.in_spouse_with_sysid_person
		INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = psi.relationship_type_id
		LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		WHERE
			(psi.sysid_person = @sysid_person)
		ORDER BY
			last_name, first_name, middle_name ASC

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query person spouse information', 'Person Spouse Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectBySysIDPersonSpouseInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- ########################################END TABLE "person_spouse_information" OBJECTS########################################################









-- ################################################TABLE "member_information" OBJECTS######################################################

--verifies that the trigger "Member_Information_Trigger_Insert" already exist
IF OBJECT_ID ('lms.Member_Information_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER lms.Member_Information_Trigger_Insert
GO

CREATE TRIGGER lms.Member_Information_Trigger_Insert
	ON  lms.member_information
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_member varchar (50)
	DECLARE @sysid_person varchar (50)
	DECLARE @member_id varchar (50)
	DECLARE @membership_date datetime
	DECLARE @member_type_id varchar (50)
	DECLARE @classification_id varchar (50)
	DECLARE @reason_for_membership varchar (MAX)
	DECLARE @other_coop_membership varchar (MAX)
	DECLARE @certification_information varchar (MAX)
	DECLARE @other_member_information varchar (MAX)
	DECLARE @is_active bit

	DECLARE @created_by varchar (50)

	DECLARE @active_string varchar (20)
	
	SELECT 
		@sysid_member = i.sysid_member,
		@sysid_person = i.sysid_person,
		@member_id = i.member_id,
		@membership_date = i.membership_date,
		@member_type_id = i.member_type_id,
		@classification_id = i.classification_id,
		@reason_for_membership = i.reason_for_membership,
		@other_coop_membership = i.other_coop_membership,
		@certification_information = i.certification_information,
		@other_member_information = i.other_member_information,
		@is_active = i.is_active,
		
		@created_by = i.created_by
	FROM INSERTED AS i

	IF (@is_active = 1)
	BEGIN
		SET @active_string = 'YES'
	END
	ELSE
	BEGIN
		SET @active_string = 'NO'
	END

	SET @transaction_done = 'CREATED a new member information ' + 
							'[Member System ID: ' + ISNULL(@sysid_member, '') +
							'][Member ID: ' + ISNULL(@member_id, '') +
							'][Name: ' + ISNULL((SELECT 
														pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
													FROM
														lms.person_information AS pri
													WHERE 
														(pri.sysid_person = @sysid_person)), '') +
							'][Membership Date: ' + ISNULL(CONVERT(varchar, @membership_date, 101), '') +
							'][Member Type: ' + ISNULL((SELECT
															mtp.member_type_description
														FROM
															lms.member_type AS mtp
														WHERE
															mtp.member_type_id = @member_type_id), '') +
							'][Classification: ' + ISNULL((SELECT 
																mbc.classification_description
															FROM
																lms.member_classification AS mbc
															WHERE 
																(mbc.classification_id = @classification_id)), '') +
							'][Reason for Membership: ' + ISNULL(@reason_for_membership, '') +
							'][Other Coop Membership: ' + ISNULL(@other_coop_membership, '') +
							'][Certification Information: ' + ISNULL(@certification_information, '') +
							'][Other Member Information: ' + ISNULL(@other_member_information, '') +
							'][Is Active: ' + ISNULL(@active_string, '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE lms.InsertTransactionLog @created_by, @network_information, @transaction_done

GO
-----------------------------------------------------------------

-- verifies that the trigger "Member_Information_Trigger_Instead_Update" already exist
IF OBJECT_ID ('lms.Member_Information_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER lms.Member_Information_Trigger_Instead_Update
GO

CREATE TRIGGER lms.Member_Information_Trigger_Instead_Update
	ON  lms.member_information
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar(MAX)
	DECLARE @transaction_done varchar(MAX)
	
	DECLARE @sysid_member varchar (50)
	DECLARE @sysid_person varchar (50)
	DECLARE @member_id varchar (50)
	DECLARE @membership_date datetime
	DECLARE @member_type_id varchar (50)
	DECLARE @classification_id varchar (50)
	DECLARE @reason_for_membership varchar (MAX)
	DECLARE @other_coop_membership varchar (MAX)
	DECLARE @certification_information varchar (MAX)
	DECLARE @other_member_information varchar (MAX)
	DECLARE @is_active bit

	DECLARE @edited_by varchar(50)

	DECLARE @member_id_b varchar (50)
	DECLARE @membership_date_b datetime
	DECLARE @member_type_id_b varchar (50)
	DECLARE @classification_id_b varchar (50)
	DECLARE @reason_for_membership_b varchar (MAX)
	DECLARE @other_coop_membership_b varchar (MAX)
	DECLARE @certification_information_b varchar (MAX)
	DECLARE @other_member_information_b varchar (MAX)
	DECLARE @is_active_b bit
	
	DECLARE @active_string varchar (20)
	DECLARE @active_string_b varchar (20)

	DECLARE @has_update bit

	DECLARE member_information_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.sysid_member, i.sysid_person, i.member_id, i.membership_date, i.member_type_id, i.classification_id, i.reason_for_membership,
					i.other_coop_membership, i.certification_information, i.other_member_information, i.is_active, i.edited_by
				FROM INSERTED AS i

	OPEN member_information_update_cursor

	FETCH NEXT FROM member_information_update_cursor
		INTO @sysid_member, @sysid_person, @member_id, @membership_date, @member_type_id, @classification_id, @reason_for_membership,
					@other_coop_membership, @certification_information, @other_member_information, @is_active, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		SELECT 
			@member_id_b = mbi.member_id,
			@membership_date_b = mbi.membership_date,
			@member_type_id_b = mbi.member_type_id,
			@classification_id_b = mbi.classification_id,
			@reason_for_membership_b = mbi.reason_for_membership,
			@other_coop_membership_b = mbi.other_coop_membership,
			@certification_information_b = mbi.certification_information,
			@other_member_information_b = mbi.other_member_information,
			@is_active_b = mbi.is_active
		FROM 
			lms.member_information AS mbi
		WHERE
			mbi.sysid_member = @sysid_member

		SET @transaction_done = ''
		SET @has_update = 0

		IF (NOT ISNULL(@member_id COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@member_id_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Member ID Before: ' + ISNULL(@member_id_b, '') + ']' +
														'[Member ID After: ' + ISNULL(@member_id, '') + ']'
			SET @has_update = 1
		END
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Member ID: ' + ISNULL(@member_id, '') + ']'
		END

		IF NOT ISNULL(CONVERT(varchar, @membership_date, 101), '') = ISNULL(CONVERT(varchar, @membership_date_b, 101), '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Membership Date Before: ' + ISNULL(CONVERT(varchar, @membership_date_b, 101), '') + ']' +
														'[Membership Date After: ' + ISNULL(CONVERT(varchar, @membership_date, 101), '') + ']'
			SET @has_update = 1	
		END

		IF (NOT ISNULL(@member_type_id COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@member_type_id_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Member Type Before: ' + ISNULL((SELECT
																								mtp.member_type_description
																							FROM
																								lms.member_type AS mtp
																							WHERE
																								mtp.member_type_id = @member_type_id_b), '') + ']' +
														'[Member Type After: ' + ISNULL((SELECT
																								mtp.member_type_description
																							FROM
																								lms.member_type AS mtp
																							WHERE
																								mtp.member_type_id = @member_type_id), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@classification_id COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@classification_id_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Classification Before: ' + ISNULL((SELECT 
																									mbc.classification_description
																								FROM
																									lms.member_classification AS mbc
																								WHERE 
																									(mbc.classification_id = @classification_id_b)), '') + ']' +
														'[Classification After: ' + ISNULL((SELECT 
																									mbc.classification_description
																								FROM
																									lms.member_classification AS mbc
																								WHERE 
																									(mbc.classification_id = @classification_id)), '') + ']'
			SET @has_update = 1
		END
		
		IF (NOT ISNULL(@reason_for_membership COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@reason_for_membership_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Reason for Membership Before: ' + ISNULL(@reason_for_membership_b, '') + ']' +
														'[Reason for Membership After: ' + ISNULL(@reason_for_membership, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@other_coop_membership COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@other_coop_membership_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Other Coop Membership Before: ' + ISNULL(@other_coop_membership_b, '') + ']' +
														'[Other Coop Membership After: ' + ISNULL(@other_coop_membership, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@certification_information COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@certification_information_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Certification Information Before: ' + ISNULL(@certification_information_b, '') + ']' +
														'[Certification Information After: ' + ISNULL(@certification_information, '') + ']'
			SET @has_update = 1
		END		

		IF (NOT ISNULL(@other_member_information COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@other_member_information_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Other Member Information Before: ' + ISNULL(@other_member_information_b, '') + ']' +
														'[Other Member Information After: ' + ISNULL(@other_member_information, '') + ']'
			SET @has_update = 1
		END

		IF (NOT @is_active = @is_active_b)
		BEGIN

			IF (@is_active_b = 1)
			BEGIN
				SET @active_string_b = 'YES'
			END
			ELSE
			BEGIN
				SET @active_string_b = 'NO'
			END

			IF (@is_active = 1)
			BEGIN
				SET @active_string = 'YES'
			END
			ELSE
			BEGIN
				SET @active_string = 'NO'
			END

			SET @transaction_done = @transaction_done + '[Is Active Before: ' + ISNULL(@active_string_b, '') + ']' +
														'[Is Active After: ' + ISNULL(@active_string, '') + ']'
			SET @has_update = 1

		END

		IF (@has_update = 1)
		BEGIN

			UPDATE lms.member_information SET
				member_id = @member_id,
				membership_date = @membership_date,
				member_type_id = @member_type_id,
				classification_id = @classification_id,
				reason_for_membership = @reason_for_membership,
				other_coop_membership = @other_coop_membership,
				certification_information = @certification_information,
				other_member_information = @other_member_information,
				is_active = @is_active,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				sysid_member = @sysid_member

			SET @transaction_done = 'UPDATED a member information ' + 
									'[Member System ID: ' + ISNULL(@sysid_member, '') +
									'][Name: ' + ISNULL((SELECT 
																pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
															FROM
																lms.person_information AS pri
															WHERE 
																(pri.sysid_person = @sysid_person)), '') +
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
			END

			EXECUTE lms.InsertTransactionLog @edited_by, @network_information, @transaction_done

		END
				
		FETCH NEXT FROM member_information_update_cursor
			INTO @sysid_member, @sysid_person, @member_id, @membership_date, @member_type_id, @classification_id, @reason_for_membership,
						@other_coop_membership, @certification_information, @other_member_information, @is_active, @edited_by

	END

	CLOSE member_information_update_cursor
	DEALLOCATE member_information_update_cursor

GO
---------------------------------------------------------------------

-- verifies that the trigger "Member_Information_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('lms.Member_Information_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER lms.Member_Information_Trigger_Instead_Delete
GO

CREATE TRIGGER lms.Member_Information_Trigger_Instead_Delete
	ON  lms.member_information
	INSTEAD OF DELETE
	NOT FOR REPLICATION
AS 

	EXECUTE lms.ShowErrorMsg 'Delete a member information', 'Member Information'
	
GO
-------------------------------------------------------------------------

-- verifies if the procedure "InsertMemberInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'InsertMemberInformation')
   DROP PROCEDURE lms.InsertMemberInformation
GO

CREATE PROCEDURE lms.InsertMemberInformation
	
	@sysid_member varchar (50) = '',
	@member_id varchar (50) = '',
	@membership_date datetime,
	@member_type_id varchar (50) = '',
	@classification_id varchar (50) = '',
	@reason_for_membership varchar (MAX) = '',
	@other_coop_membership varchar (MAX) = '',
	@certification_information varchar (MAX) = '', 
	@other_member_information varchar (MAX) = '',
	@is_active bit = 0,

	@sysid_person varchar (50) = '',

	@network_information varchar(MAX) = '',
	@created_by varchar(50)
	
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@created_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@created_by) = 1))
	BEGIN

		EXECUTE lms.CreateTemporaryTable @created_by, @network_information

		INSERT INTO lms.member_information
		(
			sysid_member,
			member_id,
			membership_date,
			member_type_id,
			classification_id,
			reason_for_membership,
			other_coop_membership,
			certification_information, 
			other_member_information,
			is_active,

			sysid_person,

			created_by
		)
		VALUES
		(
			@sysid_member,
			@member_id,
			@membership_date,
			@member_type_id,
			@classification_id,
			@reason_for_membership,
			@other_coop_membership,
			@certification_information, 
			@other_member_information,
			@is_active,

			@sysid_person,

			@created_by
		)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Insert a member information', 'Member Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.InsertMemberInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "UpdateMemberInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'UpdateMemberInformation')
   DROP PROCEDURE lms.UpdateMemberInformation
GO

CREATE PROCEDURE lms.UpdateMemberInformation
	
	@sysid_member varchar (50) = '',
	@member_type_id varchar (50) = '',
	@classification_id varchar (50) = '',
	@reason_for_membership varchar (MAX) = '',
	@other_coop_membership varchar (MAX) = '',
	@certification_information varchar (MAX) = '', 
	@other_member_information varchar (MAX) = '',
	@is_active bit = 0,

	@network_information varchar(MAX) = '',
	@edited_by varchar(50)
	
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@edited_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@edited_by) = 1))
	BEGIN

		EXECUTE lms.CreateTemporaryTable @edited_by, @network_information

		UPDATE lms.member_information SET
			member_type_id = @member_type_id,
			classification_id = @classification_id,
			reason_for_membership = @reason_for_membership,
			other_coop_membership = @other_coop_membership,
			certification_information = @certification_information,
			other_member_information = @other_member_information,
			is_active = @is_active,

			edited_by = @edited_by
		WHERE
			sysid_member = @sysid_member

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Update a member information', 'Member Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.UpdateMemberInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectMemberInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectMemberInformation')
   DROP PROCEDURE lms.SelectMemberInformation
GO

CREATE PROCEDURE lms.SelectMemberInformation

	@query_string varchar (50) = '',
	@office_employer_id_list nvarchar (MAX) = '',
	@member_type_id_list nvarchar (MAX) = '',
	@classification_id_list nvarchar (MAX) = '',
	@sysid_member_exclude_list nvarchar (MAX) = '',
	@include_member_status bit = 0,
	@is_active bit = 0,

	@system_user_id varchar (50) = ''
		
AS

	IF lms.IsActiveSystemUserInfo(@system_user_id) = 1
	BEGIN

		-- A - '*'
		-- B - Office ID
		-- C - Member Type ID
		-- D - Classification ID
		-- E - Member SysID Exlude
		-- F - Include Member Status

		--NOTE: Add exclude sysid_member for the member_relationship_information table query

		--	A	B	C	D	E	F
		-- ======================
		--	0	0	0	0	0	0
		--	0	0	0	0	0	1
		--	0	0	0	0	1	0	
		--	0	0	0	0	1	1	
		--	0	0	0	1	0	0
		--	0	0	0	1	0	1	
		--	0	0	0	1	1	0	
		--	0	0	0	1	1	1	
		--	0	0	1	0	0	0
		--	0	0	1	0	0	1	
		--	0	0	1	0	1	0	
		--	0	0	1	0	1	1	
		--	0	0	1	1	0	0
		--	0	0	1	1	0	1	
		--	0	0	1	1	1	0	
		--	0	0	1	1	1	1	
		--	0	1	0	0	0	0	
		--	0	1	0	0	0	1
		--	0	1	0	0	1	0
		--	0	1	0	0	1	1
		--	0	1	0	1	0	0
		--	0	1	0	1	0	1
		--	0	1	0	1	1	0
		--	0	1	0	1	1	1
		--	0	1	1	0	0	0
		--	0	1	1	0	0	1
		--	0	1	1	0	1	0
		--	0	1	1	0	1	1
		--	0	1	1	1	0	0
		--	0	1	1	1	0	1
		--	0	1	1	1	1	0
		--	0	1	1	1	1	1
		--	1	0	0	0	0	0
		--	1	0	0	0	0	1
		--	1	0	0	0	1	0	
		--	1	0	0	0	1	1	
		--	1	0	0	1	0	0
		--	1	0	0	1	0	1	
		--	1	0	0	1	1	0	
		--	1	0	0	1	1	1	
		--	1	0	1	0	0	0
		--	1	0	1	0	0	1	
		--	1	0	1	0	1	0	
		--	1	0	1	0	1	1	
		--	1	0	1	1	0	0
		--	1	0	1	1	0	1	
		--	1	0	1	1	1	0	
		--	1	0	1	1	1	1	
		--	1	1	0	0	0	0	
		--	1	1	0	0	0	1
		--	1	1	0	0	1	0
		--	1	1	0	0	1	1
		--	1	1	0	1	0	0
		--	1	1	0	1	0	1
		--	1	1	0	1	1	0
		--	1	1	0	1	1	1
		--	1	1	1	0	0	0
		--	1	1	1	0	0	1
		--	1	1	1	0	1	0
		--	1	1	1	0	1	1
		--	1	1	1	1	0	0
		--	1	1	1	1	0	1
		--	1	1	1	1	1	0
		--	1	1	1	1	1	1

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (000000)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END		
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (000001)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				(mbi.is_active = @is_active) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (000010)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (000011)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END 
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (000100)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (000101)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (000110)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (000111)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END		
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (001000)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END		
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (001001)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (001010)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (001011)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END 
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (001100)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (001101)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (001110)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (001111)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END		
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (010000)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (010001)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				(mbi.is_active = @is_active) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (010010)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (010011)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (010100)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (010101)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (010110)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (010111)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (011000)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (011001)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (011010)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (011011)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (011100)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (011101)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (011110)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (011111)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL) AND
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (100000)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END		
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (100001)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				(mbi.is_active = @is_active)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (100010)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (100011)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END 
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (100100)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (100101)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (100110)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (100111)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END		
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (101000)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END	
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (101001)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END	
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (101010)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (101011)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END 
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (101100)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (101101)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (101110)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@office_employer_id_list, '') = '') AND			-- (101111)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END		
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (110000)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (110001)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				(mbi.is_active = @is_active)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (110010)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (110011)
				(ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (110100)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (110101)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (110110)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (110111)
				(ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (111000)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (111001)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (111010)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (111011)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (111100)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (111101)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (111110)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 0)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@office_employer_id_list, '') = '') AND			-- (111111)
				(NOT ISNULL(@member_type_id_list, '') = '') AND (NOT ISNULL(@classification_id_list, '') = '') AND 
				(NOT ISNULL(@sysid_member_exclude_list, '') = '') AND (@include_member_status = 1)
		BEGIN

			SELECT		--WITH OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL)
			UNION ALL
			SELECT		--WITH OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			INNER JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITH APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			INNER JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL)
			UNION ALL
			SELECT		--WITHOUT OFFICE AND WITHOUT APPOINTMENT STATUS
				mbi.sysid_member AS sysid_member,
				mbi.member_id AS member_id,
				ISNULL(CONVERT(varchar, mbi.membership_date), '') AS membership_date_string,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				beneficiary_pri.last_name AS beneficiary_last_name,
				beneficiary_pri.first_name AS beneficiary_first_name,
				beneficiary_pri.middle_name AS beneficiary_middle_name,
				beneficiary_pri.present_address AS beneficiary_present_address,
				beneficiary_pri.present_phone_nos AS beneficiary_present_phone_nos,
				beneficiary_pri.home_address AS beneficiary_home_address,
				beneficiary_pri.home_phone_nos AS beneficiary_home_phone_nos,
				beneficiary_pri.relationship_description AS beneficiary_relationship_description,

				--mbi.member_type_id
				mtp.member_type_id AS member_type_id,
				mtp.member_type_description AS member_type_description,

				--mbi.classification_id
				mbc.classification_id AS classification_id,
				mbc.classification_description AS classification_description,

				--pri.office_employer_id
				oei.office_employer_id AS office_employer_id,
				oei.office_employer_name AS office_employer_name,
				oei.office_employer_acronym AS office_office_employer_acronym,
				oei.office_employer_address AS office_employer_address,
				oei.office_employer_phone_nos AS office_employer_phone_nos,

				--pri.appointment_status_code
				crf_appointment_status_code.code_reference_id AS appointment_status_code_code_reference_id,
				crf_appointment_status_code.code_entity_id AS appointment_status_code_code_entity_id,
				crf_appointment_status_code.reference_code AS appointment_status_code_reference_code,
				crf_appointment_status_code.code_description AS appointment_status_code_code_description,
				crf_appointment_status_code.reference_flag AS appointment_status_code_reference_flag
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						pbi.sysid_person AS sysid_person,
						pri_pbi.last_name AS last_name,
						pri_pbi.first_name AS first_name,
						pri_pbi.middle_name AS middle_name,
						pri_pbi.present_address AS present_address,
						pri_pbi.present_phone_nos AS present_phone_nos,
						pri_pbi.home_address AS home_address,
						pri_pbi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						lms.person_beneficiary_information AS pbi
					INNER JOIN lms.person_information AS pri_pbi ON pri_pbi.sysid_person = pbi.in_relationship_with_sysid_person
					INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = pbi.relationship_type_id
					WHERE
						(pbi.is_primary_beneficiary = 1)			
					
				) AS beneficiary_pri ON beneficiary_pri.sysid_person = pri.sysid_person

			INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
			INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id

			LEFT JOIN lms.office_employer_information AS oei ON oei.office_employer_id = pri.office_employer_id
			LEFT JOIN lms.code_reference AS crf_appointment_status_code ON crf_appointment_status_code.code_reference_id = pri.appointment_status_code
			INNER JOIN lms.IterateListToTable (@office_employer_id_list, ',') AS oeid_list ON oeid_list.var_str = oei.office_employer_id
			INNER JOIN lms.IterateListToTable (@classification_id_list, ',') AS cid_list ON cid_list.var_str = mbc.classification_id
			LEFT JOIN lms.IterateListToTable (@sysid_member_exclude_list, ',') AS smel_list ON smel_list.var_str = mbi.sysid_member
			INNER JOIN lms.IterateListToTable (@member_type_id_list, ',') AS mtid_list ON mtid_list.var_str = mtp.member_type_id
			WHERE
				(mbi.is_active = @is_active) AND
				(smel_list.var_str IS NULL) AND
				(oei.office_employer_id IS NULL) AND
				(crf_appointment_status_code.code_reference_id IS NULL)
			ORDER BY
				last_name, first_name, middle_name, member_id ASC

		END
		
	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a member information', 'Member Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectMemberInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectByMemberIDMemberInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectByMemberIDMemberInformation')
   DROP PROCEDURE lms.SelectByMemberIDMemberInformation
GO

CREATE PROCEDURE lms.SelectByMemberIDMemberInformation

	@member_id varchar (50) = '',
	@system_user_id varchar (50) = ''
		
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsLoanOfficerSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsBookkeeperSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDisbursementOfficerSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsCashierSystemUserInfo(@system_user_id) = 1))
	BEGIN

		SELECT		
			mbi.sysid_member AS sysid_member,
			mbi.member_id AS member_id,
			mbi.membership_date AS membership_date,
			mbi.reason_for_membership AS reason_for_membership,
			mbi.other_coop_membership AS other_coop_membership,
			mbi.certification_information AS certification_information,
			mbi.other_member_information AS other_member_information,
			mbi.is_active AS is_active,

			mbi.sysid_person AS sysid_person,

			--mbi.member_type_id
			mtp.member_type_id AS member_type_id,
			mtp.member_type_description AS member_type_description,

			--mbi.classification_id
			mbc.classification_id AS classification_id,
			mbc.classification_description AS classification_description
			
		FROM
			lms.member_information AS mbi
		INNER JOIN lms.member_type AS mtp ON mtp.member_type_id = mbi.member_type_id
		INNER JOIN lms.member_classification AS mbc ON mbc.classification_id = mbi.classification_id
		WHERE
			(mbi.member_id = @member_id)
		
	END
	ELSE
	BEGIN				
		
		EXECUTE lms.ShowErrorMsg 'Query a member information', 'Member Information'
		
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectByMemberIDMemberInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDPersonMemberInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectBySysIDPersonMemberInformation')
   DROP PROCEDURE lms.SelectBySysIDPersonMemberInformation
GO

CREATE PROCEDURE lms.SelectBySysIDPersonMemberInformation

	@sysid_person varchar (50) = '',
	@system_user_id varchar (50) = ''
		
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsLoanOfficerSystemUserInfo(@system_user_id) = 1))
	BEGIN

		SELECT 
			mbi.member_id AS member_id
		FROM
			lms.member_information AS mbi
		WHERE 
			(mbi.sysid_person = @sysid_person)
		
	END
	ELSE
	BEGIN				
		
		EXECUTE lms.ShowErrorMsg 'Query a member information', 'Member Information'
		
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectBySysIDPersonMemberInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectCountMemberInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectCountMemberInformation')
   DROP PROCEDURE lms.SelectCountMemberInformation
GO

CREATE PROCEDURE lms.SelectCountMemberInformation

	@system_user_id varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1))
	BEGIN
		
		SELECT COUNT(mbi.sysid_member) FROM lms.member_information AS mbi

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a member information', 'Member Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectCountMemberInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectCountForMemberIDMemberInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectCountForMemberIDMemberInformation')
   DROP PROCEDURE lms.SelectCountForMemberIDMemberInformation
GO

CREATE PROCEDURE lms.SelectCountForMemberIDMemberInformation

	@membership_year int = 0,

	@system_user_id varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1))
	BEGIN
		
		SELECT 
			COUNT(mbi.sysid_member) 
		FROM 
			lms.member_information AS mbi
		WHERE
			(YEAR(mbi.membership_date) = @membership_year)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a member information', 'Member Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectCountForMemberIDMemberInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsSysIDMemberInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'IsExistsSysIDMemberInformation')
   DROP PROCEDURE lms.IsExistsSysIDMemberInformation
GO

CREATE PROCEDURE lms.IsExistsSysIDMemberInformation

	@sysid_member varchar (50) = '',
	@system_user_id varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1))
	BEGIN
		
		SELECT lms.IsExistsSysIDMemberInfo(@sysid_member)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a member information', 'Member Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.IsExistsSysIDMemberInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsMemberIDMemberInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'IsExistsMemberIDMemberInformation')
   DROP PROCEDURE lms.IsExistsMemberIDMemberInformation
GO

CREATE PROCEDURE lms.IsExistsMemberIDMemberInformation

	@sysid_member varchar (50) = '',
	@member_id varchar (50) = '',
	@system_user_id varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@system_user_id) = 1))
	BEGIN
		
		SELECT lms.IsExistsMemberIDMemberInfo(@sysid_member, @member_id)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a member information', 'Member Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.IsExistsSysIDMemberInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the "IsExistsSysIDMemberInfo" function already exist
IF OBJECT_ID (N'lms.IsExistsSysIDMemberInfo') IS NOT NULL
   DROP FUNCTION lms.IsExistsSysIDMemberInfo
GO

CREATE FUNCTION lms.IsExistsSysIDMemberInfo
(	
	@sysid_member varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT sysid_member FROM lms.member_information WHERE sysid_member = @sysid_member)
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "IsExistsMemberIDMemberInfo" function already exist
IF OBJECT_ID (N'lms.IsExistsMemberIDMemberInfo') IS NOT NULL
   DROP FUNCTION lms.IsExistsMemberIDMemberInfo
GO

CREATE FUNCTION lms.IsExistsMemberIDMemberInfo
(	
	@sysid_member varchar (50) = '',
	@member_id varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT sysid_member FROM lms.member_information WHERE ((REPLACE(member_id, ' ', '')) LIKE REPLACE(@member_id, ' ', '')) AND NOT sysid_member = @sysid_member) OR
		EXISTS (SELECT sysid_collector FROM lms.collector_information WHERE ((REPLACE(employee_id, ' ', '')) LIKE REPLACE(@member_id, ' ', '')))
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- ##############################################END TABLE "member_information" OBJECTS######################################################





-- ##########################################TABLE "member_relationship_information" OBJECTS########################################################

-- verifies if the member_relationship_information table exists
IF OBJECT_ID('lms.member_relationship_information', 'U') IS NOT NULL
	DROP TABLE lms.member_relationship_information
GO

CREATE TABLE lms.member_relationship_information 			
(
	relationship_id bigint NOT NULL IDENTITY (1, 1) NOT FOR REPLICATION
		CONSTRAINT Member_Relationship_Information_Relationship_ID_PK PRIMARY KEY (relationship_id),
	sysid_member varchar (50) NOT NULL 
		CONSTRAINT Member_Relationship_Information_SysID_Member_FK FOREIGN KEY REFERENCES lms.member_information(sysid_member) ON UPDATE NO ACTION
		CONSTRAINT Member_Relationship_Information_SysID_Person_UQ UNIQUE (sysid_member, in_relationship_with_sysid_member),
	in_relationship_with_sysid_member varchar (50) NOT NULL
		CONSTRAINT Member_Relationship_Information_In_Relationship_With_SysID_Member_FK FOREIGN KEY REFERENCES lms.member_information(sysid_member) ON UPDATE NO ACTION
		CONSTRAINT Member_Relationship_Information_In_Relationship_With_SysID_Member_UQ UNIQUE (in_relationship_with_sysid_member, sysid_member),
	relationship_type_id varchar (50) NOT NULL
		CONSTRAINT Member_Relationship_Information_Relationship_Type_ID_FK FOREIGN KEY REFERENCES lms.relationship_type(relationship_type_id) ON UPDATE NO ACTION,

	created_on datetime NOT NULL DEFAULT (GETDATE()),
	created_by varchar (50) NOT NULL
		CONSTRAINT Member_Relationship_Information_Created_By_FK FOREIGN KEY REFERENCES lms.system_user_info(system_user_id) ON UPDATE NO ACTION,
	edited_on datetime NULL,
	edited_by varchar (50) NULL	
		CONSTRAINT Member_Relationship_Information_Edited_By_FK FOREIGN KEY REFERENCES lms.system_user_info(system_user_id) ON UPDATE NO ACTION,

	unique_id uniqueidentifier ROWGUIDCOL NOT NULL DEFAULT NEWSEQUENTIALID()
		CONSTRAINT Member_Relationship_Information_Unique_ID_UQ UNIQUE (unique_id)
	
) ON [PRIMARY]
GO
------------------------------------------------------------------

-- create an index of the member_relationship_information table 
CREATE INDEX Member_Relationship_Information_Relationship_ID_Index
	ON lms.member_relationship_information (relationship_id ASC)
GO
------------------------------------------------------------------

-- verifies that the trigger "Member_Relationship_Information_Trigger_Insert" already exist
IF OBJECT_ID ('lms.Member_Relationship_Information_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER lms.Member_Relationship_Information_Trigger_Insert
GO
		
CREATE TRIGGER lms.Member_Relationship_Information_Trigger_Insert
	ON  lms.member_relationship_information
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar (MAX)

	DECLARE @relationship_id bigint
	DECLARE @sysid_member varchar (50)
	DECLARE @in_relationship_with_sysid_member varchar (50)
	DECLARE @relationship_type_id varchar (50)
	
	DECLARE @created_by varchar (50)
	
	SELECT 
		@relationship_id = i.relationship_id,
		@sysid_member = i.sysid_member,
		@in_relationship_with_sysid_member = i.in_relationship_with_sysid_member,
		@relationship_type_id = i.relationship_type_id,

		@created_by = i.created_by		
	FROM INSERTED AS i

	SET @transaction_done = 'CREATED a relationship with another existing member  ' +		
							'[Relationship ID: ' + ISNULL(CONVERT(varchar, @relationship_id), '') +	
							'][Member ID: ' + ISNULL((SELECT
															mbi.member_id
														FROM
															lms.member_information AS mbi
														WHERE
															(mbi.sysid_member = @sysid_member)), '') +
							'][Employee ID: ' + ISNULL((SELECT
															cli.employee_id
														FROM
															lms.collector_information AS cli
														INNER JOIN lms.person_information AS pri ON pri.sysid_person = cli.sysid_person
														INNER JOIN lms.member_information AS mbi ON mbi.sysid_person = pri.sysid_person
														WHERE
															(mbi.sysid_member = @sysid_member)), '') +
							'][Member Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															lms.person_information AS pri
														INNER JOIN lms.member_information AS mbi ON mbi.sysid_person = pri.sysid_person
														WHERE
															(mbi.sysid_member = @sysid_member)), '') + 
							'][In Relationship With: ' + ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	lms.person_information AS pri
																INNER JOIN lms.member_information AS mbi ON mbi.sysid_person = pri.sysid_person
																WHERE
																	(mbi.sysid_member = @in_relationship_with_sysid_member)), '') + 
							'][Relationship Type: ' + ISNULL((SELECT
																	rpt.relationship_description
																FROM
																	lms.relationship_type AS rpt
																WHERE
																	(rpt.relationship_type_id = @relationship_type_id)), '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @created_by
	END

	EXECUTE lms.InsertTransactionLog @created_by, @network_information, @transaction_done

GO
-------------------------------------------------------------------

-- verifies that the trigger "Member_Relationship_Information_Trigger_Instead_Update" already exist
IF OBJECT_ID ('lms.Member_Relationship_Information_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER lms.Member_Relationship_Information_Trigger_Instead_Update
GO

CREATE TRIGGER lms.Member_Relationship_Information_Trigger_Instead_Update
	ON  lms.member_relationship_information
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar(MAX)
	DECLARE @transaction_done varchar(MAX)
	
	DECLARE @relationship_id bigint
	DECLARE @sysid_member varchar (50)
	DECLARE @in_relationship_with_sysid_member varchar (50)
	DECLARE @relationship_type_id varchar (50)

	DECLARE @edited_by varchar(50)

	DECLARE @relationship_type_id_b varchar (50)

	DECLARE @has_update bit

	DECLARE member_relationship_information_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.relationship_id, i.sysid_member, i.in_relationship_with_sysid_member, i.relationship_type_id, i.edited_by
			FROM 
				INSERTED AS i

	OPEN member_relationship_information_update_cursor

	FETCH NEXT FROM member_relationship_information_update_cursor
		INTO @relationship_id, @sysid_member, @in_relationship_with_sysid_member, @relationship_type_id, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		SELECT 
			@relationship_type_id_b = mri.relationship_type_id
		FROM 
			lms.member_relationship_information AS mri
		WHERE
			mri.relationship_id = @relationship_id

		SET @transaction_done = ''
		SET @has_update = 0

		IF (NOT ISNULL(@relationship_type_id, '') = ISNULL(@relationship_type_id_b, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Relationship Type Before: ' + ISNULL((SELECT
																									rpt.relationship_description
																								FROM
																									lms.relationship_type AS rpt
																								WHERE
																									(rpt.relationship_type_id = @relationship_type_id_b)), '') + ']' +
														'[Relationship Type After: ' + ISNULL((SELECT
																									rpt.relationship_description
																								FROM
																									lms.relationship_type AS rpt
																								WHERE
																									(rpt.relationship_type_id = @relationship_type_id)), '') + ']'
			SET @has_update = 1
		END
		

		IF (@has_update = 1)
		BEGIN

			UPDATE lms.member_relationship_information SET
				relationship_type_id = @relationship_type_id,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				relationship_id = @relationship_id

			SET @transaction_done = 'UPDATED a relationship with another existing member  ' +		
									'[Relationship ID: ' + ISNULL(CONVERT(varchar, @relationship_id), '') +	
									'][Member ID: ' + ISNULL((SELECT
																	mbi.member_id
																FROM
																	lms.member_information AS mbi
																WHERE
																	(mbi.sysid_member = @sysid_member)), '') +
									'][Employee ID: ' + ISNULL((SELECT
																	cli.employee_id
																FROM
																	lms.collector_information AS cli
																INNER JOIN lms.person_information AS pri ON pri.sysid_person = cli.sysid_person
																INNER JOIN lms.member_information AS mbi ON mbi.sysid_person = pri.sysid_person
																WHERE
																	(mbi.sysid_member = @sysid_member)), '') +
									'][Member Name: ' + ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	lms.person_information AS pri
																INNER JOIN lms.member_information AS mbi ON mbi.sysid_person = pri.sysid_person
																WHERE
																	(mbi.sysid_member = @sysid_member)), '') + 
									'][In Relationship With: ' + ISNULL((SELECT
																			pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																		FROM
																			lms.person_information AS pri
																		INNER JOIN lms.member_information AS mbi ON mbi.sysid_person = pri.sysid_person
																		WHERE
																			(mbi.sysid_member = @in_relationship_with_sysid_member)), '') + 
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
			END

			EXECUTE lms.InsertTransactionLog @edited_by, @network_information, @transaction_done

		END
		ELSE IF NOT @edited_by IS NULL
		BEGIN

			--used for the delete trigger
			UPDATE lms.member_relationship_information SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				(relationship_id = @relationship_id)

		END
		
		FETCH NEXT FROM member_relationship_information_update_cursor
			INTO @relationship_id, @sysid_member, @in_relationship_with_sysid_member, @relationship_type_id, @edited_by

	END

	CLOSE member_relationship_information_update_cursor
	DEALLOCATE member_relationship_information_update_cursor

GO
---------------------------------------------------------------------

--verifies that the trigger "Member_Relationship_Information_Trigger_Delete" already exist
IF OBJECT_ID ('lms.Member_Relationship_Information_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER lms.Member_Relationship_Information_Trigger_Delete
GO

CREATE TRIGGER lms.Member_Relationship_Information_Trigger_Delete
	ON  lms.member_relationship_information
	FOR DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @relationship_id bigint
	DECLARE @sysid_member varchar (50)
	DECLARE @in_relationship_with_sysid_member varchar (50)
	DECLARE @relationship_type_id varchar (50)

	DECLARE @deleted_by varchar (50)

	DECLARE member_relationship_information_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.relationship_id, d.sysid_member, d.in_relationship_with_sysid_member, d.relationship_type_id, d.edited_by		
			FROM 
				DELETED AS d

	OPEN member_relationship_information_delete_cursor

	FETCH NEXT FROM member_relationship_information_delete_cursor
		INTO @relationship_id, @sysid_member, @in_relationship_with_sysid_member, @relationship_type_id, @deleted_by	

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		SET @transaction_done = 'DELETED a relationship with another existing member  ' +		
								'[Relationship ID: ' + ISNULL(CONVERT(varchar, @relationship_id), '') +	
								'][Member ID: ' + ISNULL((SELECT
																mbi.member_id
															FROM
																lms.member_information AS mbi
															WHERE
																(mbi.sysid_member = @sysid_member)), '') +
								'][Employee ID: ' + ISNULL((SELECT
																cli.employee_id
															FROM
																lms.collector_information AS cli
															INNER JOIN lms.person_information AS pri ON pri.sysid_person = cli.sysid_person
															INNER JOIN lms.member_information AS mbi ON mbi.sysid_person = pri.sysid_person
															WHERE
																(mbi.sysid_member = @sysid_member)), '') +
								'][Member Name: ' + ISNULL((SELECT
																pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
															FROM
																lms.person_information AS pri
															INNER JOIN lms.member_information AS mbi ON mbi.sysid_person = pri.sysid_person
															WHERE
																(mbi.sysid_member = @sysid_member)), '') + 
								'][In Relationship With: ' + ISNULL((SELECT
																		pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																	FROM
																		lms.person_information AS pri
																	INNER JOIN lms.member_information AS mbi ON mbi.sysid_person = pri.sysid_person
																	WHERE
																		(mbi.sysid_member = @in_relationship_with_sysid_member)), '') + 
								'][Relationship Type: ' + ISNULL((SELECT
																		rpt.relationship_description
																	FROM
																		lms.relationship_type AS rpt
																	WHERE
																		(rpt.relationship_type_id = @relationship_type_id)), '') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @deleted_by
		END

		EXECUTE lms.InsertTransactionLog @deleted_by, @network_information, @transaction_done
		
		FETCH NEXT FROM member_relationship_information_delete_cursor
			INTO @relationship_id, @sysid_member, @in_relationship_with_sysid_member, @relationship_type_id, @deleted_by

	END

	CLOSE member_relationship_information_delete_cursor
	DEALLOCATE member_relationship_information_delete_cursor

GO
-----------------------------------------------------------------

-- verifies if the procedure "InsertMemberRelationshipInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'InsertMemberRelationshipInformation')
   DROP PROCEDURE lms.InsertMemberRelationshipInformation
GO

CREATE PROCEDURE lms.InsertMemberRelationshipInformation
	
	@sysid_member varchar (50) = '',
	@in_relationship_with_sysid_member varchar (50) = '',
	@relationship_type_id varchar (50) = '',

	@network_information varchar (MAX) = '',
	@created_by varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@created_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@created_by) = 1))		 
	BEGIN																

		EXECUTE lms.CreateTemporaryTable @created_by, @network_information

		INSERT INTO lms.member_relationship_information
		(
			sysid_member,
			in_relationship_with_sysid_member,
			relationship_type_id,

			created_by
		)
		VALUES
		(
			@sysid_member,
			@in_relationship_with_sysid_member,
			@relationship_type_id,

			@created_by
		)

	END	
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Insert a member relationship information', 'Member Relationship Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.InsertMemberRelationshipInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "UpdateMemberRelationshipInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'UpdateMemberRelationshipInformation')
   DROP PROCEDURE lms.UpdateMemberRelationshipInformation
GO

CREATE PROCEDURE lms.UpdateMemberRelationshipInformation
	
	@relationship_id bigint = 0,
	@relationship_type_id varchar (50) = '',

	@network_information varchar (MAX) = '',
	@edited_by varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@edited_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@edited_by) = 1))	
	BEGIN

		EXECUTE lms.CreateTemporaryTable @edited_by, @network_information

		UPDATE lms.member_relationship_information SET
			relationship_type_id = @relationship_type_id,

			edited_by = @edited_by
		WHERE
			(relationship_id = @relationship_id)

	END	
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Update a member relationship information', 'Member Relationship Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.UpdateMemberRelationshipInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "DeleteMemberRelationshipInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'DeleteMemberRelationshipInformation')
   DROP PROCEDURE lms.DeleteMemberRelationshipInformation
GO

CREATE PROCEDURE lms.DeleteMemberRelationshipInformation
	
	@relationship_id bigint = 0,

	@network_information varchar (MAX) = '',
	@deleted_by varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@deleted_by) = 1) OR
		(lms.IsDataControllerSystemUserInfo(@deleted_by) = 1))	
	BEGIN

		IF EXISTS (SELECT relationship_id FROM lms.member_relationship_information WHERE relationship_id = @relationship_id)
		BEGIN

			EXECUTE lms.CreateTemporaryTable @deleted_by, @network_information

			UPDATE lms.member_relationship_information SET
				edited_by = @deleted_by
			WHERE
				relationship_id = @relationship_id

			DELETE FROM lms.member_relationship_information WHERE relationship_id = @relationship_id

		END

	END	
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Delete a member relationship information', 'Member Relationship Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.DeleteMemberRelationshipInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDMemberRelationshipInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectBySysIDMemberRelationshipInformation')
   DROP PROCEDURE lms.SelectBySysIDMemberRelationshipInformation
GO

CREATE PROCEDURE lms.SelectBySysIDMemberRelationshipInformation
	
	@sysid_member varchar (50) = '',

	@system_user_id varchar (50) = ''
	
AS

	IF (lms.IsActiveSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.birthdate AS birthdate,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,				

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,

			mri.relationship_id AS relationship_id,

			rpt.relationship_type_id AS relationship_type_id,
			rpt.relationship_description AS relationship_description,
			rpt.is_parent AS is_parent,
			rpt.is_spouse AS is_spouse,
			rpt.is_sibling AS is_sibling,
			rpt.is_in_law AS is_in_law,
			rpt.is_blood_line AS is_blood_line,
			rpt.is_friend AS is_friend
			
		FROM
			lms.member_relationship_information AS mri
		INNER JOIN lms.member_information AS mbi ON mbi.sysid_member = mri.in_relationship_with_sysid_member
		INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
		INNER JOIN lms.relationship_type AS rpt ON rpt.relationship_type_id = mri.relationship_type_id
		LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		WHERE
			(mri.sysid_member = @sysid_member)
		ORDER BY
			last_name, first_name, middle_name ASC

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a member relationship information', 'Member Relationship Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectBySysIDMemberRelationshipInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- ########################################END TABLE "member_relationship_information" OBJECTS########################################################







-- ################################################TABLE "collector_information" OBJECTS######################################################

--verifies that the trigger "Collector_Information_Trigger_Insert" already exist
IF OBJECT_ID ('lms.Collector_Information_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER lms.Collector_Information_Trigger_Insert
GO

CREATE TRIGGER lms.Collector_Information_Trigger_Insert
	ON  lms.collector_information
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_collector varchar (50)
	DECLARE @sysid_person varchar (50)
	DECLARE @employee_id varchar (50)
	DECLARE @other_collector_information varchar (MAX)
	DECLARE @is_active bit

	DECLARE @created_by varchar (50)

	DECLARE @active_string varchar (20)
	
	SELECT 
		@sysid_collector = i.sysid_collector,
		@sysid_person = i.sysid_person,
		@employee_id = i.employee_id,
		@other_collector_information = i.other_collector_information,
		@is_active = i.is_active,
		
		@created_by = i.created_by
	FROM INSERTED AS i

	IF (@is_active = 1)
	BEGIN
		SET @active_string = 'YES'
	END
	ELSE
	BEGIN
		SET @active_string = 'NO'
	END

	SET @transaction_done = 'CREATED a new collector information ' + 
							'[Collector System ID: ' + ISNULL(@sysid_collector, '') +
							'][Employee ID: ' + ISNULL(@employee_id, '') +
							'][Name: ' + ISNULL((SELECT 
														pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
													FROM
														lms.person_information AS pri
													WHERE 
														(pri.sysid_person = @sysid_person)), '') +
							'][Other Collector Information: ' + ISNULL(@other_collector_information, '') +
							'][Is Active: ' + ISNULL(@active_string, '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE lms.InsertTransactionLog @created_by, @network_information, @transaction_done

GO
-----------------------------------------------------------------

-- verifies that the trigger "Collector_Information_Trigger_Instead_Update" already exist
IF OBJECT_ID ('lms.Collector_Information_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER lms.Collector_Information_Trigger_Instead_Update
GO

CREATE TRIGGER lms.Collector_Information_Trigger_Instead_Update
	ON  lms.collector_information
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar(MAX)
	DECLARE @transaction_done varchar(MAX)
	
	DECLARE @sysid_collector varchar (50)
	DECLARE @sysid_person varchar (50)
	DECLARE @employee_id varchar (50)
	DECLARE @other_collector_information varchar (MAX)
	DECLARE @is_active bit

	DECLARE @edited_by varchar(50)

	DECLARE @employee_id_b varchar (50)
	DECLARE @other_collector_information_b varchar (MAX)
	DECLARE @is_active_b bit
	
	DECLARE @active_string varchar (20)
	DECLARE @active_string_b varchar (20)

	DECLARE @has_update bit

	DECLARE collector_information_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.sysid_collector, i.sysid_person, i.employee_id, i.other_collector_information, i.is_active, i.edited_by
				FROM INSERTED AS i

	OPEN collector_information_update_cursor

	FETCH NEXT FROM collector_information_update_cursor
		INTO @sysid_collector, @sysid_person, @employee_id, @other_collector_information, @is_active, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		SELECT 
			@employee_id_b = cli.employee_id,
			@other_collector_information_b = cli.other_collector_information,
			@is_active_b = cli.is_active
		FROM 
			lms.collector_information AS cli
		WHERE
			cli.sysid_collector = @sysid_collector

		SET @transaction_done = ''
		SET @has_update = 0

		IF (NOT ISNULL(@employee_id COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@employee_id_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Employee ID Before: ' + ISNULL(@employee_id_b, '') + ']' +
														'[Employee ID After: ' + ISNULL(@employee_id, '') + ']'
			SET @has_update = 1
		END
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Employee ID: ' + ISNULL(@employee_id, '') + ']'
		END

		IF (NOT ISNULL(@other_collector_information COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@other_collector_information_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Other Collector Information Before: ' + ISNULL(@other_collector_information_b, '') + ']' +
														'[Other Collector Information After: ' + ISNULL(@other_collector_information, '') + ']'
			SET @has_update = 1
		END

		IF (NOT @is_active = @is_active_b)
		BEGIN

			IF (@is_active_b = 1)
			BEGIN
				SET @active_string_b = 'YES'
			END
			ELSE
			BEGIN
				SET @active_string_b = 'NO'
			END

			IF (@is_active = 1)
			BEGIN
				SET @active_string = 'YES'
			END
			ELSE
			BEGIN
				SET @active_string = 'NO'
			END

			SET @transaction_done = @transaction_done + '[Is Active Before: ' + ISNULL(@active_string_b, '') + ']' +
														'[Is Active After: ' + ISNULL(@active_string, '') + ']'
			SET @has_update = 1

		END

		IF (@has_update = 1)
		BEGIN

			UPDATE lms.collector_information SET
				employee_id = @employee_id,
				other_collector_information = @other_collector_information,
				is_active = @is_active,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				sysid_collector = @sysid_collector

			SET @transaction_done = 'UPDATED a collector information ' + 
									'[Collector System ID: ' + ISNULL(@sysid_collector, '') +
									'][Name: ' + ISNULL((SELECT 
																pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
															FROM
																lms.person_information AS pri
															WHERE 
																(pri.sysid_person = @sysid_person)), '') +
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
			END

			EXECUTE lms.InsertTransactionLog @edited_by, @network_information, @transaction_done

		END
				
		FETCH NEXT FROM collector_information_update_cursor
			INTO @sysid_collector, @sysid_person, @employee_id, @other_collector_information, @is_active, @edited_by

	END

	CLOSE collector_information_update_cursor
	DEALLOCATE collector_information_update_cursor

GO
---------------------------------------------------------------------

-- verifies that the trigger "Collector_Information_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('lms.Collector_Information_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER lms.Collector_Information_Trigger_Instead_Delete
GO

CREATE TRIGGER lms.Collector_Information_Trigger_Instead_Delete
	ON  lms.collector_information
	INSTEAD OF DELETE
	NOT FOR REPLICATION
AS 

	EXECUTE lms.ShowErrorMsg 'Delete a collector information', 'Collector Information'
	
GO
-------------------------------------------------------------------------

-- verifies if the procedure "InsertCollectorInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'InsertCollectorInformation')
   DROP PROCEDURE lms.InsertCollectorInformation
GO

CREATE PROCEDURE lms.InsertCollectorInformation
	
	@sysid_collector varchar (50) = '',
	@employee_id varchar (50) = '',
	@other_collector_information varchar (MAX) = '',
	@is_active bit = 0,

	@sysid_person varchar (50) = '',

	@network_information varchar(MAX) = '',
	@created_by varchar(50)
	
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@created_by) = 1) OR
		(lms.IsLoanOfficerSystemUserInfo(@created_by) = 1))
	BEGIN

		EXECUTE lms.CreateTemporaryTable @created_by, @network_information

		INSERT INTO lms.collector_information
		(
			sysid_collector,
			employee_id,
			other_collector_information,
			is_active,

			sysid_person,

			created_by
		)
		VALUES
		(
			@sysid_collector,
			@employee_id,
			@other_collector_information,
			@is_active,

			@sysid_person,

			@created_by
		)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Insert a collector information', 'Collector Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.InsertCollectorInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "UpdateCollectorInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'UpdateCollectorInformation')
   DROP PROCEDURE lms.UpdateCollectorInformation
GO

CREATE PROCEDURE lms.UpdateCollectorInformation
	
	@sysid_collector varchar (50) = '',
	@employee_id varchar (50) = '',
	@other_collector_information varchar (MAX) = '',
	@is_active bit = 0,

	@network_information varchar(MAX) = '',
	@edited_by varchar(50)
	
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@edited_by) = 1) OR
		(lms.IsLoanOfficerSystemUserInfo(@edited_by) = 1))
	BEGIN

		EXECUTE lms.CreateTemporaryTable @edited_by, @network_information

		UPDATE lms.collector_information SET
			employee_id = @employee_id,
			other_collector_information = @other_collector_information,
			is_active = @is_active,

			edited_by = @edited_by
		WHERE
			sysid_collector = @sysid_collector

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Update a collector information', 'Collector Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.UpdateCollectorInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectCollectorInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectCollectorInformation')
   DROP PROCEDURE lms.SelectCollectorInformation
GO

CREATE PROCEDURE lms.SelectCollectorInformation

	@query_string varchar (50) = '',
	@include_collector_status bit = 0,
	@is_active bit = 0,

	@system_user_id varchar (50) = ''
		
AS

	IF lms.IsActiveSystemUserInfo(@system_user_id) = 1
	BEGIN

		-- A - '*'
		-- B - Include Collector Status
		-- C - Is Active

		--	A	B	C
		-- ============
		--	0	0	0
		--	0	0	1	NOT INCLUDED

		--	0	1	0	JOINED	- A
		--	0	1	1	JOINED	- A

		--	1	0	0
		--	1	0	1	NOT INCLUDED

		--	1	1	0	JOINED	- B
		--	1	1	1	JOINED	- B		

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%') AND (@include_collector_status = 0)				-- (000)				
		BEGIN

			SELECT		
				cli.sysid_collector AS sysid_collector,
				cli.employee_id AS employee_id,
				cli.is_active AS is_active,
				CASE WHEN 
						(cli.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS collector_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag
				
			FROM
				lms.collector_information AS cli
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = cli.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			WHERE
				((cli.employee_id LIKE @query_string) OR 
				((REPLACE(cli.employee_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, employee_id ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (@include_collector_status = 1)				-- (010) AND (011)
		BEGIN

			SELECT		
				cli.sysid_collector AS sysid_collector,
				cli.employee_id AS employee_id,
				cli.is_active AS is_active,
				CASE WHEN 
						(cli.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS collector_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag
				
			FROM
				lms.collector_information AS cli
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = cli.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			WHERE
				(cli.is_active = @is_active) AND
				((cli.employee_id LIKE @query_string) OR 
				((REPLACE(cli.employee_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, employee_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (@include_collector_status = 0)				-- (100)
		BEGIN

			SELECT		
				cli.sysid_collector AS sysid_collector,
				cli.employee_id AS employee_id,
				cli.is_active AS is_active,
				CASE WHEN 
						(cli.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS collector_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag
				
			FROM
				lms.collector_information AS cli
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = cli.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			ORDER BY
				last_name, first_name, middle_name, employee_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (@include_collector_status = 1)				-- (110) AND (111)
		BEGIN

			SELECT		
				cli.sysid_collector AS sysid_collector,
				cli.employee_id AS employee_id,
				cli.is_active AS is_active,
				CASE WHEN 
						(cli.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS collector_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag
				
			FROM
				lms.collector_information AS cli
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = cli.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			ORDER BY
				last_name, first_name, middle_name, employee_id ASC

		END
		
	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a collector information', 'Collector Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectCollectorInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectByEmployeeIDCollectorInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectByEmployeeIDCollectorInformation')
   DROP PROCEDURE lms.SelectByEmployeeIDCollectorInformation
GO

CREATE PROCEDURE lms.SelectByEmployeeIDCollectorInformation

	@employee_id varchar (50) = '',
	@system_user_id varchar (50) = ''
		
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsLoanOfficerSystemUserInfo(@system_user_id) = 1))
	BEGIN

		SELECT		
			cli.sysid_collector AS sysid_collector,
			cli.employee_id AS employee_id,
			cli.other_collector_information AS other_collector_information,
			cli.is_active AS is_active,

			cli.sysid_person AS sysid_person
			
		FROM
			lms.collector_information AS cli
		WHERE
			(cli.employee_id = @employee_id)
		
	END
	ELSE
	BEGIN				
		
		EXECUTE lms.ShowErrorMsg 'Query a collector information', 'Collector Information'
		
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectByEmployeeIDCollectorInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDPersonCollectorInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectBySysIDPersonCollectorInformation')
   DROP PROCEDURE lms.SelectBySysIDPersonCollectorInformation
GO

CREATE PROCEDURE lms.SelectBySysIDPersonCollectorInformation

	@sysid_person varchar (50) = '',
	@system_user_id varchar (50) = ''
		
AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsLoanOfficerSystemUserInfo(@system_user_id) = 1))
	BEGIN

		SELECT 
			cli.employee_id AS employee_id
		FROM
			lms.collector_information AS cli
		WHERE 
			(cli.sysid_person = @sysid_person)
		
	END
	ELSE
	BEGIN				
		
		EXECUTE lms.ShowErrorMsg 'Query a collector information', 'Collector Information'
		
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectBySysIDPersonCollectorInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectCountCollectorInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectCountCollectorInformation')
   DROP PROCEDURE lms.SelectCountCollectorInformation
GO

CREATE PROCEDURE lms.SelectCountCollectorInformation

	@system_user_id varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsLoanOfficerSystemUserInfo(@system_user_id) = 1))
	BEGIN
		
		SELECT COUNT(cli.sysid_collector) FROM lms.collector_information AS cli

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a collector information', 'Collector Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectCountCollectorInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsSysIDCollectorInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'IsExistsSysIDCollectorInformation')
   DROP PROCEDURE lms.IsExistsSysIDCollectorInformation
GO

CREATE PROCEDURE lms.IsExistsSysIDCollectorInformation

	@sysid_collector varchar (50) = '',
	@system_user_id varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsLoanOfficerSystemUserInfo(@system_user_id) = 1))
	BEGIN
		
		SELECT lms.IsExistsSysIDCollectorInfo(@sysid_collector)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a collector information', 'Collector Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.IsExistsSysIDCollectorInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsEmployeeIDCollectorInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'IsExistsEmployeeIDCollectorInformation')
   DROP PROCEDURE lms.IsExistsEmployeeIDCollectorInformation
GO

CREATE PROCEDURE lms.IsExistsEmployeeIDCollectorInformation

	@sysid_collector varchar (50) = '',
	@employee_id varchar (50) = '',
	@system_user_id varchar (50) = ''

AS

	IF ((lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(lms.IsLoanOfficerSystemUserInfo(@system_user_id) = 1))
	BEGIN
		
		SELECT lms.IsExistsEmployeeIDCollectorInfo(@sysid_collector, @employee_id)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a collector information', 'Collector Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.IsExistsEmployeeIDCollectorInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the "IsExistsSysIDCollectorInfo" function already exist
IF OBJECT_ID (N'lms.IsExistsSysIDCollectorInfo') IS NOT NULL
   DROP FUNCTION lms.IsExistsSysIDCollectorInfo
GO

CREATE FUNCTION lms.IsExistsSysIDCollectorInfo
(	
	@sysid_collector varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT sysid_collector FROM lms.collector_information WHERE sysid_collector = @sysid_collector)
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "IsExistsEmployeeIDCollectorInfo" function already exist
IF OBJECT_ID (N'lms.IsExistsEmployeeIDCollectorInfo') IS NOT NULL
   DROP FUNCTION lms.IsExistsEmployeeIDCollectorInfo
GO

CREATE FUNCTION lms.IsExistsEmployeeIDCollectorInfo
(	
	@sysid_collector varchar (50) = '',
	@employee_id varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT sysid_collector FROM lms.collector_information WHERE ((REPLACE(employee_id, ' ', '')) LIKE REPLACE(@employee_id, ' ', '')) AND NOT sysid_collector = @sysid_collector) OR
		EXISTS (SELECT sysid_member FROM lms.member_information WHERE ((REPLACE(member_id, ' ', '')) LIKE REPLACE(@employee_id, ' ', '')))
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- #############################################END TABLE "collector_information" OBJECTS######################################################





-- ###########################################TABLE "member_information" and "collector_information" OBJECTS###########################################

-- verifies if the procedure "SelectByQueryStringMemberEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectByQueryStringMemberEmployeeInformation')
   DROP PROCEDURE lms.SelectByQueryStringMemberEmployeeInformation
GO

CREATE PROCEDURE lms.SelectByQueryStringMemberEmployeeInformation

	@query_string varchar (50) = '',

	@system_user_id varchar (50) = ''
		
AS

	IF lms.IsActiveSystemUserInfo(@system_user_id) = 1
	BEGIN

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%')			
		BEGIN

			SELECT		
				mbi.sysid_member AS sysid_member_employee,
				mbi.member_id AS member_employee_id,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_employee_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				'true' AS is_member_information
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			WHERE
				((mbi.member_id LIKE @query_string) OR 
				((REPLACE(mbi.member_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		
				cli.sysid_collector AS sysid_member_collector,
				cli.employee_id AS member_employee_id,
				cli.is_active AS is_active,
				CASE WHEN 
						(cli.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_employee_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				'false' AS is_member_information
				
			FROM
				lms.collector_information AS cli
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = cli.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			WHERE
				((cli.employee_id LIKE @query_string) OR 
				((REPLACE(cli.employee_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.occupation LIKE @query_string) OR 
				((REPLACE(pri.occupation, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.middle_name LIKE @query_string) OR
				((REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, member_employee_id ASC

		END
		ELSE 
		BEGIN

			SELECT		
				mbi.sysid_member AS sysid_member_employee,
				mbi.member_id AS member_employee_id,
				mbi.is_active AS is_active,
				CASE WHEN 
						(mbi.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_employee_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				'true' AS is_member_information
				
			FROM
				lms.member_information AS mbi
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = mbi.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			UNION ALL
			SELECT		
				cli.sysid_collector AS sysid_member_collector,
				cli.employee_id AS member_employee_id,
				cli.is_active AS is_active,
				CASE WHEN 
						(cli.is_active = 1)
					THEN
						('ACTIVE')
					ELSE
						('INACTIVE')
					END AS member_employee_status_string,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,				
				pri.occupation AS occupation,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				'false' AS is_member_information
				
			FROM
				lms.collector_information AS cli
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = cli.sysid_person
			
			LEFT JOIN lms.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN lms.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			ORDER BY
				last_name, first_name, middle_name, member_employee_id ASC

		END
		
	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a member or collector information', 'Member or Collector Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectByQueryStringMemberEmployeeInformation TO db_lmsusers
GO
-------------------------------------------------------------



-- ########################################END TABLE "member_information" and "collector_information" OBJECTS###########################################





-- ################################################TABLE "system_user_info" OBJECTS######################################################

-- verifies that the trigger "System_User_Info_Trigger_Insert" already exist
IF OBJECT_ID ('lms.System_User_Info_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER lms.System_User_Info_Trigger_Insert
GO
		
CREATE TRIGGER lms.System_User_Info_Trigger_Insert
	ON  lms.system_user_info
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar (MAX)

	DECLARE @sysid_person varchar (50)
	DECLARE @last_name varchar (50)
	DECLARE @first_name varchar (50)
	DECLARE @middle_name varchar (50)
	DECLARE @life_status_code varchar (50)
	DECLARE @gender_code varchar (50)
	DECLARE @birthdate datetime
	DECLARE @place_birth varchar (500)
	DECLARE @email_address varchar (100)
	DECLARE @present_address varchar (500)
	DECLARE @present_phone_nos varchar (100)
	DECLARE @home_address varchar (500)
	DECLARE @home_phone_nos varchar (100)
	DECLARE @house_ownership_information varchar (MAX)
	DECLARE @citizenship varchar (100)
	DECLARE @nationality varchar (100)
	DECLARE @religion varchar (100)
	DECLARE @educational_attainment varchar (MAX)
	DECLARE @special_skills varchar (MAX)

	DECLARE @marital_status_code varchar (50)
	DECLARE @marriage_date datetime
	DECLARE @no_of_dependents tinyint

	DECLARE @occupation varchar (100)
	DECLARE @office_employer_id varchar (50)
	DECLARE @appointment_status_code varchar (50)
	DECLARE @employment_date datetime
	DECLARE @years_of_service tinyint
	DECLARE @salary_income decimal (15, 2)
	DECLARE @other_income_source varchar (MAX)
	DECLARE @total_monthly_expenses decimal (15, 2)
	DECLARE @net_disposable_income decimal (15, 2)

	DECLARE @other_person_information varchar (MAX)

	DECLARE @system_user_id varchar (50)
	DECLARE @system_user_name varchar (50)
	DECLARE @system_user_password varchar (50)
	DECLARE @system_user_status bit	
	
	DECLARE @created_by varchar (50)
	
	DECLARE @status varchar (20)
	
	SELECT 
		@sysid_person = pri.sysid_person,
		@last_name = pri.last_name,
		@first_name = pri.first_name,
		@middle_name = pri.middle_name,
		@life_status_code = pri.life_status_code,
		@gender_code = pri.gender_code,
		@birthdate = pri.birthdate,
		@place_birth = pri.place_birth,
		@email_address = pri.email_address,
		@present_address = pri.present_address,
		@present_phone_nos = pri.present_phone_nos,
		@home_address = pri.home_address,
		@home_phone_nos = pri.home_phone_nos,
		@house_ownership_information = pri.house_ownership_information,
		@citizenship = pri.citizenship,
		@nationality = pri.nationality,
		@religion = pri.religion,
		@educational_attainment = pri.educational_attainment,
		@special_skills = pri.special_skills,

		@marital_status_code = pri.marital_status_code,
		@marriage_date = pri.marriage_date,
		@no_of_dependents = pri.no_of_dependents,

		@occupation = pri.occupation,
		@office_employer_id = pri.office_employer_id,
		@appointment_status_code = pri.appointment_status_code,
		@employment_date = pri.employment_date,
		@years_of_service = pri.years_of_service,
		@salary_income = pri.salary_income,
		@other_income_source = pri.other_income_source,
		@total_monthly_expenses = pri.total_monthly_expenses,
		@net_disposable_income = pri.net_disposable_income,

		@other_person_information = pri.other_person_information,

		@system_user_id = i.system_user_id,
		@system_user_name = i.system_user_name,
		@system_user_password = i.system_user_password,
		@system_user_status = i.system_user_status,

		@created_by = i.created_by		
	FROM INSERTED AS i
	INNER JOIN lms.person_information AS pri ON pri.sysid_person = i.sysid_person

	IF (@system_user_status = 1)
	BEGIN
		SET @status = 'ACCESS GRANT'
	END
	ELSE
	BEGIN
		SET @status = 'ACCESS DENIED'
	END

	SET @transaction_done = 'CREATED a system user information ' +		
							'[System User ID: ' + ISNULL(@system_user_id, '') +				
							'][Person System ID: ' + ISNULL(@sysid_person, '') +
							'][Name: ' + @last_name + ', ' + @first_name + ' ' + ISNULL(@middle_name, '') +
							'][Life Status: ' + ISNULL((SELECT
																crf.code_description
															FROM
																lms.code_reference AS crf
															WHERE
																crf.code_reference_id = @life_status_code), '') +
							'][Gender: ' + ISNULL((SELECT
																crf.code_description
															FROM
																lms.code_reference AS crf
															WHERE
																crf.code_reference_id = @gender_code), '') +
							'][Birthdate: ' + ISNULL(CONVERT(varchar, @birthdate, 101), '') +
							'][Place of Birth: ' + ISNULL(@place_birth, '') +
							'][Email Address: ' + ISNULL(@email_address, '') +
							'][Present Address: ' + ISNULL(@present_address, '') +
							'][Present Phone Nos.: ' + ISNULL(@present_phone_nos, '') +
							'][Home Address: ' + ISNULL(@home_address, '') +
							'][Home Phone Nos.: ' + ISNULL(@home_phone_nos, '') +
							'][House Ownership Information: ' + ISNULL(@house_ownership_information, '') +
							'][Citizenship: ' + ISNULL(@citizenship, '') +
							'][Nationality: ' + ISNULL(@nationality, '') +
							'][Religion: ' + ISNULL(@religion, '') +
							'][Educational Attainment: ' + ISNULL(@educational_attainment, '') +
							'][Special Skills: ' + ISNULL(@special_skills, '') +

							'][Marital Status: ' + ISNULL((SELECT
																crf.code_description
															FROM
																lms.code_reference AS crf
															WHERE
																crf.code_reference_id = @marital_status_code), '') +
							'][Marriage Date: ' + ISNULL(CONVERT(varchar, @marriage_date, 101), '') +
							'][No. of Dependents: ' + ISNULL(CONVERT(varchar, @no_of_dependents), '') +

							'][Occupation: ' + ISNULL(@occupation, '') +
							'][Office/Employer: ' + ISNULL((SELECT
																oei.office_employer_name
															FROM
																lms.office_employer_information AS oei
															WHERE
																oei.office_employer_id = @office_employer_id), '') +
							'][Appointment Status: ' + ISNULL((SELECT
																	crf.code_description
																FROM
																	lms.code_reference AS crf
																WHERE
																	crf.code_reference_id = @appointment_status_code), '') +
							'][Employment Date: ' + ISNULL(CONVERT(varchar, @employment_date, 101), '') +
							'][Years of Service: ' + ISNULL(CONVERT(varchar, @years_of_service), '') +
							'][Salary / Income: ' + ISNULL(CONVERT(varchar, CONVERT(money, @salary_income), 1), '0.00') +
							'][Other Income Source: ' + ISNULL(@other_income_source, '') +
							'][Total Monthly Expenses: ' + ISNULL(CONVERT(varchar, CONVERT(money, @total_monthly_expenses), 1), '0.00') +
							'][Net Disposable Income: ' + ISNULL(CONVERT(varchar, CONVERT(money, @net_disposable_income), 1), '0.00') +

							'][Other Person Information: ' + ISNULL(@other_person_information, '') +
							'][User Name: ' + ISNULL(@system_user_name, '') + 
							'][Password: ' + ISNULL(@system_user_password, '') +
							'][Status: ' + ISNULL(@status, '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @created_by
	END

	EXECUTE lms.InsertTransactionLog @created_by, @network_information, @transaction_done

GO
-------------------------------------------------------------------

-- verifies that the trigger "System_User_Info_Trigger_Instead_Update" already exist
IF OBJECT_ID ('lms.System_User_Info_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER lms.System_User_Info_Trigger_Instead_Update
GO

CREATE TRIGGER lms.System_User_Info_Trigger_Instead_Update
	ON  lms.system_user_info
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar(MAX)
	DECLARE @transaction_done varchar(MAX)
	
	DECLARE @system_user_id varchar (50)
	DECLARE @system_user_name varchar (50)
	DECLARE @system_user_password varchar (50)
	DECLARE @system_user_status bit
	DECLARE @sysid_person varchar (50)

	DECLARE @edited_by varchar(50)

	DECLARE @system_user_name_b varchar (50)
	DECLARE @system_user_password_b varchar (50)
	DECLARE @system_user_status_b bit
	
	DECLARE @status varchar(20)
	DECLARE @status_b varchar(20)

	DECLARE @has_update bit
	
	SELECT 
		@system_user_id = i.system_user_id,
		@system_user_name = i.system_user_name,
		@system_user_password = i.system_user_password,
		@system_user_status = i.system_user_status,
		@sysid_person = i.sysid_person,
		@edited_by = i.edited_by		
	FROM INSERTED AS i

	SELECT 
		@system_user_name_b = sui.system_user_name,
		@system_user_password_b = sui.system_user_password,
		@system_user_status_b = sui.system_user_status
	FROM 
		lms.system_user_info AS sui
	WHERE
		sui.system_user_id = @system_user_id

	SET @transaction_done = ''
	SET @has_update = 0

	IF (NOT ISNULL(@system_user_name COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@system_user_name_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
	BEGIN
		SET @transaction_done = @transaction_done + '[User Name Before: ' + ISNULL(@system_user_name_b, '') + ']' +
													'[User Name After: ' + ISNULL(@system_user_name, '') + ']'
		SET @has_update = 1
	END
	ELSE
	BEGIN
		SET @transaction_done = @transaction_done + '[User Name: ' + ISNULL(@system_user_name, '') + ']'
	END

	IF (NOT ISNULL(@system_user_password COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@system_user_password_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
	BEGIN
		SET @transaction_done = @transaction_done + '[Password Before: ' + ISNULL(@system_user_password_b, '') + ']' +
													'[Password After: ' + ISNULL(@system_user_password, '') + ']'
		SET @has_update = 1
	END

	IF (NOT @system_user_status = @system_user_status_b)
	BEGIN

		IF (@system_user_status_b = 1)
		BEGIN
			SET @status_b = 'ACCESS GRANT'
		END
		ELSE
		BEGIN
			SET @status_b = 'ACCESS DENIED'
		END

		IF (@system_user_status = 1)
		BEGIN
			SET @status = 'ACCESS GRANT'
		END
		ELSE
		BEGIN
			SET @status = 'ACCESS DENIED'
		END

		SET @transaction_done = @transaction_done + '[Status Before: ' + ISNULL(@status_b, '') + ']' +
													'[Status After: ' + ISNULL(@status, '') + ']'
		SET @has_update = 1

	END

	IF (@has_update = 1)
	BEGIN

		UPDATE lms.system_user_info SET
			system_user_name = @system_user_name,
			system_user_password = @system_user_password,
			system_user_status = @system_user_status,

			edited_on = GETDATE(),
			edited_by = NULL
		WHERE
			system_user_id = @system_user_id

		SET @transaction_done = 'UPDATED a system user information' +
								'[System User ID: ' + ISNULL(@system_user_id, '') +
								'][Personal Name: '+ ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	lms.person_information AS pri
																WHERE 
																	pri.sysid_person = @sysid_person), '') +
								']' + @transaction_done

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @edited_by
		END

		EXECUTE lms.InsertTransactionLog @edited_by, @network_information, @transaction_done

	END

GO
---------------------------------------------------------------------

-- verifies that the trigger "System_User_Info_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('lms.System_User_Info_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER lms.System_User_Info_Trigger_Instead_Delete
GO

CREATE TRIGGER lms.System_User_Info_Trigger_Instead_Delete
	ON  lms.system_user_info
	INSTEAD OF DELETE
	NOT FOR REPLICATION
AS 

	EXECUTE lms.ShowErrorMsg 'Delete a system user', 'System Users'
	
GO
-------------------------------------------------------------------------

-- verifies if the procedure "InsertSystemUserInfo" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'InsertSystemUserInfo')
   DROP PROCEDURE lms.InsertSystemUserInfo
GO

CREATE PROCEDURE lms.InsertSystemUserInfo
	
	@system_user_id varchar (50) = '',
	@system_user_name varchar (50) = '',
	@system_user_password varchar (50) = '',
	@system_user_status bit = 0,
	@sysid_person varchar (50) = '',

	@network_information varchar(MAX) = '',
	@created_by varchar(50)
	
AS

	IF lms.IsSystemAdminSystemUserInfo(@created_by) = 1
	BEGIN

		IF (EXISTS (SELECT sysid_person FROM lms.person_information WHERE sysid_person = @sysid_person) AND
			NOT EXISTS (SELECT sysid_person FROM lms.system_user_info WHERE sysid_person = @sysid_person))
		BEGIN

			EXECUTE lms.CreateTemporaryTable @created_by, @network_information

			INSERT INTO lms.system_user_info
			(
				system_user_id,
				system_user_name,
				system_user_password,
				system_user_status,
				sysid_person,

				created_by
			)
			VALUES
			(
				@system_user_id,
				@system_user_name,
				@system_user_password,
				@system_user_status,
				@sysid_person,

				@created_by
			)

		END

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Insert a system user', 'System Users'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.InsertSystemUserInfo TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "UpdateSystemUserInfo" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'UpdateSystemUserInfo')
   DROP PROCEDURE lms.UpdateSystemUserInfo
GO

CREATE PROCEDURE lms.UpdateSystemUserInfo
	
	@system_user_id varchar(50) = '',
	@system_user_name varchar(50) = '',
	@system_user_password varchar(50) = '',
	@system_user_status bit = 0,

	@network_information varchar(MAX) = '',
	@edited_by varchar(50)
	
AS

	IF lms.IsSystemAdminSystemUserInfo(@edited_by) = 1
	BEGIN

		EXECUTE lms.CreateTemporaryTable @edited_by, @network_information

		UPDATE lms.system_user_info SET
			system_user_name = @system_user_name,
			system_user_password = @system_user_password,
			system_user_status = @system_user_status,

			edited_by = @edited_by
		WHERE
			(system_user_id = @system_user_id COLLATE SQL_Latin1_General_CP1_CS_AS) AND
			(system_user_id = @system_user_id)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Update a system user', 'System Users'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.UpdateSystemUserInfo TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectSystemUserInfo" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectSystemUserInfo')
   DROP PROCEDURE lms.SelectSystemUserInfo
GO

CREATE PROCEDURE lms.SelectSystemUserInfo
	
	@query_string varchar (50) = '',
	@system_user_id varchar(50) = ''
	
AS

	IF (lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%')
		BEGIN

			SELECT
				sui.system_user_id AS system_user_id,
				sui.system_user_name AS system_user_name,
				sui.system_user_status AS system_user_status,		
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				lms.GetAccessRightsSystemUserInfo(sui.system_user_id) AS access_description,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				lms.system_user_info AS sui
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				((sui.system_user_name LIKE @query_string) OR
				(pri.last_name LIKE @query_string) OR
				(pri.first_name LIKE @query_string) OR
				(pri.middle_name LIKE @query_string)) AND
				((NOT sui.system_user_id = '#N!kK!$h@K2yLl3K2!sT!@nNeE@#') AND
				(NOT sui.system_user_id = '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'))
			ORDER BY
				pri.last_name ASC, pri.first_name ASC, pri.middle_name ASC, system_user_name ASC

		END
		ELSE
		BEGIN

			SELECT
				sui.system_user_id AS system_user_id,
				sui.system_user_name AS system_user_name,
				sui.system_user_status AS system_user_status,		
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				lms.GetAccessRightsSystemUserInfo(sui.system_user_id) AS access_description,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				lms.system_user_info AS sui
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				((NOT sui.system_user_id = '#N!kK!$h@K2yLl3K2!sT!@nNeE@#') AND
				(NOT sui.system_user_id = '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'))
			ORDER BY
				pri.last_name ASC, pri.first_name ASC, pri.middle_name ASC, system_user_name ASC

		END		

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query system user information', 'System User Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectSystemUserInfo TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySystemUserIDSystemUserInfo" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectBySystemUserIDSystemUserInfo')
   DROP PROCEDURE lms.SelectBySystemUserIDSystemUserInfo
GO

CREATE PROCEDURE lms.SelectBySystemUserIDSystemUserInfo
	
	@retrieve_user_id varchar (50) = '',

	@system_user_id varchar(50) = ''
	
AS

	IF (lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT
			sui.system_user_id AS system_user_id,
			sui.system_user_name AS system_user_name,
			sui.system_user_password AS system_user_password,
			sui.system_user_status AS system_user_status,
			sui.sysid_person AS sysid_person
		FROM
			lms.system_user_info AS sui
		WHERE
			(sui.system_user_id = @retrieve_user_id COLLATE SQL_Latin1_General_CP1_CS_AS) AND
			(sui.system_user_id = @retrieve_user_id)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query system user information', 'System User Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectBySystemUserIDSystemUserInfo TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDPersonSystemUserInfo" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectBySysIDPersonSystemUserInfo')
   DROP PROCEDURE lms.SelectBySysIDPersonSystemUserInfo
GO

CREATE PROCEDURE lms.SelectBySysIDPersonSystemUserInfo
	
	@sysid_person varchar (50) = '',

	@system_user_id varchar (50) = ''
	
AS

	IF (lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT
			sui.system_user_id AS system_user_id
		FROM
			lms.system_user_info AS sui
		WHERE
			(sui.sysid_person = @sysid_person)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query system user information', 'System User Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectBySysIDPersonSystemUserInfo TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectForSystemLogInSystemUserInfo" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectForSystemLogInSystemUserInfo')
   DROP PROCEDURE lms.SelectForSystemLogInSystemUserInfo
GO

CREATE PROCEDURE lms.SelectForSystemLogInSystemUserInfo
	
	@system_user_name varchar(50) = '',
	@system_user_password varchar(50) = '',
	@network_information varchar (MAX) = '',

	@is_for_log_in bit = 0

AS
	IF (@is_for_log_in = 1)
	BEGIN

		SELECT 
			sui.system_user_id AS system_user_id,
			sui.system_user_name AS system_user_name,
			sui.system_user_password AS system_user_password,
			sui.system_user_status AS system_user_status,

			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			lms.GetMinDateForSystemUserInfo() AS installation_date
		FROM 
			lms.system_user_info AS sui
		LEFT JOIN lms.person_information AS pri ON pri.sysid_person = sui.sysid_person
		WHERE 
			(sui.system_user_name = @system_user_name COLLATE SQL_Latin1_General_CP1_CS_AS) AND 
			(sui.system_user_password = @system_user_password COLLATE SQL_Latin1_General_CP1_CS_AS) AND 
			(sui.system_user_name = @system_user_name) AND
			(sui.system_user_password = @system_user_password) AND
			(sui.system_user_status = 1) AND
			(EXISTS (SELECT rights_granted_id FROM lms.access_rights_granted WHERE (system_user_id = sui.system_user_id)))

	END
	ELSE
	BEGIN

		SELECT 
			sui.system_user_name AS system_user_name
		FROM 
			lms.system_user_info AS sui
		WHERE 
			(sui.system_user_name = @system_user_name COLLATE SQL_Latin1_General_CP1_CS_AS) AND 
			(sui.system_user_password = @system_user_password COLLATE SQL_Latin1_General_CP1_CS_AS) AND 
			(sui.system_user_name = @system_user_name) AND
			(sui.system_user_password = @system_user_password) AND 
			(sui.system_user_status = 1) AND
			(EXISTS (SELECT rights_granted_id FROM lms.access_rights_granted WHERE (system_user_id = sui.system_user_id)))

	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectForSystemLogInSystemUserInfo TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsIDSystemUserInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'IsExistsIDSystemUserInformation')
   DROP PROCEDURE lms.IsExistsIDSystemUserInformation
GO

CREATE PROCEDURE lms.IsExistsIDSystemUserInformation
	
	@new_user_id varchar(50) = '',
	@system_user_id varchar(50) = ''
	
AS

	IF (lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT lms.IsExistsIDSystemUserInfo(@new_user_id)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query system user information', 'System User Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.IsExistsIDSystemUserInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsNameSystemUserInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'IsExistsNameSystemUserInformation')
   DROP PROCEDURE lms.IsExistsNameSystemUserInformation
GO

CREATE PROCEDURE lms.IsExistsNameSystemUserInformation
	
	@check_system_user_id varchar (50) = '',
	@check_system_user_name varchar(50) = '',
	
	@system_user_id varchar(50) = ''
	
AS

	IF (lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT lms.IsExistsNameSystemUserInfo(@check_system_user_name, @check_system_user_id)

	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query system user information', 'System User Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.IsExistsNameSystemUserInformation TO db_lmsusers
GO
-------------------------------------------------------------

-- verifies if the "IsExistsIDSystemUserInfo" function already exist
IF OBJECT_ID (N'lms.IsExistsIDSystemUserInfo') IS NOT NULL
   DROP FUNCTION lms.IsExistsIDSystemUserInfo
GO

CREATE FUNCTION lms.IsExistsIDSystemUserInfo
(	
	@new_user_id varchar(50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0

	IF EXISTS (SELECT system_user_id FROM lms.system_user_info WHERE system_user_id = @new_user_id)
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "IsExistsNameSystemUserInfo" function already exist
IF OBJECT_ID (N'lms.IsExistsNameSystemUserInfo') IS NOT NULL
   DROP FUNCTION lms.IsExistsNameSystemUserInfo
GO

CREATE FUNCTION lms.IsExistsNameSystemUserInfo
(	
	@system_user_name varchar(50) = '',
	@system_user_id varchar(50) = ''

)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT 
					system_user_id 
				FROM 
					lms.system_user_info 
				WHERE 
					(NOT system_user_id = @system_user_id) AND
					((REPLACE(system_user_name, ' ', '')) LIKE REPLACE(@system_user_name, ' ', '')))
	BEGIN
		SET @result = 1
	END
	
	RETURN @result

END
GO
------------------------------------------------------

-- verifies if the "GetMinDateForSystemUserInfo" function already exist
IF OBJECT_ID (N'lms.GetMinDateForSystemUserInfo') IS NOT NULL
   DROP FUNCTION lms.GetMinDateForSystemUserInfo
GO

CREATE FUNCTION lms.GetMinDateForSystemUserInfo
(	
)
RETURNS datetime
AS
BEGIN
	
	DECLARE @result datetime
	DECLARE @user_datetime datetime
	DECLARE @trans_datetime datetime

	SELECT @user_datetime = MIN(created_on) FROM lms.system_user_info
	SELECT @trans_datetime = MIN(transaction_date) FROM lms.transaction_log
	
	SET @result = NULL

	IF (NOT @user_datetime IS NULL) AND (@user_datetime < ISNULL(@trans_datetime, GETDATE()))
	BEGIN
		SET @result = @user_datetime
	END
	ELSE IF (NOT @trans_datetime IS NULL) AND (@trans_datetime < ISNULL(@user_datetime, GETDATE()))
	BEGIN
		SET @result = @trans_datetime
	END
	
	RETURN @result

END
GO
------------------------------------------------------

-- ##############################################END TABLE "system_user_info" OBJECTS######################################################




-- ################################################TABLE "access_rights_granted" OBJECTS######################################################

-- verifies that the trigger "Access_Rights_Granted_Trigger_Insert" already exist
IF OBJECT_ID ('lms.Access_Rights_Granted_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER lms.Access_Rights_Granted_Trigger_Insert
GO
		
CREATE TRIGGER lms.Access_Rights_Granted_Trigger_Insert
	ON  lms.access_rights_granted
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar (MAX)
	
	DECLARE @rights_granted_id bigint
	DECLARE @system_user_id varchar (50)
	DECLARE @access_rights varchar (50)

	DECLARE @created_by varchar (50)
	
	SELECT 
		@rights_granted_id = i.rights_granted_id,
		@system_user_id = i.system_user_id,
		@access_rights = i.access_rights,
		@created_by = i.created_by		
	FROM INSERTED AS i

	SET @transaction_done = 'GRANT access rights to a system user ' +
							'[Rights Granted ID: ' + ISNULL(CONVERT(varchar, @rights_granted_id), '') +
							'][System User: ' + ISNULL((SELECT 
															'(' + sui.system_user_name + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + 
																	ISNULL(pri.middle_name, '') 
														FROM 
															lms.system_user_info AS sui
														LEFT JOIN lms.person_information AS pri ON pri.sysid_person = sui.sysid_person
														WHERE 
															sui.system_user_id = @system_user_id), '') + 
							'][Access Rights: ' + ISNULL((SELECT
																sar.access_description
															FROM
																lms.system_access_rights AS sar
															WHERE
																sar.access_rights = @access_rights), '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @created_by
	END

	EXECUTE lms.InsertTransactionLog @created_by, @network_information, @transaction_done

GO
-------------------------------------------------------------------

/*verifies that the trigger "Access_Rights_Granted_Trigger_Instead_Update" already exist*/
IF OBJECT_ID ('lms.Access_Rights_Granted_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER lms.Access_Rights_Granted_Trigger_Instead_Update
GO

CREATE TRIGGER lms.Access_Rights_Granted_Trigger_Instead_Update
	ON  lms.access_rights_granted
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @rights_granted_id bigint
	DECLARE @system_user_id varchar (50)
	DECLARE @access_rights varchar (50)

	DECLARE @edited_by varchar (50)

	DECLARE @has_update bit
	
	SELECT 
		@rights_granted_id = i.rights_granted_id,
		@system_user_id = i.system_user_id,
		@access_rights = i.access_rights,
		@edited_by = i.edited_by		
	FROM INSERTED AS i	

	IF NOT @edited_by IS NULL
	BEGIN

		--used for the delete trigger
		UPDATE lms.access_rights_granted SET
			edited_on = GETDATE(),
			edited_by = @edited_by
		WHERE
			(rights_granted_id = @rights_granted_id) AND
			(system_user_id = @system_user_id) AND
			(access_rights = @access_rights)

	END	

GO
/*-----------------------------------------------------------------*/

-- verifies that the trigger "Access_Rights_Granted_Trigger_Delete" already exist
IF OBJECT_ID ('lms.Access_Rights_Granted_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER lms.Access_Rights_Granted_Trigger_Delete
GO
		
CREATE TRIGGER lms.Access_Rights_Granted_Trigger_Delete
	ON  lms.access_rights_granted
	FOR DELETE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar (MAX)
	
	DECLARE @rights_granted_id bigint
	DECLARE @system_user_id varchar (50)
	DECLARE @access_rights varchar (50)

	DECLARE @deleted_by varchar (50)
	
	SELECT 
		@rights_granted_id = d.rights_granted_id,
		@system_user_id = d.system_user_id,
		@access_rights = d.access_rights,
		@deleted_by = d.edited_by		
	FROM DELETED AS d

	SET @transaction_done = 'EXCLUDE access rights to a system user ' +
							'[Rights Granted ID: ' + ISNULL(CONVERT(varchar, @rights_granted_id), '') +
							'][System User: ' + ISNULL((SELECT 
															'(' + sui.system_user_name + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + 
																	ISNULL(pri.middle_name, '') 
														FROM 
															lms.system_user_info AS sui
														LEFT JOIN lms.person_information AS pri ON pri.sysid_person = sui.sysid_person
														WHERE 
															sui.system_user_id = @system_user_id), '') + 
							'][Access Rights: ' + ISNULL((SELECT
																sar.access_description
															FROM
																lms.system_access_rights AS sar
															WHERE
																sar.access_rights = @access_rights), '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##lms_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##lms_network_information_table WHERE system_user_id = @deleted_by
	END

	EXECUTE lms.InsertTransactionLog @deleted_by, @network_information, @transaction_done

GO
-------------------------------------------------------------------

-- ##############################################END TABLE "access_rights_granted" OBJECTS######################################################




-- ###########################################TABLE "transaction_log" OBJECTS############################################################

-- verifies if the procedure "SelectTransactionLog" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'lms' AND SPECIFIC_NAME = N'SelectTransactionLog')
   DROP PROCEDURE lms.SelectTransactionLog
GO

CREATE PROCEDURE lms.SelectTransactionLog

	@query_string varchar (50) = '',
	@user_id varchar (50) = '',
	@date_start datetime,
	@date_end datetime,

	@system_user_id varchar (50) = ''
		
AS	
	

	IF (lms.IsSystemAdminSystemUserInfo(@system_user_id) = 1)
	BEGIN

		--	A - query_string (*)
		--	B - user_id
		--	C - date_start date_end

		--	A	B	C
		--	==========
		--	0	0	0
		--	0	0	1
		--	0	1	0
		--	0	1	1
		--	1	0	0
		--	1	0	1
		--	1	1	0
		--	1	1	1

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@user_id, '') = '') AND			--(000)
				((@date_start IS NULL) OR (@date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description,	
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				lms.transaction_log AS trl
			INNER JOIN lms.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				(trl.transaction_done LIKE @query_string) OR
				(trl.network_information LIKE @query_string)
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@user_id, '') = '') AND			--(001)
				((NOT @date_start IS NULL) AND (NOT @date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description,		
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				lms.transaction_log AS trl
			INNER JOIN lms.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				((trl.transaction_done LIKE @query_string) OR
				(trl.network_information LIKE @query_string)) AND
				(trl.transaction_date BETWEEN @date_start AND @date_end)
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@user_id, '') = '') AND			--(010)
				((@date_start IS NULL) OR (@date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description, 		
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				lms.transaction_log AS trl
			INNER JOIN lms.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				((trl.transaction_done LIKE @query_string) OR
				(trl.network_information LIKE @query_string)) AND
				(trl.system_user_id = @user_id)
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@user_id, '') = '') AND			--(011)
				((NOT @date_start IS NULL) AND (NOT @date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description,	
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				lms.transaction_log AS trl
			INNER JOIN lms.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				((trl.transaction_done LIKE @query_string) OR
				(trl.network_information LIKE @query_string)) AND
				(trl.transaction_date BETWEEN @date_start AND @date_end) AND
				(trl.system_user_id = @user_id)
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@user_id, '') = '') AND			--(100)
				((@date_start IS NULL) OR (@date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description,	
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				lms.transaction_log AS trl
			INNER JOIN lms.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = sui.sysid_person
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@user_id, '') = '') AND			--(101)
				((NOT @date_start IS NULL) AND (NOT @date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description,		
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				lms.transaction_log AS trl
			INNER JOIN lms.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				(trl.transaction_date BETWEEN @date_start AND @date_end)
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@user_id, '') = '') AND			--(110)
				((@date_start IS NULL) OR (@date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description,		
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				lms.transaction_log AS trl
			INNER JOIN lms.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				(trl.system_user_id = @user_id)
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@user_id, '') = '') AND			--(111)
				((NOT @date_start IS NULL) AND (NOT @date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description,		
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				lms.transaction_log AS trl
			INNER JOIN lms.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN lms.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				(trl.transaction_date BETWEEN @date_start AND @date_end) AND
				(trl.system_user_id = @user_id)
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END

		
	END
	ELSE
	BEGIN
		EXECUTE lms.ShowErrorMsg 'Query a transaction log', 'Transaction Log'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON lms.SelectTransactionLog TO db_lmsusers
GO
-------------------------------------------------------------

-- #########################################END TABLE "transaction_log" OBJECTS############################################################






-- ######################################RESTORE DEPENDENT TABLE CONSTRAINTS#############################################################

-- ###################################END RESTORE DEPENDENT TABLE CONSTRAINTS############################################################






-- ############################################INITIAL DATABASE INFORMATION#############################################################
--lms.relationship_type
INSERT INTO lms.relationship_type(relationship_type_id, relationship_description, is_parent)
	SELECT 'RTID001', 'Father', 1
	UNION ALL
	SELECT 'RTID002', 'Mother', 1

INSERT INTO lms.relationship_type(relationship_type_id, relationship_description, is_spouse)
	SELECT 'RTID003', 'Husband', 1
	UNION ALL
	SELECT 'RTID004', 'Wife', 1

INSERT INTO lms.relationship_type(relationship_type_id, relationship_description, is_sibling)
	SELECT 'RTID005', 'Brother', 1
	UNION ALL
	SELECT 'RTID006', 'Sister', 1
	
INSERT INTO lms.relationship_type(relationship_type_id, relationship_description, is_in_law)
	SELECT 'RTID007', 'Father-in-law', 1
	UNION ALL
	SELECT 'RTID008', 'Mother-in-law', 1
	UNION ALL
	SELECT 'RTID009', 'Brother-in-law', 1
	UNION ALL
	SELECT 'RTID010', 'Sister-in-law', 1
	
INSERT INTO lms.relationship_type(relationship_type_id, relationship_description, is_blood_line)
	SELECT 'RTID011', 'Uncle/Tito', 1
	UNION ALL
	SELECT 'RTID012', 'Auntie/Tita', 1
	UNION ALL
	SELECT 'RTID013', 'Cousin', 1
	UNION ALL
	SELECT 'RTID014', 'Nephew', 1
	UNION ALL
	SELECT 'RTID015', 'Niece', 1

INSERT INTO lms.relationship_type(relationship_type_id, relationship_description, is_friend)
	SELECT 'RTID016', 'Guardian', 1
	UNION ALL
	SELECT 'RTID017', 'Family Friend', 1

INSERT INTO lms.relationship_type(relationship_type_id, relationship_description, is_sibling)
	SELECT 'RTID018', 'Son', 1
	UNION ALL
	SELECT 'RTID019', 'Daughter', 1


--lms.office_employer_information
INSERT INTO lms.office_employer_information(office_employer_id, office_employer_name, office_employer_acronym,
								office_employer_address, office_employer_phone_nos, created_by)
	SELECT 'OEI000001', 'City Economic Enterprise Office', 'CEEO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000002', 'Traffic Management Office', 'TMO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000003', 'City Social Welfare and Development Office', 'DCWDO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000004', 'City Health Office', 'CHO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000005', 'City Accountant''s Office', 'CACO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000006', 'City Assessor''s Office', 'CASO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000007', 'City Engineer''s Office', 'CEO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000008', 'City Treasurer''s Office', 'CTO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000009', 'General Services Office', 'GSO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000010', 'City Agriculturist Office', 'CAGO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000011', 'City Legal Office', 'CLO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000012', 'CHLIDO', 'CHLIDO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000013', 'City Veterinary Office', 'CVO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000014', 'City Council Office', 'CCO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000015', 'Local Civil Registrar Office', 'LCRO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000016', 'City Budget Office', 'CBO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000017', 'City Mayor''s Office', 'CMO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000018', 'City Tourism Office', 'CTRO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000019', 'City Personnel Office', 'CPO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000020', 'City Planning and Development Office', 'CPDO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000021', 'City Administrator''s Office', 'CADO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000022', 'City Public Library', 'CPL', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000023', 'City Publication', 'CPN', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000024', 'ENRO', 'ENRO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000025', 'DepEd. and City Superintendet''s Office', 'DCSO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000026', 'Sports and Youth Development Office', 'SYDO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000027', 'Sectoral Desk', 'SD', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000028', 'Internal Audit Office', 'IAO', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
	UNION ALL
	SELECT 'OEI000029', 'Dumaguete City Goverment Employees General Welfare Association', 'DCGEGWAI', NULL, NULL, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#'
-- ##########################################END INITIAL DATABASE INFORMATION#############################################################




-- ########################################FOR CODE DEBUGGING########################################################################

--as administrator
INSERT INTO lms.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000001', 'Cornelia', 'Jesus', 'G', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO lms.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#Xdu&3%-<VYzP@1gzO^g3rRpQnM#', 'AdminAccess', '?@ssw0rd', 1, 'SYSPER000000000001', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO lms.access_rights_granted(system_user_id, access_rights, created_by)
	VALUES ('#Xdu&3%-<VYzP@1gzO^g3rRpQnM#', '@NTz3&W1Z_aQ)-2T5zPwR1:zHG2!4^zmBRqf7%I@', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as loan officer
INSERT INTO lms.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000002', 'Onoon', 'Emiliano', 'T', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO lms.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#H21T*zF^s=TwQerPozQR5ymTq1#', 'LoanOfficer', '?@ssw0rd', 1, 'SYSPER000000000002', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO lms.access_rights_granted(system_user_id, access_rights, created_by)
	VALUES ('#H21T*zF^s=TwQerPozQR5ymTq1#', '@V1UlR_9*t^qP|;oI3WqI8_sU6wOwY82zUtWU&w@', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as cashier
INSERT INTO lms.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000003', 'Orillana', 'Belenda', 'L', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO lms.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#I7a1Qu^e8}sQvXi902Twep+23b#', 'Cashier', '?@ssw0rd', 1, 'SYSPER000000000003', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO lms.access_rights_granted(system_user_id, access_rights, created_by)
	VALUES ('#I7a1Qu^e8}sQvXi902Twep+23b#', '@Yi*w$zTI4EIq914_$sUTw84#2(wz\UTqzI9s7+@', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as accountant
INSERT INTO lms.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000004', 'Aranas', 'Elie', 'E', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO lms.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#PqY6sR23*73BzP01wTuvR972Bc#', 'Disbursement', '?@ssw0rd', 1, 'SYSPER000000000004', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO lms.access_rights_granted(system_user_id, access_rights, created_by)
	VALUES ('#PqY6sR23*73BzP01wTuvR972Bc#', '@Y3Rz*s9$rX-^2|zvB1#i&%saT6wQzmU7$cI+w=@', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

-- ######################################END FOR CODE DEBUGGING########################################################################
